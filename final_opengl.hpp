/*
THIS IS A PROTOTYPE LIBRARY - not useable for anybody!
*/

#ifndef FOGL_INCLUDE_HPP
#define FOGL_INCLUDE_HPP

// ****************************************************************************
//
// Header
//
// ****************************************************************************

//
// Platform detection
//
#if defined(_WIN32)
#	define FOGL_PLATFORM_WINDOWS
#elif defined(__linux__) || defined(__gnu_linux__) || defined(linux)
#	define FOGL_PLATFORM_LINUX
#elif defined(__unix__) || defined(_POSIX_VERSION)
#	define FOGL_PLATFORM_UNIX
#else
#	error "This platform/compiler is not supported!"
#endif

#ifdef FOGL_PLATFORM_WINDOWS
//
// Required windows api defines
//
#	ifdef APIENTRY
#		ifndef FOGL_GLAPIENTRY
#			define FOGL_GLAPIENTRY APIENTRY
#		endif
#		ifndef FOGL_APIENTRY
#			define FOGL_APIENTRY APIENTRY
#		endif
#	else
#		if defined(__MINGW32__) || defined(__CYGWIN__) || (_MSC_VER >= 800) || defined(_STDCALL_SUPPORTED) || defined(__BORLANDC__)
#			define FOGL_APIENTRY __stdcall
#			ifndef FOGL_GLAPIENTRY
#				define FOGL_GLAPIENTRY __stdcall
#			endif
#			ifndef FOGL_APIENTRY
#				define FOGL_APIENTRY __stdcall
#			endif
#		else
#			define FOGL_APIENTRY
#		endif
#	endif
#	ifndef FOGL_WINGDIAPI
#		define FOGL_WINGDIAPI __declspec(dllimport)
#	endif
#	ifndef FOGL_GLAPI
#		if defined(__MINGW32__) || defined(__CYGWIN__)
#			define FOGL_GLAPI extern
#		else
#			define FOGL_GLAPI FOGL_WINGDIAPI
#		endif
#	endif

#else
#	error "Unsupported platform!"
#endif

#if FOGL_AS_PRIVATE
#	define fogl_api static
#else
#	define fogl_api extern
#endif

#if !defined(FOGL_STATIC)
#	define FOGL_STATIC static
#endif

//
// API
//
namespace fogl {
	fogl_api void LoadOpenGLExtensions();
};

//
// Includes
//
#include <stddef.h>
#include <inttypes.h>

#ifdef __cplusplus
extern "C" {
#endif

	//
	// OpenGL
	//
#ifndef GL_VERSION_1_1
#	define GL_VERSION_1_1 1
	typedef unsigned int GLenum;
	typedef unsigned int GLbitfield;
	typedef unsigned int GLuint;
	typedef int GLint;
	typedef int GLsizei;
	typedef unsigned char GLboolean;
	typedef signed char GLbyte;
	typedef short GLshort;
	typedef unsigned char GLubyte;
	typedef unsigned short GLushort;
	typedef unsigned long GLulong;
	typedef float GLfloat;
	typedef float GLclampf;
	typedef double GLdouble;
	typedef double GLclampd;
	typedef void GLvoid;
	static constexpr uint32_t GL_ACCUM = 0x0100;
	static constexpr uint32_t GL_LOAD = 0x0101;
	static constexpr uint32_t GL_RETURN = 0x0102;
	static constexpr uint32_t GL_MULT = 0x0103;
	static constexpr uint32_t GL_ADD = 0x0104;
	static constexpr uint32_t GL_NEVER = 0x0200;
	static constexpr uint32_t GL_LESS = 0x0201;
	static constexpr uint32_t GL_EQUAL = 0x0202;
	static constexpr uint32_t GL_LEQUAL = 0x0203;
	static constexpr uint32_t GL_GREATER = 0x0204;
	static constexpr uint32_t GL_NOTEQUAL = 0x0205;
	static constexpr uint32_t GL_GEQUAL = 0x0206;
	static constexpr uint32_t GL_ALWAYS = 0x0207;
	static constexpr uint32_t GL_CURRENT_BIT = 0x00000001;
	static constexpr uint32_t GL_POINT_BIT = 0x00000002;
	static constexpr uint32_t GL_LINE_BIT = 0x00000004;
	static constexpr uint32_t GL_POLYGON_BIT = 0x00000008;
	static constexpr uint32_t GL_POLYGON_STIPPLE_BIT = 0x00000010;
	static constexpr uint32_t GL_PIXEL_MODE_BIT = 0x00000020;
	static constexpr uint32_t GL_LIGHTING_BIT = 0x00000040;
	static constexpr uint32_t GL_FOG_BIT = 0x00000080;
	static constexpr uint32_t GL_DEPTH_BUFFER_BIT = 0x00000100;
	static constexpr uint32_t GL_ACCUM_BUFFER_BIT = 0x00000200;
	static constexpr uint32_t GL_STENCIL_BUFFER_BIT = 0x00000400;
	static constexpr uint32_t GL_VIEWPORT_BIT = 0x00000800;
	static constexpr uint32_t GL_TRANSFORM_BIT = 0x00001000;
	static constexpr uint32_t GL_ENABLE_BIT = 0x00002000;
	static constexpr uint32_t GL_COLOR_BUFFER_BIT = 0x00004000;
	static constexpr uint32_t GL_HINT_BIT = 0x00008000;
	static constexpr uint32_t GL_EVAL_BIT = 0x00010000;
	static constexpr uint32_t GL_LIST_BIT = 0x00020000;
	static constexpr uint32_t GL_TEXTURE_BIT = 0x00040000;
	static constexpr uint32_t GL_SCISSOR_BIT = 0x00080000;
	static constexpr uint32_t GL_ALL_ATTRIB_BITS = 0x000fffff;
	static constexpr uint32_t GL_POINTS = 0x0000;
	static constexpr uint32_t GL_LINES = 0x0001;
	static constexpr uint32_t GL_LINE_LOOP = 0x0002;
	static constexpr uint32_t GL_LINE_STRIP = 0x0003;
	static constexpr uint32_t GL_TRIANGLES = 0x0004;
	static constexpr uint32_t GL_TRIANGLE_STRIP = 0x0005;
	static constexpr uint32_t GL_TRIANGLE_FAN = 0x0006;
	static constexpr uint32_t GL_QUADS = 0x0007;
	static constexpr uint32_t GL_QUAD_STRIP = 0x0008;
	static constexpr uint32_t GL_POLYGON = 0x0009;
	static constexpr uint32_t GL_ZERO = 0;
	static constexpr uint32_t GL_ONE = 1;
	static constexpr uint32_t GL_SRC_COLOR = 0x0300;
	static constexpr uint32_t GL_ONE_MINUS_SRC_COLOR = 0x0301;
	static constexpr uint32_t GL_SRC_ALPHA = 0x0302;
	static constexpr uint32_t GL_ONE_MINUS_SRC_ALPHA = 0x0303;
	static constexpr uint32_t GL_DST_ALPHA = 0x0304;
	static constexpr uint32_t GL_ONE_MINUS_DST_ALPHA = 0x0305;
	static constexpr uint32_t GL_DST_COLOR = 0x0306;
	static constexpr uint32_t GL_ONE_MINUS_DST_COLOR = 0x0307;
	static constexpr uint32_t GL_SRC_ALPHA_SATURATE = 0x0308;
	static constexpr uint32_t GL_TRUE = 1;
	static constexpr uint32_t GL_FALSE = 0;
	static constexpr uint32_t GL_CLIP_PLANE0 = 0x3000;
	static constexpr uint32_t GL_CLIP_PLANE1 = 0x3001;
	static constexpr uint32_t GL_CLIP_PLANE2 = 0x3002;
	static constexpr uint32_t GL_CLIP_PLANE3 = 0x3003;
	static constexpr uint32_t GL_CLIP_PLANE4 = 0x3004;
	static constexpr uint32_t GL_CLIP_PLANE5 = 0x3005;
	static constexpr uint32_t GL_BYTE = 0x1400;
	static constexpr uint32_t GL_UNSIGNED_BYTE = 0x1401;
	static constexpr uint32_t GL_SHORT = 0x1402;
	static constexpr uint32_t GL_UNSIGNED_SHORT = 0x1403;
	static constexpr uint32_t GL_INT = 0x1404;
	static constexpr uint32_t GL_UNSIGNED_INT = 0x1405;
	static constexpr uint32_t GL_FLOAT = 0x1406;
	static constexpr uint32_t GL_2_BYTES = 0x1407;
	static constexpr uint32_t GL_3_BYTES = 0x1408;
	static constexpr uint32_t GL_4_BYTES = 0x1409;
	static constexpr uint32_t GL_DOUBLE = 0x140A;
	static constexpr uint32_t GL_NONE = 0;
	static constexpr uint32_t GL_FRONT_LEFT = 0x0400;
	static constexpr uint32_t GL_FRONT_RIGHT = 0x0401;
	static constexpr uint32_t GL_BACK_LEFT = 0x0402;
	static constexpr uint32_t GL_BACK_RIGHT = 0x0403;
	static constexpr uint32_t GL_FRONT = 0x0404;
	static constexpr uint32_t GL_BACK = 0x0405;
	static constexpr uint32_t GL_LEFT = 0x0406;
	static constexpr uint32_t GL_RIGHT = 0x0407;
	static constexpr uint32_t GL_FRONT_AND_BACK = 0x0408;
	static constexpr uint32_t GL_AUX0 = 0x0409;
	static constexpr uint32_t GL_AUX1 = 0x040A;
	static constexpr uint32_t GL_AUX2 = 0x040B;
	static constexpr uint32_t GL_AUX3 = 0x040C;
	static constexpr uint32_t GL_NO_ERROR = 0;
	static constexpr uint32_t GL_INVALID_ENUM = 0x0500;
	static constexpr uint32_t GL_INVALID_VALUE = 0x0501;
	static constexpr uint32_t GL_INVALID_OPERATION = 0x0502;
	static constexpr uint32_t GL_STACK_OVERFLOW = 0x0503;
	static constexpr uint32_t GL_STACK_UNDERFLOW = 0x0504;
	static constexpr uint32_t GL_OUT_OF_MEMORY = 0x0505;
	static constexpr uint32_t GL_2D = 0x0600;
	static constexpr uint32_t GL_3D = 0x0601;
	static constexpr uint32_t GL_3D_COLOR = 0x0602;
	static constexpr uint32_t GL_3D_COLOR_TEXTURE = 0x0603;
	static constexpr uint32_t GL_4D_COLOR_TEXTURE = 0x0604;
	static constexpr uint32_t GL_PASS_THROUGH_TOKEN = 0x0700;
	static constexpr uint32_t GL_POINT_TOKEN = 0x0701;
	static constexpr uint32_t GL_LINE_TOKEN = 0x0702;
	static constexpr uint32_t GL_POLYGON_TOKEN = 0x0703;
	static constexpr uint32_t GL_BITMAP_TOKEN = 0x0704;
	static constexpr uint32_t GL_DRAW_PIXEL_TOKEN = 0x0705;
	static constexpr uint32_t GL_COPY_PIXEL_TOKEN = 0x0706;
	static constexpr uint32_t GL_LINE_RESET_TOKEN = 0x0707;
	static constexpr uint32_t GL_EXP = 0x0800;
	static constexpr uint32_t GL_EXP2 = 0x0801;
	static constexpr uint32_t GL_CW = 0x0900;
	static constexpr uint32_t GL_CCW = 0x0901;
	static constexpr uint32_t GL_COEFF = 0x0A00;
	static constexpr uint32_t GL_ORDER = 0x0A01;
	static constexpr uint32_t GL_DOMAIN = 0x0A02;
	static constexpr uint32_t GL_CURRENT_COLOR = 0x0B00;
	static constexpr uint32_t GL_CURRENT_INDEX = 0x0B01;
	static constexpr uint32_t GL_CURRENT_NORMAL = 0x0B02;
	static constexpr uint32_t GL_CURRENT_TEXTURE_COORDS = 0x0B03;
	static constexpr uint32_t GL_CURRENT_RASTER_COLOR = 0x0B04;
	static constexpr uint32_t GL_CURRENT_RASTER_INDEX = 0x0B05;
	static constexpr uint32_t GL_CURRENT_RASTER_TEXTURE_COORDS = 0x0B06;
	static constexpr uint32_t GL_CURRENT_RASTER_POSITION = 0x0B07;
	static constexpr uint32_t GL_CURRENT_RASTER_POSITION_VALID = 0x0B08;
	static constexpr uint32_t GL_CURRENT_RASTER_DISTANCE = 0x0B09;
	static constexpr uint32_t GL_POINT_SMOOTH = 0x0B10;
	static constexpr uint32_t GL_POINT_SIZE = 0x0B11;
	static constexpr uint32_t GL_POINT_SIZE_RANGE = 0x0B12;
	static constexpr uint32_t GL_POINT_SIZE_GRANULARITY = 0x0B13;
	static constexpr uint32_t GL_LINE_SMOOTH = 0x0B20;
	static constexpr uint32_t GL_LINE_WIDTH = 0x0B21;
	static constexpr uint32_t GL_LINE_WIDTH_RANGE = 0x0B22;
	static constexpr uint32_t GL_LINE_WIDTH_GRANULARITY = 0x0B23;
	static constexpr uint32_t GL_LINE_STIPPLE = 0x0B24;
	static constexpr uint32_t GL_LINE_STIPPLE_PATTERN = 0x0B25;
	static constexpr uint32_t GL_LINE_STIPPLE_REPEAT = 0x0B26;
	static constexpr uint32_t GL_LIST_MODE = 0x0B30;
	static constexpr uint32_t GL_MAX_LIST_NESTING = 0x0B31;
	static constexpr uint32_t GL_LIST_BASE = 0x0B32;
	static constexpr uint32_t GL_LIST_INDEX = 0x0B33;
	static constexpr uint32_t GL_POLYGON_MODE = 0x0B40;
	static constexpr uint32_t GL_POLYGON_SMOOTH = 0x0B41;
	static constexpr uint32_t GL_POLYGON_STIPPLE = 0x0B42;
	static constexpr uint32_t GL_EDGE_FLAG = 0x0B43;
	static constexpr uint32_t GL_CULL_FACE = 0x0B44;
	static constexpr uint32_t GL_CULL_FACE_MODE = 0x0B45;
	static constexpr uint32_t GL_FRONT_FACE = 0x0B46;
	static constexpr uint32_t GL_LIGHTING = 0x0B50;
	static constexpr uint32_t GL_LIGHT_MODEL_LOCAL_VIEWER = 0x0B51;
	static constexpr uint32_t GL_LIGHT_MODEL_TWO_SIDE = 0x0B52;
	static constexpr uint32_t GL_LIGHT_MODEL_AMBIENT = 0x0B53;
	static constexpr uint32_t GL_SHADE_MODEL = 0x0B54;
	static constexpr uint32_t GL_COLOR_MATERIAL_FACE = 0x0B55;
	static constexpr uint32_t GL_COLOR_MATERIAL_PARAMETER = 0x0B56;
	static constexpr uint32_t GL_COLOR_MATERIAL = 0x0B57;
	static constexpr uint32_t GL_FOG = 0x0B60;
	static constexpr uint32_t GL_FOG_INDEX = 0x0B61;
	static constexpr uint32_t GL_FOG_DENSITY = 0x0B62;
	static constexpr uint32_t GL_FOG_START = 0x0B63;
	static constexpr uint32_t GL_FOG_END = 0x0B64;
	static constexpr uint32_t GL_FOG_MODE = 0x0B65;
	static constexpr uint32_t GL_FOG_COLOR = 0x0B66;
	static constexpr uint32_t GL_DEPTH_RANGE = 0x0B70;
	static constexpr uint32_t GL_DEPTH_TEST = 0x0B71;
	static constexpr uint32_t GL_DEPTH_WRITEMASK = 0x0B72;
	static constexpr uint32_t GL_DEPTH_CLEAR_VALUE = 0x0B73;
	static constexpr uint32_t GL_DEPTH_FUNC = 0x0B74;
	static constexpr uint32_t GL_ACCUM_CLEAR_VALUE = 0x0B80;
	static constexpr uint32_t GL_STENCIL_TEST = 0x0B90;
	static constexpr uint32_t GL_STENCIL_CLEAR_VALUE = 0x0B91;
	static constexpr uint32_t GL_STENCIL_FUNC = 0x0B92;
	static constexpr uint32_t GL_STENCIL_VALUE_MASK = 0x0B93;
	static constexpr uint32_t GL_STENCIL_FAIL = 0x0B94;
	static constexpr uint32_t GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
	static constexpr uint32_t GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
	static constexpr uint32_t GL_STENCIL_REF = 0x0B97;
	static constexpr uint32_t GL_STENCIL_WRITEMASK = 0x0B98;
	static constexpr uint32_t GL_MATRIX_MODE = 0x0BA0;
	static constexpr uint32_t GL_NORMALIZE = 0x0BA1;
	static constexpr uint32_t GL_VIEWPORT = 0x0BA2;
	static constexpr uint32_t GL_MODELVIEW_STACK_DEPTH = 0x0BA3;
	static constexpr uint32_t GL_PROJECTION_STACK_DEPTH = 0x0BA4;
	static constexpr uint32_t GL_TEXTURE_STACK_DEPTH = 0x0BA5;
	static constexpr uint32_t GL_MODELVIEW_MATRIX = 0x0BA6;
	static constexpr uint32_t GL_PROJECTION_MATRIX = 0x0BA7;
	static constexpr uint32_t GL_TEXTURE_MATRIX = 0x0BA8;
	static constexpr uint32_t GL_ATTRIB_STACK_DEPTH = 0x0BB0;
	static constexpr uint32_t GL_CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1;
	static constexpr uint32_t GL_ALPHA_TEST = 0x0BC0;
	static constexpr uint32_t GL_ALPHA_TEST_FUNC = 0x0BC1;
	static constexpr uint32_t GL_ALPHA_TEST_REF = 0x0BC2;
	static constexpr uint32_t GL_DITHER = 0x0BD0;
	static constexpr uint32_t GL_BLEND_DST = 0x0BE0;
	static constexpr uint32_t GL_BLEND_SRC = 0x0BE1;
	static constexpr uint32_t GL_BLEND = 0x0BE2;
	static constexpr uint32_t GL_LOGIC_OP_MODE = 0x0BF0;
	static constexpr uint32_t GL_INDEX_LOGIC_OP = 0x0BF1;
	static constexpr uint32_t GL_COLOR_LOGIC_OP = 0x0BF2;
	static constexpr uint32_t GL_AUX_BUFFERS = 0x0C00;
	static constexpr uint32_t GL_DRAW_BUFFER = 0x0C01;
	static constexpr uint32_t GL_READ_BUFFER = 0x0C02;
	static constexpr uint32_t GL_SCISSOR_BOX = 0x0C10;
	static constexpr uint32_t GL_SCISSOR_TEST = 0x0C11;
	static constexpr uint32_t GL_INDEX_CLEAR_VALUE = 0x0C20;
	static constexpr uint32_t GL_INDEX_WRITEMASK = 0x0C21;
	static constexpr uint32_t GL_COLOR_CLEAR_VALUE = 0x0C22;
	static constexpr uint32_t GL_COLOR_WRITEMASK = 0x0C23;
	static constexpr uint32_t GL_INDEX_MODE = 0x0C30;
	static constexpr uint32_t GL_RGBA_MODE = 0x0C31;
	static constexpr uint32_t GL_DOUBLEBUFFER = 0x0C32;
	static constexpr uint32_t GL_STEREO = 0x0C33;
	static constexpr uint32_t GL_RENDER_MODE = 0x0C40;
	static constexpr uint32_t GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50;
	static constexpr uint32_t GL_POINT_SMOOTH_HINT = 0x0C51;
	static constexpr uint32_t GL_LINE_SMOOTH_HINT = 0x0C52;
	static constexpr uint32_t GL_POLYGON_SMOOTH_HINT = 0x0C53;
	static constexpr uint32_t GL_FOG_HINT = 0x0C54;
	static constexpr uint32_t GL_TEXTURE_GEN_S = 0x0C60;
	static constexpr uint32_t GL_TEXTURE_GEN_T = 0x0C61;
	static constexpr uint32_t GL_TEXTURE_GEN_R = 0x0C62;
	static constexpr uint32_t GL_TEXTURE_GEN_Q = 0x0C63;
	static constexpr uint32_t GL_PIXEL_MAP_I_TO_I = 0x0C70;
	static constexpr uint32_t GL_PIXEL_MAP_S_TO_S = 0x0C71;
	static constexpr uint32_t GL_PIXEL_MAP_I_TO_R = 0x0C72;
	static constexpr uint32_t GL_PIXEL_MAP_I_TO_G = 0x0C73;
	static constexpr uint32_t GL_PIXEL_MAP_I_TO_B = 0x0C74;
	static constexpr uint32_t GL_PIXEL_MAP_I_TO_A = 0x0C75;
	static constexpr uint32_t GL_PIXEL_MAP_R_TO_R = 0x0C76;
	static constexpr uint32_t GL_PIXEL_MAP_G_TO_G = 0x0C77;
	static constexpr uint32_t GL_PIXEL_MAP_B_TO_B = 0x0C78;
	static constexpr uint32_t GL_PIXEL_MAP_A_TO_A = 0x0C79;
	static constexpr uint32_t GL_PIXEL_MAP_I_TO_I_SIZE = 0x0CB0;
	static constexpr uint32_t GL_PIXEL_MAP_S_TO_S_SIZE = 0x0CB1;
	static constexpr uint32_t GL_PIXEL_MAP_I_TO_R_SIZE = 0x0CB2;
	static constexpr uint32_t GL_PIXEL_MAP_I_TO_G_SIZE = 0x0CB3;
	static constexpr uint32_t GL_PIXEL_MAP_I_TO_B_SIZE = 0x0CB4;
	static constexpr uint32_t GL_PIXEL_MAP_I_TO_A_SIZE = 0x0CB5;
	static constexpr uint32_t GL_PIXEL_MAP_R_TO_R_SIZE = 0x0CB6;
	static constexpr uint32_t GL_PIXEL_MAP_G_TO_G_SIZE = 0x0CB7;
	static constexpr uint32_t GL_PIXEL_MAP_B_TO_B_SIZE = 0x0CB8;
	static constexpr uint32_t GL_PIXEL_MAP_A_TO_A_SIZE = 0x0CB9;
	static constexpr uint32_t GL_UNPACK_SWAP_BYTES = 0x0CF0;
	static constexpr uint32_t GL_UNPACK_LSB_FIRST = 0x0CF1;
	static constexpr uint32_t GL_UNPACK_ROW_LENGTH = 0x0CF2;
	static constexpr uint32_t GL_UNPACK_SKIP_ROWS = 0x0CF3;
	static constexpr uint32_t GL_UNPACK_SKIP_PIXELS = 0x0CF4;
	static constexpr uint32_t GL_UNPACK_ALIGNMENT = 0x0CF5;
	static constexpr uint32_t GL_PACK_SWAP_BYTES = 0x0D00;
	static constexpr uint32_t GL_PACK_LSB_FIRST = 0x0D01;
	static constexpr uint32_t GL_PACK_ROW_LENGTH = 0x0D02;
	static constexpr uint32_t GL_PACK_SKIP_ROWS = 0x0D03;
	static constexpr uint32_t GL_PACK_SKIP_PIXELS = 0x0D04;
	static constexpr uint32_t GL_PACK_ALIGNMENT = 0x0D05;
	static constexpr uint32_t GL_MAP_COLOR = 0x0D10;
	static constexpr uint32_t GL_MAP_STENCIL = 0x0D11;
	static constexpr uint32_t GL_INDEX_SHIFT = 0x0D12;
	static constexpr uint32_t GL_INDEX_OFFSET = 0x0D13;
	static constexpr uint32_t GL_RED_SCALE = 0x0D14;
	static constexpr uint32_t GL_RED_BIAS = 0x0D15;
	static constexpr uint32_t GL_ZOOM_X = 0x0D16;
	static constexpr uint32_t GL_ZOOM_Y = 0x0D17;
	static constexpr uint32_t GL_GREEN_SCALE = 0x0D18;
	static constexpr uint32_t GL_GREEN_BIAS = 0x0D19;
	static constexpr uint32_t GL_BLUE_SCALE = 0x0D1A;
	static constexpr uint32_t GL_BLUE_BIAS = 0x0D1B;
	static constexpr uint32_t GL_ALPHA_SCALE = 0x0D1C;
	static constexpr uint32_t GL_ALPHA_BIAS = 0x0D1D;
	static constexpr uint32_t GL_DEPTH_SCALE = 0x0D1E;
	static constexpr uint32_t GL_DEPTH_BIAS = 0x0D1F;
	static constexpr uint32_t GL_MAX_EVAL_ORDER = 0x0D30;
	static constexpr uint32_t GL_MAX_LIGHTS = 0x0D31;
	static constexpr uint32_t GL_MAX_CLIP_PLANES = 0x0D32;
	static constexpr uint32_t GL_MAX_TEXTURE_SIZE = 0x0D33;
	static constexpr uint32_t GL_MAX_PIXEL_MAP_TABLE = 0x0D34;
	static constexpr uint32_t GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35;
	static constexpr uint32_t GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36;
	static constexpr uint32_t GL_MAX_NAME_STACK_DEPTH = 0x0D37;
	static constexpr uint32_t GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38;
	static constexpr uint32_t GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39;
	static constexpr uint32_t GL_MAX_VIEWPORT_DIMS = 0x0D3A;
	static constexpr uint32_t GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B;
	static constexpr uint32_t GL_SUBPIXEL_BITS = 0x0D50;
	static constexpr uint32_t GL_INDEX_BITS = 0x0D51;
	static constexpr uint32_t GL_RED_BITS = 0x0D52;
	static constexpr uint32_t GL_GREEN_BITS = 0x0D53;
	static constexpr uint32_t GL_BLUE_BITS = 0x0D54;
	static constexpr uint32_t GL_ALPHA_BITS = 0x0D55;
	static constexpr uint32_t GL_DEPTH_BITS = 0x0D56;
	static constexpr uint32_t GL_STENCIL_BITS = 0x0D57;
	static constexpr uint32_t GL_ACCUM_RED_BITS = 0x0D58;
	static constexpr uint32_t GL_ACCUM_GREEN_BITS = 0x0D59;
	static constexpr uint32_t GL_ACCUM_BLUE_BITS = 0x0D5A;
	static constexpr uint32_t GL_ACCUM_ALPHA_BITS = 0x0D5B;
	static constexpr uint32_t GL_NAME_STACK_DEPTH = 0x0D70;
	static constexpr uint32_t GL_AUTO_NORMAL = 0x0D80;
	static constexpr uint32_t GL_MAP1_COLOR_4 = 0x0D90;
	static constexpr uint32_t GL_MAP1_INDEX = 0x0D91;
	static constexpr uint32_t GL_MAP1_NORMAL = 0x0D92;
	static constexpr uint32_t GL_MAP1_TEXTURE_COORD_1 = 0x0D93;
	static constexpr uint32_t GL_MAP1_TEXTURE_COORD_2 = 0x0D94;
	static constexpr uint32_t GL_MAP1_TEXTURE_COORD_3 = 0x0D95;
	static constexpr uint32_t GL_MAP1_TEXTURE_COORD_4 = 0x0D96;
	static constexpr uint32_t GL_MAP1_VERTEX_3 = 0x0D97;
	static constexpr uint32_t GL_MAP1_VERTEX_4 = 0x0D98;
	static constexpr uint32_t GL_MAP2_COLOR_4 = 0x0DB0;
	static constexpr uint32_t GL_MAP2_INDEX = 0x0DB1;
	static constexpr uint32_t GL_MAP2_NORMAL = 0x0DB2;
	static constexpr uint32_t GL_MAP2_TEXTURE_COORD_1 = 0x0DB3;
	static constexpr uint32_t GL_MAP2_TEXTURE_COORD_2 = 0x0DB4;
	static constexpr uint32_t GL_MAP2_TEXTURE_COORD_3 = 0x0DB5;
	static constexpr uint32_t GL_MAP2_TEXTURE_COORD_4 = 0x0DB6;
	static constexpr uint32_t GL_MAP2_VERTEX_3 = 0x0DB7;
	static constexpr uint32_t GL_MAP2_VERTEX_4 = 0x0DB8;
	static constexpr uint32_t GL_MAP1_GRID_DOMAIN = 0x0DD0;
	static constexpr uint32_t GL_MAP1_GRID_SEGMENTS = 0x0DD1;
	static constexpr uint32_t GL_MAP2_GRID_DOMAIN = 0x0DD2;
	static constexpr uint32_t GL_MAP2_GRID_SEGMENTS = 0x0DD3;
	static constexpr uint32_t GL_TEXTURE_1D = 0x0DE0;
	static constexpr uint32_t GL_TEXTURE_2D = 0x0DE1;
	static constexpr uint32_t GL_FEEDBACK_BUFFER_POINTER = 0x0DF0;
	static constexpr uint32_t GL_FEEDBACK_BUFFER_SIZE = 0x0DF1;
	static constexpr uint32_t GL_FEEDBACK_BUFFER_TYPE = 0x0DF2;
	static constexpr uint32_t GL_SELECTION_BUFFER_POINTER = 0x0DF3;
	static constexpr uint32_t GL_SELECTION_BUFFER_SIZE = 0x0DF4;
	static constexpr uint32_t GL_TEXTURE_WIDTH = 0x1000;
	static constexpr uint32_t GL_TEXTURE_HEIGHT = 0x1001;
	static constexpr uint32_t GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
	static constexpr uint32_t GL_TEXTURE_BORDER_COLOR = 0x1004;
	static constexpr uint32_t GL_TEXTURE_BORDER = 0x1005;
	static constexpr uint32_t GL_DONT_CARE = 0x1100;
	static constexpr uint32_t GL_FASTEST = 0x1101;
	static constexpr uint32_t GL_NICEST = 0x1102;
	static constexpr uint32_t GL_LIGHT0 = 0x4000;
	static constexpr uint32_t GL_LIGHT1 = 0x4001;
	static constexpr uint32_t GL_LIGHT2 = 0x4002;
	static constexpr uint32_t GL_LIGHT3 = 0x4003;
	static constexpr uint32_t GL_LIGHT4 = 0x4004;
	static constexpr uint32_t GL_LIGHT5 = 0x4005;
	static constexpr uint32_t GL_LIGHT6 = 0x4006;
	static constexpr uint32_t GL_LIGHT7 = 0x4007;
	static constexpr uint32_t GL_AMBIENT = 0x1200;
	static constexpr uint32_t GL_DIFFUSE = 0x1201;
	static constexpr uint32_t GL_SPECULAR = 0x1202;
	static constexpr uint32_t GL_POSITION = 0x1203;
	static constexpr uint32_t GL_SPOT_DIRECTION = 0x1204;
	static constexpr uint32_t GL_SPOT_EXPONENT = 0x1205;
	static constexpr uint32_t GL_SPOT_CUTOFF = 0x1206;
	static constexpr uint32_t GL_CONSTANT_ATTENUATION = 0x1207;
	static constexpr uint32_t GL_LINEAR_ATTENUATION = 0x1208;
	static constexpr uint32_t GL_QUADRATIC_ATTENUATION = 0x1209;
	static constexpr uint32_t GL_COMPILE = 0x1300;
	static constexpr uint32_t GL_COMPILE_AND_EXECUTE = 0x1301;
	static constexpr uint32_t GL_CLEAR = 0x1500;
	static constexpr uint32_t GL_AND = 0x1501;
	static constexpr uint32_t GL_AND_REVERSE = 0x1502;
	static constexpr uint32_t GL_COPY = 0x1503;
	static constexpr uint32_t GL_AND_INVERTED = 0x1504;
	static constexpr uint32_t GL_NOOP = 0x1505;
	static constexpr uint32_t GL_XOR = 0x1506;
	static constexpr uint32_t GL_OR = 0x1507;
	static constexpr uint32_t GL_NOR = 0x1508;
	static constexpr uint32_t GL_EQUIV = 0x1509;
	static constexpr uint32_t GL_INVERT = 0x150A;
	static constexpr uint32_t GL_OR_REVERSE = 0x150B;
	static constexpr uint32_t GL_COPY_INVERTED = 0x150C;
	static constexpr uint32_t GL_OR_INVERTED = 0x150D;
	static constexpr uint32_t GL_NAND = 0x150E;
	static constexpr uint32_t GL_SET = 0x150F;
	static constexpr uint32_t GL_EMISSION = 0x1600;
	static constexpr uint32_t GL_SHININESS = 0x1601;
	static constexpr uint32_t GL_AMBIENT_AND_DIFFUSE = 0x1602;
	static constexpr uint32_t GL_COLOR_INDEXES = 0x1603;
	static constexpr uint32_t GL_MODELVIEW = 0x1700;
	static constexpr uint32_t GL_PROJECTION = 0x1701;
	static constexpr uint32_t GL_TEXTURE = 0x1702;
	static constexpr uint32_t GL_COLOR = 0x1800;
	static constexpr uint32_t GL_DEPTH = 0x1801;
	static constexpr uint32_t GL_STENCIL = 0x1802;
	static constexpr uint32_t GL_COLOR_INDEX = 0x1900;
	static constexpr uint32_t GL_STENCIL_INDEX = 0x1901;
	static constexpr uint32_t GL_DEPTH_COMPONENT = 0x1902;
	static constexpr uint32_t GL_RED = 0x1903;
	static constexpr uint32_t GL_GREEN = 0x1904;
	static constexpr uint32_t GL_BLUE = 0x1905;
	static constexpr uint32_t GL_ALPHA = 0x1906;
	static constexpr uint32_t GL_RGB = 0x1907;
	static constexpr uint32_t GL_RGBA = 0x1908;
	static constexpr uint32_t GL_LUMINANCE = 0x1909;
	static constexpr uint32_t GL_LUMINANCE_ALPHA = 0x190A;
	static constexpr uint32_t GL_BITMAP = 0x1A00;
	static constexpr uint32_t GL_POINT = 0x1B00;
	static constexpr uint32_t GL_LINE = 0x1B01;
	static constexpr uint32_t GL_FILL = 0x1B02;
	static constexpr uint32_t GL_RENDER = 0x1C00;
	static constexpr uint32_t GL_FEEDBACK = 0x1C01;
	static constexpr uint32_t GL_SELECT = 0x1C02;
	static constexpr uint32_t GL_FLAT = 0x1D00;
	static constexpr uint32_t GL_SMOOTH = 0x1D01;
	static constexpr uint32_t GL_KEEP = 0x1E00;
	static constexpr uint32_t GL_REPLACE = 0x1E01;
	static constexpr uint32_t GL_INCR = 0x1E02;
	static constexpr uint32_t GL_DECR = 0x1E03;
	static constexpr uint32_t GL_VENDOR = 0x1F00;
	static constexpr uint32_t GL_RENDERER = 0x1F01;
	static constexpr uint32_t GL_VERSION = 0x1F02;
	static constexpr uint32_t GL_EXTENSIONS = 0x1F03;
	static constexpr uint32_t GL_S = 0x2000;
	static constexpr uint32_t GL_T = 0x2001;
	static constexpr uint32_t GL_R = 0x2002;
	static constexpr uint32_t GL_Q = 0x2003;
	static constexpr uint32_t GL_MODULATE = 0x2100;
	static constexpr uint32_t GL_DECAL = 0x2101;
	static constexpr uint32_t GL_TEXTURE_ENV_MODE = 0x2200;
	static constexpr uint32_t GL_TEXTURE_ENV_COLOR = 0x2201;
	static constexpr uint32_t GL_TEXTURE_ENV = 0x2300;
	static constexpr uint32_t GL_EYE_LINEAR = 0x2400;
	static constexpr uint32_t GL_OBJECT_LINEAR = 0x2401;
	static constexpr uint32_t GL_SPHERE_MAP = 0x2402;
	static constexpr uint32_t GL_TEXTURE_GEN_MODE = 0x2500;
	static constexpr uint32_t GL_OBJECT_PLANE = 0x2501;
	static constexpr uint32_t GL_EYE_PLANE = 0x2502;
	static constexpr uint32_t GL_NEAREST = 0x2600;
	static constexpr uint32_t GL_LINEAR = 0x2601;
	static constexpr uint32_t GL_NEAREST_MIPMAP_NEAREST = 0x2700;
	static constexpr uint32_t GL_LINEAR_MIPMAP_NEAREST = 0x2701;
	static constexpr uint32_t GL_NEAREST_MIPMAP_LINEAR = 0x2702;
	static constexpr uint32_t GL_LINEAR_MIPMAP_LINEAR = 0x2703;
	static constexpr uint32_t GL_TEXTURE_MAG_FILTER = 0x2800;
	static constexpr uint32_t GL_TEXTURE_MIN_FILTER = 0x2801;
	static constexpr uint32_t GL_TEXTURE_WRAP_S = 0x2802;
	static constexpr uint32_t GL_TEXTURE_WRAP_T = 0x2803;
	static constexpr uint32_t GL_CLAMP = 0x2900;
	static constexpr uint32_t GL_REPEAT = 0x2901;
	static constexpr uint32_t GL_CLIENT_PIXEL_STORE_BIT = 0x00000001;
	static constexpr uint32_t GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002;
	static constexpr uint32_t GL_CLIENT_ALL_ATTRIB_BITS = 0xffffffff;
	static constexpr uint32_t GL_POLYGON_OFFSET_FACTOR = 0x8038;
	static constexpr uint32_t GL_POLYGON_OFFSET_UNITS = 0x2A00;
	static constexpr uint32_t GL_POLYGON_OFFSET_POINT = 0x2A01;
	static constexpr uint32_t GL_POLYGON_OFFSET_LINE = 0x2A02;
	static constexpr uint32_t GL_POLYGON_OFFSET_FILL = 0x8037;
	static constexpr uint32_t GL_ALPHA4 = 0x803B;
	static constexpr uint32_t GL_ALPHA8 = 0x803C;
	static constexpr uint32_t GL_ALPHA12 = 0x803D;
	static constexpr uint32_t GL_ALPHA16 = 0x803E;
	static constexpr uint32_t GL_LUMINANCE4 = 0x803F;
	static constexpr uint32_t GL_LUMINANCE8 = 0x8040;
	static constexpr uint32_t GL_LUMINANCE12 = 0x8041;
	static constexpr uint32_t GL_LUMINANCE16 = 0x8042;
	static constexpr uint32_t GL_LUMINANCE4_ALPHA4 = 0x8043;
	static constexpr uint32_t GL_LUMINANCE6_ALPHA2 = 0x8044;
	static constexpr uint32_t GL_LUMINANCE8_ALPHA8 = 0x8045;
	static constexpr uint32_t GL_LUMINANCE12_ALPHA4 = 0x8046;
	static constexpr uint32_t GL_LUMINANCE12_ALPHA12 = 0x8047;
	static constexpr uint32_t GL_LUMINANCE16_ALPHA16 = 0x8048;
	static constexpr uint32_t GL_INTENSITY = 0x8049;
	static constexpr uint32_t GL_INTENSITY4 = 0x804A;
	static constexpr uint32_t GL_INTENSITY8 = 0x804B;
	static constexpr uint32_t GL_INTENSITY12 = 0x804C;
	static constexpr uint32_t GL_INTENSITY16 = 0x804D;
	static constexpr uint32_t GL_R3_G3_B2 = 0x2A10;
	static constexpr uint32_t GL_RGB4 = 0x804F;
	static constexpr uint32_t GL_RGB5 = 0x8050;
	static constexpr uint32_t GL_RGB8 = 0x8051;
	static constexpr uint32_t GL_RGB10 = 0x8052;
	static constexpr uint32_t GL_RGB12 = 0x8053;
	static constexpr uint32_t GL_RGB16 = 0x8054;
	static constexpr uint32_t GL_RGBA2 = 0x8055;
	static constexpr uint32_t GL_RGBA4 = 0x8056;
	static constexpr uint32_t GL_RGB5_A1 = 0x8057;
	static constexpr uint32_t GL_RGBA8 = 0x8058;
	static constexpr uint32_t GL_RGB10_A2 = 0x8059;
	static constexpr uint32_t GL_RGBA12 = 0x805A;
	static constexpr uint32_t GL_RGBA16 = 0x805B;
	static constexpr uint32_t GL_TEXTURE_RED_SIZE = 0x805C;
	static constexpr uint32_t GL_TEXTURE_GREEN_SIZE = 0x805D;
	static constexpr uint32_t GL_TEXTURE_BLUE_SIZE = 0x805E;
	static constexpr uint32_t GL_TEXTURE_ALPHA_SIZE = 0x805F;
	static constexpr uint32_t GL_TEXTURE_LUMINANCE_SIZE = 0x8060;
	static constexpr uint32_t GL_TEXTURE_INTENSITY_SIZE = 0x8061;
	static constexpr uint32_t GL_PROXY_TEXTURE_1D = 0x8063;
	static constexpr uint32_t GL_PROXY_TEXTURE_2D = 0x8064;
	static constexpr uint32_t GL_TEXTURE_PRIORITY = 0x8066;
	static constexpr uint32_t GL_TEXTURE_RESIDENT = 0x8067;
	static constexpr uint32_t GL_TEXTURE_BINDING_1D = 0x8068;
	static constexpr uint32_t GL_TEXTURE_BINDING_2D = 0x8069;
	static constexpr uint32_t GL_VERTEX_ARRAY = 0x8074;
	static constexpr uint32_t GL_NORMAL_ARRAY = 0x8075;
	static constexpr uint32_t GL_COLOR_ARRAY = 0x8076;
	static constexpr uint32_t GL_INDEX_ARRAY = 0x8077;
	static constexpr uint32_t GL_TEXTURE_COORD_ARRAY = 0x8078;
	static constexpr uint32_t GL_EDGE_FLAG_ARRAY = 0x8079;
	static constexpr uint32_t GL_VERTEX_ARRAY_SIZE = 0x807A;
	static constexpr uint32_t GL_VERTEX_ARRAY_TYPE = 0x807B;
	static constexpr uint32_t GL_VERTEX_ARRAY_STRIDE = 0x807C;
	static constexpr uint32_t GL_NORMAL_ARRAY_TYPE = 0x807E;
	static constexpr uint32_t GL_NORMAL_ARRAY_STRIDE = 0x807F;
	static constexpr uint32_t GL_COLOR_ARRAY_SIZE = 0x8081;
	static constexpr uint32_t GL_COLOR_ARRAY_TYPE = 0x8082;
	static constexpr uint32_t GL_COLOR_ARRAY_STRIDE = 0x8083;
	static constexpr uint32_t GL_INDEX_ARRAY_TYPE = 0x8085;
	static constexpr uint32_t GL_INDEX_ARRAY_STRIDE = 0x8086;
	static constexpr uint32_t GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088;
	static constexpr uint32_t GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089;
	static constexpr uint32_t GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808A;
	static constexpr uint32_t GL_EDGE_FLAG_ARRAY_STRIDE = 0x808C;
	static constexpr uint32_t GL_VERTEX_ARRAY_POINTER = 0x808E;
	static constexpr uint32_t GL_NORMAL_ARRAY_POINTER = 0x808F;
	static constexpr uint32_t GL_COLOR_ARRAY_POINTER = 0x8090;
	static constexpr uint32_t GL_INDEX_ARRAY_POINTER = 0x8091;
	static constexpr uint32_t GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092;
	static constexpr uint32_t GL_EDGE_FLAG_ARRAY_POINTER = 0x8093;
	static constexpr uint32_t GL_V2F = 0x2A20;
	static constexpr uint32_t GL_V3F = 0x2A21;
	static constexpr uint32_t GL_C4UB_V2F = 0x2A22;
	static constexpr uint32_t GL_C4UB_V3F = 0x2A23;
	static constexpr uint32_t GL_C3F_V3F = 0x2A24;
	static constexpr uint32_t GL_N3F_V3F = 0x2A25;
	static constexpr uint32_t GL_C4F_N3F_V3F = 0x2A26;
	static constexpr uint32_t GL_T2F_V3F = 0x2A27;
	static constexpr uint32_t GL_T4F_V4F = 0x2A28;
	static constexpr uint32_t GL_T2F_C4UB_V3F = 0x2A29;
	static constexpr uint32_t GL_T2F_C3F_V3F = 0x2A2A;
	static constexpr uint32_t GL_T2F_N3F_V3F = 0x2A2B;
	static constexpr uint32_t GL_T2F_C4F_N3F_V3F = 0x2A2C;
	static constexpr uint32_t GL_T4F_C4F_N3F_V4F = 0x2A2D;
	static constexpr uint32_t GL_EXT_vertex_array = 1;
	static constexpr uint32_t GL_EXT_bgra = 1;
	static constexpr uint32_t GL_EXT_paletted_texture = 1;
	static constexpr uint32_t GL_WIN_swap_hint = 1;
	static constexpr uint32_t GL_WIN_draw_range_elements = 1;
	static constexpr uint32_t GL_WIN_phong_shading = 1;
	static constexpr uint32_t GL_WIN_specular_fog = 1;
	static constexpr uint32_t GL_VERTEX_ARRAY_EXT = 0x8074;
	static constexpr uint32_t GL_NORMAL_ARRAY_EXT = 0x8075;
	static constexpr uint32_t GL_COLOR_ARRAY_EXT = 0x8076;
	static constexpr uint32_t GL_INDEX_ARRAY_EXT = 0x8077;
	static constexpr uint32_t GL_TEXTURE_COORD_ARRAY_EXT = 0x8078;
	static constexpr uint32_t GL_EDGE_FLAG_ARRAY_EXT = 0x8079;
	static constexpr uint32_t GL_VERTEX_ARRAY_SIZE_EXT = 0x807A;
	static constexpr uint32_t GL_VERTEX_ARRAY_TYPE_EXT = 0x807B;
	static constexpr uint32_t GL_VERTEX_ARRAY_STRIDE_EXT = 0x807C;
	static constexpr uint32_t GL_VERTEX_ARRAY_COUNT_EXT = 0x807D;
	static constexpr uint32_t GL_NORMAL_ARRAY_TYPE_EXT = 0x807E;
	static constexpr uint32_t GL_NORMAL_ARRAY_STRIDE_EXT = 0x807F;
	static constexpr uint32_t GL_NORMAL_ARRAY_COUNT_EXT = 0x8080;
	static constexpr uint32_t GL_COLOR_ARRAY_SIZE_EXT = 0x8081;
	static constexpr uint32_t GL_COLOR_ARRAY_TYPE_EXT = 0x8082;
	static constexpr uint32_t GL_COLOR_ARRAY_STRIDE_EXT = 0x8083;
	static constexpr uint32_t GL_COLOR_ARRAY_COUNT_EXT = 0x8084;
	static constexpr uint32_t GL_INDEX_ARRAY_TYPE_EXT = 0x8085;
	static constexpr uint32_t GL_INDEX_ARRAY_STRIDE_EXT = 0x8086;
	static constexpr uint32_t GL_INDEX_ARRAY_COUNT_EXT = 0x8087;
	static constexpr uint32_t GL_TEXTURE_COORD_ARRAY_SIZE_EXT = 0x8088;
	static constexpr uint32_t GL_TEXTURE_COORD_ARRAY_TYPE_EXT = 0x8089;
	static constexpr uint32_t GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = 0x808A;
	static constexpr uint32_t GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 0x808B;
	static constexpr uint32_t GL_EDGE_FLAG_ARRAY_STRIDE_EXT = 0x808C;
	static constexpr uint32_t GL_EDGE_FLAG_ARRAY_COUNT_EXT = 0x808D;
	static constexpr uint32_t GL_VERTEX_ARRAY_POINTER_EXT = 0x808E;
	static constexpr uint32_t GL_NORMAL_ARRAY_POINTER_EXT = 0x808F;
	static constexpr uint32_t GL_COLOR_ARRAY_POINTER_EXT = 0x8090;
	static constexpr uint32_t GL_INDEX_ARRAY_POINTER_EXT = 0x8091;
	static constexpr uint32_t GL_TEXTURE_COORD_ARRAY_POINTER_EXT = 0x8092;
	static constexpr uint32_t GL_EDGE_FLAG_ARRAY_POINTER_EXT = 0x8093;
	static constexpr uint32_t GL_DOUBLE_EXT = GL_DOUBLE;
	static constexpr uint32_t GL_BGR_EXT = 0x80E0;
	static constexpr uint32_t GL_BGRA_EXT = 0x80E1;
	static constexpr uint32_t GL_COLOR_TABLE_FORMAT_EXT = 0x80D8;
	static constexpr uint32_t GL_COLOR_TABLE_WIDTH_EXT = 0x80D9;
	static constexpr uint32_t GL_COLOR_TABLE_RED_SIZE_EXT = 0x80DA;
	static constexpr uint32_t GL_COLOR_TABLE_GREEN_SIZE_EXT = 0x80DB;
	static constexpr uint32_t GL_COLOR_TABLE_BLUE_SIZE_EXT = 0x80DC;
	static constexpr uint32_t GL_COLOR_TABLE_ALPHA_SIZE_EXT = 0x80DD;
	static constexpr uint32_t GL_COLOR_TABLE_LUMINANCE_SIZE_EXT = 0x80DE;
	static constexpr uint32_t GL_COLOR_TABLE_INTENSITY_SIZE_EXT = 0x80DF;
	static constexpr uint32_t GL_COLOR_INDEX1_EXT = 0x80E2;
	static constexpr uint32_t GL_COLOR_INDEX2_EXT = 0x80E3;
	static constexpr uint32_t GL_COLOR_INDEX4_EXT = 0x80E4;
	static constexpr uint32_t GL_COLOR_INDEX8_EXT = 0x80E5;
	static constexpr uint32_t GL_COLOR_INDEX12_EXT = 0x80E6;
	static constexpr uint32_t GL_COLOR_INDEX16_EXT = 0x80E7;
	static constexpr uint32_t GL_MAX_ELEMENTS_VERTICES_WIN = 0x80E8;
	static constexpr uint32_t GL_MAX_ELEMENTS_INDICES_WIN = 0x80E9;
	static constexpr uint32_t GL_PHONG_WIN = 0x80EA;
	static constexpr uint32_t GL_PHONG_HINT_WIN = 0x80EB;
	static constexpr uint32_t GL_FOG_SPECULAR_TEXTURE_WIN = 0x80EC;
	static constexpr uint32_t GL_LOGIC_OP = GL_INDEX_LOGIC_OP;
	static constexpr uint32_t GL_TEXTURE_COMPONENTS = GL_TEXTURE_INTERNAL_FORMAT;
#	ifdef FOGL_STATIC
	typedef void (FOGL_APIENTRY gl_accum_func)(GLenum op, GLfloat value);
	FOGL_STATIC gl_accum_func* glAccum;
	typedef void (FOGL_APIENTRY gl_alpha_func_func)(GLenum func, GLclampf ref);
	FOGL_STATIC gl_alpha_func_func* glAlphaFunc;
	typedef GLboolean(FOGL_APIENTRY gl_are_textures_resident_func)(GLsizei n, const GLuint *textures, GLboolean *residences);
	FOGL_STATIC gl_are_textures_resident_func* glAreTexturesResident;
	typedef void (FOGL_APIENTRY gl_array_element_func)(GLint i);
	FOGL_STATIC gl_array_element_func* glArrayElement;
	typedef void (FOGL_APIENTRY gl_begin_func)(GLenum mode);
	FOGL_STATIC gl_begin_func* glBegin;
	typedef void (FOGL_APIENTRY gl_bind_texture_func)(GLenum target, GLuint texture);
	FOGL_STATIC gl_bind_texture_func* glBindTexture;
	typedef void (FOGL_APIENTRY gl_bitmap_func)(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap);
	FOGL_STATIC gl_bitmap_func* glBitmap;
	typedef void (FOGL_APIENTRY gl_blend_func_func)(GLenum sfactor, GLenum dfactor);
	FOGL_STATIC gl_blend_func_func* glBlendFunc;
	typedef void (FOGL_APIENTRY gl_call_list_func)(GLuint list);
	FOGL_STATIC gl_call_list_func* glCallList;
	typedef void (FOGL_APIENTRY gl_call_lists_func)(GLsizei n, GLenum type, const GLvoid *lists);
	FOGL_STATIC gl_call_lists_func* glCallLists;
	typedef void (FOGL_APIENTRY gl_clear_func)(GLbitfield mask);
	FOGL_STATIC gl_clear_func* glClear;
	typedef void (FOGL_APIENTRY gl_clear_accum_func)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
	FOGL_STATIC gl_clear_accum_func* glClearAccum;
	typedef void (FOGL_APIENTRY gl_clear_color_func)(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
	FOGL_STATIC gl_clear_color_func* glClearColor;
	typedef void (FOGL_APIENTRY gl_clear_depth_func)(GLclampd depth);
	FOGL_STATIC gl_clear_depth_func* glClearDepth;
	typedef void (FOGL_APIENTRY gl_clear_index_func)(GLfloat c);
	FOGL_STATIC gl_clear_index_func* glClearIndex;
	typedef void (FOGL_APIENTRY gl_clear_stencil_func)(GLint s);
	FOGL_STATIC gl_clear_stencil_func* glClearStencil;
	typedef void (FOGL_APIENTRY gl_clip_plane_func)(GLenum plane, const GLdouble *equation);
	FOGL_STATIC gl_clip_plane_func* glClipPlane;
	typedef void (FOGL_APIENTRY gl_color3b_func)(GLbyte red, GLbyte green, GLbyte blue);
	FOGL_STATIC gl_color3b_func* glColor3b;
	typedef void (FOGL_APIENTRY gl_color3bv_func)(const GLbyte *v);
	FOGL_STATIC gl_color3bv_func* glColor3bv;
	typedef void (FOGL_APIENTRY gl_color3d_func)(GLdouble red, GLdouble green, GLdouble blue);
	FOGL_STATIC gl_color3d_func* glColor3d;
	typedef void (FOGL_APIENTRY gl_color3dv_func)(const GLdouble *v);
	FOGL_STATIC gl_color3dv_func* glColor3dv;
	typedef void (FOGL_APIENTRY gl_color3f_func)(GLfloat red, GLfloat green, GLfloat blue);
	FOGL_STATIC gl_color3f_func* glColor3f;
	typedef void (FOGL_APIENTRY gl_color3fv_func)(const GLfloat *v);
	FOGL_STATIC gl_color3fv_func* glColor3fv;
	typedef void (FOGL_APIENTRY gl_color3i_func)(GLint red, GLint green, GLint blue);
	FOGL_STATIC gl_color3i_func* glColor3i;
	typedef void (FOGL_APIENTRY gl_color3iv_func)(const GLint *v);
	FOGL_STATIC gl_color3iv_func* glColor3iv;
	typedef void (FOGL_APIENTRY gl_color3s_func)(GLshort red, GLshort green, GLshort blue);
	FOGL_STATIC gl_color3s_func* glColor3s;
	typedef void (FOGL_APIENTRY gl_color3sv_func)(const GLshort *v);
	FOGL_STATIC gl_color3sv_func* glColor3sv;
	typedef void (FOGL_APIENTRY gl_color3ub_func)(GLubyte red, GLubyte green, GLubyte blue);
	FOGL_STATIC gl_color3ub_func* glColor3ub;
	typedef void (FOGL_APIENTRY gl_color3ubv_func)(const GLubyte *v);
	FOGL_STATIC gl_color3ubv_func* glColor3ubv;
	typedef void (FOGL_APIENTRY gl_color3ui_func)(GLuint red, GLuint green, GLuint blue);
	FOGL_STATIC gl_color3ui_func* glColor3ui;
	typedef void (FOGL_APIENTRY gl_color3uiv_func)(const GLuint *v);
	FOGL_STATIC gl_color3uiv_func* glColor3uiv;
	typedef void (FOGL_APIENTRY gl_color3us_func)(GLushort red, GLushort green, GLushort blue);
	FOGL_STATIC gl_color3us_func* glColor3us;
	typedef void (FOGL_APIENTRY gl_color3usv_func)(const GLushort *v);
	FOGL_STATIC gl_color3usv_func* glColor3usv;
	typedef void (FOGL_APIENTRY gl_color4b_func)(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
	FOGL_STATIC gl_color4b_func* glColor4b;
	typedef void (FOGL_APIENTRY gl_color4bv_func)(const GLbyte *v);
	FOGL_STATIC gl_color4bv_func* glColor4bv;
	typedef void (FOGL_APIENTRY gl_color4d_func)(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
	FOGL_STATIC gl_color4d_func* glColor4d;
	typedef void (FOGL_APIENTRY gl_color4dv_func)(const GLdouble *v);
	FOGL_STATIC gl_color4dv_func* glColor4dv;
	typedef void (FOGL_APIENTRY gl_color4f_func)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
	FOGL_STATIC gl_color4f_func* glColor4f;
	typedef void (FOGL_APIENTRY gl_color4fv_func)(const GLfloat *v);
	FOGL_STATIC gl_color4fv_func* glColor4fv;
	typedef void (FOGL_APIENTRY gl_color4i_func)(GLint red, GLint green, GLint blue, GLint alpha);
	FOGL_STATIC gl_color4i_func* glColor4i;
	typedef void (FOGL_APIENTRY gl_color4iv_func)(const GLint *v);
	FOGL_STATIC gl_color4iv_func* glColor4iv;
	typedef void (FOGL_APIENTRY gl_color4s_func)(GLshort red, GLshort green, GLshort blue, GLshort alpha);
	FOGL_STATIC gl_color4s_func* glColor4s;
	typedef void (FOGL_APIENTRY gl_color4sv_func)(const GLshort *v);
	FOGL_STATIC gl_color4sv_func* glColor4sv;
	typedef void (FOGL_APIENTRY gl_color4ub_func)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
	FOGL_STATIC gl_color4ub_func* glColor4ub;
	typedef void (FOGL_APIENTRY gl_color4ubv_func)(const GLubyte *v);
	FOGL_STATIC gl_color4ubv_func* glColor4ubv;
	typedef void (FOGL_APIENTRY gl_color4ui_func)(GLuint red, GLuint green, GLuint blue, GLuint alpha);
	FOGL_STATIC gl_color4ui_func* glColor4ui;
	typedef void (FOGL_APIENTRY gl_color4uiv_func)(const GLuint *v);
	FOGL_STATIC gl_color4uiv_func* glColor4uiv;
	typedef void (FOGL_APIENTRY gl_color4us_func)(GLushort red, GLushort green, GLushort blue, GLushort alpha);
	FOGL_STATIC gl_color4us_func* glColor4us;
	typedef void (FOGL_APIENTRY gl_color4usv_func)(const GLushort *v);
	FOGL_STATIC gl_color4usv_func* glColor4usv;
	typedef void (FOGL_APIENTRY gl_color_mask_func)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
	FOGL_STATIC gl_color_mask_func* glColorMask;
	typedef void (FOGL_APIENTRY gl_color_material_func)(GLenum face, GLenum mode);
	FOGL_STATIC gl_color_material_func* glColorMaterial;
	typedef void (FOGL_APIENTRY gl_color_pointer_func)(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
	FOGL_STATIC gl_color_pointer_func* glColorPointer;
	typedef void (FOGL_APIENTRY gl_copy_pixels_func)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
	FOGL_STATIC gl_copy_pixels_func* glCopyPixels;
	typedef void (FOGL_APIENTRY gl_copy_tex_image1d_func)(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border);
	FOGL_STATIC gl_copy_tex_image1d_func* glCopyTexImage1D;
	typedef void (FOGL_APIENTRY gl_copy_tex_image2d_func)(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
	FOGL_STATIC gl_copy_tex_image2d_func* glCopyTexImage2D;
	typedef void (FOGL_APIENTRY gl_copy_tex_sub_image1d_func)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
	FOGL_STATIC gl_copy_tex_sub_image1d_func* glCopyTexSubImage1D;
	typedef void (FOGL_APIENTRY gl_copy_tex_sub_image2d_func)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	FOGL_STATIC gl_copy_tex_sub_image2d_func* glCopyTexSubImage2D;
	typedef void (FOGL_APIENTRY gl_cull_face_func)(GLenum mode);
	FOGL_STATIC gl_cull_face_func* glCullFace;
	typedef void (FOGL_APIENTRY gl_delete_lists_func)(GLuint list, GLsizei range);
	FOGL_STATIC gl_delete_lists_func* glDeleteLists;
	typedef void (FOGL_APIENTRY gl_delete_textures_func)(GLsizei n, const GLuint *textures);
	FOGL_STATIC gl_delete_textures_func* glDeleteTextures;
	typedef void (FOGL_APIENTRY gl_depth_func_func)(GLenum func);
	FOGL_STATIC gl_depth_func_func* glDepthFunc;
	typedef void (FOGL_APIENTRY gl_depth_mask_func)(GLboolean flag);
	FOGL_STATIC gl_depth_mask_func* glDepthMask;
	typedef void (FOGL_APIENTRY gl_depth_range_func)(GLclampd zNear, GLclampd zFar);
	FOGL_STATIC gl_depth_range_func* glDepthRange;
	typedef void (FOGL_APIENTRY gl_disable_func)(GLenum cap);
	FOGL_STATIC gl_disable_func* glDisable;
	typedef void (FOGL_APIENTRY gl_disable_client_state_func)(GLenum array);
	FOGL_STATIC gl_disable_client_state_func* glDisableClientState;
	typedef void (FOGL_APIENTRY gl_draw_arrays_func)(GLenum mode, GLint first, GLsizei count);
	FOGL_STATIC gl_draw_arrays_func* glDrawArrays;
	typedef void (FOGL_APIENTRY gl_draw_buffer_func)(GLenum mode);
	FOGL_STATIC gl_draw_buffer_func* glDrawBuffer;
	typedef void (FOGL_APIENTRY gl_draw_elements_func)(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
	FOGL_STATIC gl_draw_elements_func* glDrawElements;
	typedef void (FOGL_APIENTRY gl_draw_pixels_func)(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
	FOGL_STATIC gl_draw_pixels_func* glDrawPixels;
	typedef void (FOGL_APIENTRY gl_edge_flag_func)(GLboolean flag);
	FOGL_STATIC gl_edge_flag_func* glEdgeFlag;
	typedef void (FOGL_APIENTRY gl_edge_flag_pointer_func)(GLsizei stride, const GLvoid *pointer);
	FOGL_STATIC gl_edge_flag_pointer_func* glEdgeFlagPointer;
	typedef void (FOGL_APIENTRY gl_edge_flagv_func)(const GLboolean *flag);
	FOGL_STATIC gl_edge_flagv_func* glEdgeFlagv;
	typedef void (FOGL_APIENTRY gl_enable_func)(GLenum cap);
	FOGL_STATIC gl_enable_func* glEnable;
	typedef void (FOGL_APIENTRY gl_enable_client_state_func)(GLenum array);
	FOGL_STATIC gl_enable_client_state_func* glEnableClientState;
	typedef void (FOGL_APIENTRY gl_end_func)(void);
	FOGL_STATIC gl_end_func* glEnd;
	typedef void (FOGL_APIENTRY gl_end_list_func)(void);
	FOGL_STATIC gl_end_list_func* glEndList;
	typedef void (FOGL_APIENTRY gl_eval_coord1d_func)(GLdouble u);
	FOGL_STATIC gl_eval_coord1d_func* glEvalCoord1d;
	typedef void (FOGL_APIENTRY gl_eval_coord1dv_func)(const GLdouble *u);
	FOGL_STATIC gl_eval_coord1dv_func* glEvalCoord1dv;
	typedef void (FOGL_APIENTRY gl_eval_coord1f_func)(GLfloat u);
	FOGL_STATIC gl_eval_coord1f_func* glEvalCoord1f;
	typedef void (FOGL_APIENTRY gl_eval_coord1fv_func)(const GLfloat *u);
	FOGL_STATIC gl_eval_coord1fv_func* glEvalCoord1fv;
	typedef void (FOGL_APIENTRY gl_eval_coord2d_func)(GLdouble u, GLdouble v);
	FOGL_STATIC gl_eval_coord2d_func* glEvalCoord2d;
	typedef void (FOGL_APIENTRY gl_eval_coord2dv_func)(const GLdouble *u);
	FOGL_STATIC gl_eval_coord2dv_func* glEvalCoord2dv;
	typedef void (FOGL_APIENTRY gl_eval_coord2f_func)(GLfloat u, GLfloat v);
	FOGL_STATIC gl_eval_coord2f_func* glEvalCoord2f;
	typedef void (FOGL_APIENTRY gl_eval_coord2fv_func)(const GLfloat *u);
	FOGL_STATIC gl_eval_coord2fv_func* glEvalCoord2fv;
	typedef void (FOGL_APIENTRY gl_eval_mesh1_func)(GLenum mode, GLint i1, GLint i2);
	FOGL_STATIC gl_eval_mesh1_func* glEvalMesh1;
	typedef void (FOGL_APIENTRY gl_eval_mesh2_func)(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
	FOGL_STATIC gl_eval_mesh2_func* glEvalMesh2;
	typedef void (FOGL_APIENTRY gl_eval_point1_func)(GLint i);
	FOGL_STATIC gl_eval_point1_func* glEvalPoint1;
	typedef void (FOGL_APIENTRY gl_eval_point2_func)(GLint i, GLint j);
	FOGL_STATIC gl_eval_point2_func* glEvalPoint2;
	typedef void (FOGL_APIENTRY gl_feedback_buffer_func)(GLsizei size, GLenum type, GLfloat *buffer);
	FOGL_STATIC gl_feedback_buffer_func* glFeedbackBuffer;
	typedef void (FOGL_APIENTRY gl_finish_func)(void);
	FOGL_STATIC gl_finish_func* glFinish;
	typedef void (FOGL_APIENTRY gl_flush_func)(void);
	FOGL_STATIC gl_flush_func* glFlush;
	typedef void (FOGL_APIENTRY gl_fogf_func)(GLenum pname, GLfloat param);
	FOGL_STATIC gl_fogf_func* glFogf;
	typedef void (FOGL_APIENTRY gl_fogfv_func)(GLenum pname, const GLfloat *params);
	FOGL_STATIC gl_fogfv_func* glFogfv;
	typedef void (FOGL_APIENTRY gl_fogi_func)(GLenum pname, GLint param);
	FOGL_STATIC gl_fogi_func* glFogi;
	typedef void (FOGL_APIENTRY gl_fogiv_func)(GLenum pname, const GLint *params);
	FOGL_STATIC gl_fogiv_func* glFogiv;
	typedef void (FOGL_APIENTRY gl_front_face_func)(GLenum mode);
	FOGL_STATIC gl_front_face_func* glFrontFace;
	typedef void (FOGL_APIENTRY gl_frustum_func)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
	FOGL_STATIC gl_frustum_func* glFrustum;
	typedef GLuint(FOGL_APIENTRY gl_gen_lists_func)(GLsizei range);
	FOGL_STATIC gl_gen_lists_func* glGenLists;
	typedef void (FOGL_APIENTRY gl_gen_textures_func)(GLsizei n, GLuint *textures);
	FOGL_STATIC gl_gen_textures_func* glGenTextures;
	typedef void (FOGL_APIENTRY gl_get_booleanv_func)(GLenum pname, GLboolean *params);
	FOGL_STATIC gl_get_booleanv_func* glGetBooleanv;
	typedef void (FOGL_APIENTRY gl_get_clip_plane_func)(GLenum plane, GLdouble *equation);
	FOGL_STATIC gl_get_clip_plane_func* glGetClipPlane;
	typedef void (FOGL_APIENTRY gl_get_doublev_func)(GLenum pname, GLdouble *params);
	FOGL_STATIC gl_get_doublev_func* glGetDoublev;
	typedef GLenum(FOGL_APIENTRY gl_get_error_func)(void);
	FOGL_STATIC gl_get_error_func* glGetError;
	typedef void (FOGL_APIENTRY gl_get_floatv_func)(GLenum pname, GLfloat *params);
	FOGL_STATIC gl_get_floatv_func* glGetFloatv;
	typedef void (FOGL_APIENTRY gl_get_integerv_func)(GLenum pname, GLint *params);
	FOGL_STATIC gl_get_integerv_func* glGetIntegerv;
	typedef void (FOGL_APIENTRY gl_get_lightfv_func)(GLenum light, GLenum pname, GLfloat *params);
	FOGL_STATIC gl_get_lightfv_func* glGetLightfv;
	typedef void (FOGL_APIENTRY gl_get_lightiv_func)(GLenum light, GLenum pname, GLint *params);
	FOGL_STATIC gl_get_lightiv_func* glGetLightiv;
	typedef void (FOGL_APIENTRY gl_get_mapdv_func)(GLenum target, GLenum query, GLdouble *v);
	FOGL_STATIC gl_get_mapdv_func* glGetMapdv;
	typedef void (FOGL_APIENTRY gl_get_mapfv_func)(GLenum target, GLenum query, GLfloat *v);
	FOGL_STATIC gl_get_mapfv_func* glGetMapfv;
	typedef void (FOGL_APIENTRY gl_get_mapiv_func)(GLenum target, GLenum query, GLint *v);
	FOGL_STATIC gl_get_mapiv_func* glGetMapiv;
	typedef void (FOGL_APIENTRY gl_get_materialfv_func)(GLenum face, GLenum pname, GLfloat *params);
	FOGL_STATIC gl_get_materialfv_func* glGetMaterialfv;
	typedef void (FOGL_APIENTRY gl_get_materialiv_func)(GLenum face, GLenum pname, GLint *params);
	FOGL_STATIC gl_get_materialiv_func* glGetMaterialiv;
	typedef void (FOGL_APIENTRY gl_get_pixel_mapfv_func)(GLenum map, GLfloat *values);
	FOGL_STATIC gl_get_pixel_mapfv_func* glGetPixelMapfv;
	typedef void (FOGL_APIENTRY gl_get_pixel_mapuiv_func)(GLenum map, GLuint *values);
	FOGL_STATIC gl_get_pixel_mapuiv_func* glGetPixelMapuiv;
	typedef void (FOGL_APIENTRY gl_get_pixel_mapusv_func)(GLenum map, GLushort *values);
	FOGL_STATIC gl_get_pixel_mapusv_func* glGetPixelMapusv;
	typedef void (FOGL_APIENTRY gl_get_pointerv_func)(GLenum pname, GLvoid* *params);
	FOGL_STATIC gl_get_pointerv_func* glGetPointerv;
	typedef void (FOGL_APIENTRY gl_get_polygon_stipple_func)(GLubyte *mask);
	FOGL_STATIC gl_get_polygon_stipple_func* glGetPolygonStipple;
	typedef const GLubyte * (FOGL_APIENTRY gl_get_string_func)(GLenum name);
	FOGL_STATIC gl_get_string_func* glGetString;
	typedef void (FOGL_APIENTRY gl_get_tex_envfv_func)(GLenum target, GLenum pname, GLfloat *params);
	FOGL_STATIC gl_get_tex_envfv_func* glGetTexEnvfv;
	typedef void (FOGL_APIENTRY gl_get_tex_enviv_func)(GLenum target, GLenum pname, GLint *params);
	FOGL_STATIC gl_get_tex_enviv_func* glGetTexEnviv;
	typedef void (FOGL_APIENTRY gl_get_tex_gendv_func)(GLenum coord, GLenum pname, GLdouble *params);
	FOGL_STATIC gl_get_tex_gendv_func* glGetTexGendv;
	typedef void (FOGL_APIENTRY gl_get_tex_genfv_func)(GLenum coord, GLenum pname, GLfloat *params);
	FOGL_STATIC gl_get_tex_genfv_func* glGetTexGenfv;
	typedef void (FOGL_APIENTRY gl_get_tex_geniv_func)(GLenum coord, GLenum pname, GLint *params);
	FOGL_STATIC gl_get_tex_geniv_func* glGetTexGeniv;
	typedef void (FOGL_APIENTRY gl_get_tex_image_func)(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
	FOGL_STATIC gl_get_tex_image_func* glGetTexImage;
	typedef void (FOGL_APIENTRY gl_get_tex_level_parameterfv_func)(GLenum target, GLint level, GLenum pname, GLfloat *params);
	FOGL_STATIC gl_get_tex_level_parameterfv_func* glGetTexLevelParameterfv;
	typedef void (FOGL_APIENTRY gl_get_tex_level_parameteriv_func)(GLenum target, GLint level, GLenum pname, GLint *params);
	FOGL_STATIC gl_get_tex_level_parameteriv_func* glGetTexLevelParameteriv;
	typedef void (FOGL_APIENTRY gl_get_tex_parameterfv_func)(GLenum target, GLenum pname, GLfloat *params);
	FOGL_STATIC gl_get_tex_parameterfv_func* glGetTexParameterfv;
	typedef void (FOGL_APIENTRY gl_get_tex_parameteriv_func)(GLenum target, GLenum pname, GLint *params);
	FOGL_STATIC gl_get_tex_parameteriv_func* glGetTexParameteriv;
	typedef void (FOGL_APIENTRY gl_hint_func)(GLenum target, GLenum mode);
	FOGL_STATIC gl_hint_func* glHint;
	typedef void (FOGL_APIENTRY gl_index_mask_func)(GLuint mask);
	FOGL_STATIC gl_index_mask_func* glIndexMask;
	typedef void (FOGL_APIENTRY gl_index_pointer_func)(GLenum type, GLsizei stride, const GLvoid *pointer);
	FOGL_STATIC gl_index_pointer_func* glIndexPointer;
	typedef void (FOGL_APIENTRY gl_indexd_func)(GLdouble c);
	FOGL_STATIC gl_indexd_func* glIndexd;
	typedef void (FOGL_APIENTRY gl_indexdv_func)(const GLdouble *c);
	FOGL_STATIC gl_indexdv_func* glIndexdv;
	typedef void (FOGL_APIENTRY gl_indexf_func)(GLfloat c);
	FOGL_STATIC gl_indexf_func* glIndexf;
	typedef void (FOGL_APIENTRY gl_indexfv_func)(const GLfloat *c);
	FOGL_STATIC gl_indexfv_func* glIndexfv;
	typedef void (FOGL_APIENTRY gl_indexi_func)(GLint c);
	FOGL_STATIC gl_indexi_func* glIndexi;
	typedef void (FOGL_APIENTRY gl_indexiv_func)(const GLint *c);
	FOGL_STATIC gl_indexiv_func* glIndexiv;
	typedef void (FOGL_APIENTRY gl_indexs_func)(GLshort c);
	FOGL_STATIC gl_indexs_func* glIndexs;
	typedef void (FOGL_APIENTRY gl_indexsv_func)(const GLshort *c);
	FOGL_STATIC gl_indexsv_func* glIndexsv;
	typedef void (FOGL_APIENTRY gl_indexub_func)(GLubyte c);
	FOGL_STATIC gl_indexub_func* glIndexub;
	typedef void (FOGL_APIENTRY gl_indexubv_func)(const GLubyte *c);
	FOGL_STATIC gl_indexubv_func* glIndexubv;
	typedef void (FOGL_APIENTRY gl_init_names_func)(void);
	FOGL_STATIC gl_init_names_func* glInitNames;
	typedef void (FOGL_APIENTRY gl_interleaved_arrays_func)(GLenum format, GLsizei stride, const GLvoid *pointer);
	FOGL_STATIC gl_interleaved_arrays_func* glInterleavedArrays;
	typedef GLboolean(FOGL_APIENTRY gl_is_enabled_func)(GLenum cap);
	FOGL_STATIC gl_is_enabled_func* glIsEnabled;
	typedef GLboolean(FOGL_APIENTRY gl_is_list_func)(GLuint list);
	FOGL_STATIC gl_is_list_func* glIsList;
	typedef GLboolean(FOGL_APIENTRY gl_is_texture_func)(GLuint texture);
	FOGL_STATIC gl_is_texture_func* glIsTexture;
	typedef void (FOGL_APIENTRY gl_light_modelf_func)(GLenum pname, GLfloat param);
	FOGL_STATIC gl_light_modelf_func* glLightModelf;
	typedef void (FOGL_APIENTRY gl_light_modelfv_func)(GLenum pname, const GLfloat *params);
	FOGL_STATIC gl_light_modelfv_func* glLightModelfv;
	typedef void (FOGL_APIENTRY gl_light_modeli_func)(GLenum pname, GLint param);
	FOGL_STATIC gl_light_modeli_func* glLightModeli;
	typedef void (FOGL_APIENTRY gl_light_modeliv_func)(GLenum pname, const GLint *params);
	FOGL_STATIC gl_light_modeliv_func* glLightModeliv;
	typedef void (FOGL_APIENTRY gl_lightf_func)(GLenum light, GLenum pname, GLfloat param);
	FOGL_STATIC gl_lightf_func* glLightf;
	typedef void (FOGL_APIENTRY gl_lightfv_func)(GLenum light, GLenum pname, const GLfloat *params);
	FOGL_STATIC gl_lightfv_func* glLightfv;
	typedef void (FOGL_APIENTRY gl_lighti_func)(GLenum light, GLenum pname, GLint param);
	FOGL_STATIC gl_lighti_func* glLighti;
	typedef void (FOGL_APIENTRY gl_lightiv_func)(GLenum light, GLenum pname, const GLint *params);
	FOGL_STATIC gl_lightiv_func* glLightiv;
	typedef void (FOGL_APIENTRY gl_line_stipple_func)(GLint factor, GLushort pattern);
	FOGL_STATIC gl_line_stipple_func* glLineStipple;
	typedef void (FOGL_APIENTRY gl_line_width_func)(GLfloat width);
	FOGL_STATIC gl_line_width_func* glLineWidth;
	typedef void (FOGL_APIENTRY gl_list_base_func)(GLuint base);
	FOGL_STATIC gl_list_base_func* glListBase;
	typedef void (FOGL_APIENTRY gl_load_identity_func)(void);
	FOGL_STATIC gl_load_identity_func* glLoadIdentity;
	typedef void (FOGL_APIENTRY gl_load_matrixd_func)(const GLdouble *m);
	FOGL_STATIC gl_load_matrixd_func* glLoadMatrixd;
	typedef void (FOGL_APIENTRY gl_load_matrixf_func)(const GLfloat *m);
	FOGL_STATIC gl_load_matrixf_func* glLoadMatrixf;
	typedef void (FOGL_APIENTRY gl_load_name_func)(GLuint name);
	FOGL_STATIC gl_load_name_func* glLoadName;
	typedef void (FOGL_APIENTRY gl_logic_op_func)(GLenum opcode);
	FOGL_STATIC gl_logic_op_func* glLogicOp;
	typedef void (FOGL_APIENTRY gl_map1d_func)(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
	FOGL_STATIC gl_map1d_func* glMap1d;
	typedef void (FOGL_APIENTRY gl_map1f_func)(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
	FOGL_STATIC gl_map1f_func* glMap1f;
	typedef void (FOGL_APIENTRY gl_map2d_func)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
	FOGL_STATIC gl_map2d_func* glMap2d;
	typedef void (FOGL_APIENTRY gl_map2f_func)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
	FOGL_STATIC gl_map2f_func* glMap2f;
	typedef void (FOGL_APIENTRY gl_map_grid1d_func)(GLint un, GLdouble u1, GLdouble u2);
	FOGL_STATIC gl_map_grid1d_func* glMapGrid1d;
	typedef void (FOGL_APIENTRY gl_map_grid1f_func)(GLint un, GLfloat u1, GLfloat u2);
	FOGL_STATIC gl_map_grid1f_func* glMapGrid1f;
	typedef void (FOGL_APIENTRY gl_map_grid2d_func)(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
	FOGL_STATIC gl_map_grid2d_func* glMapGrid2d;
	typedef void (FOGL_APIENTRY gl_map_grid2f_func)(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
	FOGL_STATIC gl_map_grid2f_func* glMapGrid2f;
	typedef void (FOGL_APIENTRY gl_materialf_func)(GLenum face, GLenum pname, GLfloat param);
	FOGL_STATIC gl_materialf_func* glMaterialf;
	typedef void (FOGL_APIENTRY gl_materialfv_func)(GLenum face, GLenum pname, const GLfloat *params);
	FOGL_STATIC gl_materialfv_func* glMaterialfv;
	typedef void (FOGL_APIENTRY gl_materiali_func)(GLenum face, GLenum pname, GLint param);
	FOGL_STATIC gl_materiali_func* glMateriali;
	typedef void (FOGL_APIENTRY gl_materialiv_func)(GLenum face, GLenum pname, const GLint *params);
	FOGL_STATIC gl_materialiv_func* glMaterialiv;
	typedef void (FOGL_APIENTRY gl_matrix_mode_func)(GLenum mode);
	FOGL_STATIC gl_matrix_mode_func* glMatrixMode;
	typedef void (FOGL_APIENTRY gl_mult_matrixd_func)(const GLdouble *m);
	FOGL_STATIC gl_mult_matrixd_func* glMultMatrixd;
	typedef void (FOGL_APIENTRY gl_mult_matrixf_func)(const GLfloat *m);
	FOGL_STATIC gl_mult_matrixf_func* glMultMatrixf;
	typedef void (FOGL_APIENTRY gl_new_list_func)(GLuint list, GLenum mode);
	FOGL_STATIC gl_new_list_func* glNewList;
	typedef void (FOGL_APIENTRY gl_normal3b_func)(GLbyte nx, GLbyte ny, GLbyte nz);
	FOGL_STATIC gl_normal3b_func* glNormal3b;
	typedef void (FOGL_APIENTRY gl_normal3bv_func)(const GLbyte *v);
	FOGL_STATIC gl_normal3bv_func* glNormal3bv;
	typedef void (FOGL_APIENTRY gl_normal3d_func)(GLdouble nx, GLdouble ny, GLdouble nz);
	FOGL_STATIC gl_normal3d_func* glNormal3d;
	typedef void (FOGL_APIENTRY gl_normal3dv_func)(const GLdouble *v);
	FOGL_STATIC gl_normal3dv_func* glNormal3dv;
	typedef void (FOGL_APIENTRY gl_normal3f_func)(GLfloat nx, GLfloat ny, GLfloat nz);
	FOGL_STATIC gl_normal3f_func* glNormal3f;
	typedef void (FOGL_APIENTRY gl_normal3fv_func)(const GLfloat *v);
	FOGL_STATIC gl_normal3fv_func* glNormal3fv;
	typedef void (FOGL_APIENTRY gl_normal3i_func)(GLint nx, GLint ny, GLint nz);
	FOGL_STATIC gl_normal3i_func* glNormal3i;
	typedef void (FOGL_APIENTRY gl_normal3iv_func)(const GLint *v);
	FOGL_STATIC gl_normal3iv_func* glNormal3iv;
	typedef void (FOGL_APIENTRY gl_normal3s_func)(GLshort nx, GLshort ny, GLshort nz);
	FOGL_STATIC gl_normal3s_func* glNormal3s;
	typedef void (FOGL_APIENTRY gl_normal3sv_func)(const GLshort *v);
	FOGL_STATIC gl_normal3sv_func* glNormal3sv;
	typedef void (FOGL_APIENTRY gl_normal_pointer_func)(GLenum type, GLsizei stride, const GLvoid *pointer);
	FOGL_STATIC gl_normal_pointer_func* glNormalPointer;
	typedef void (FOGL_APIENTRY gl_ortho_func)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
	FOGL_STATIC gl_ortho_func* glOrtho;
	typedef void (FOGL_APIENTRY gl_pass_through_func)(GLfloat token);
	FOGL_STATIC gl_pass_through_func* glPassThrough;
	typedef void (FOGL_APIENTRY gl_pixel_mapfv_func)(GLenum map, GLsizei mapsize, const GLfloat *values);
	FOGL_STATIC gl_pixel_mapfv_func* glPixelMapfv;
	typedef void (FOGL_APIENTRY gl_pixel_mapuiv_func)(GLenum map, GLsizei mapsize, const GLuint *values);
	FOGL_STATIC gl_pixel_mapuiv_func* glPixelMapuiv;
	typedef void (FOGL_APIENTRY gl_pixel_mapusv_func)(GLenum map, GLsizei mapsize, const GLushort *values);
	FOGL_STATIC gl_pixel_mapusv_func* glPixelMapusv;
	typedef void (FOGL_APIENTRY gl_pixel_storef_func)(GLenum pname, GLfloat param);
	FOGL_STATIC gl_pixel_storef_func* glPixelStoref;
	typedef void (FOGL_APIENTRY gl_pixel_storei_func)(GLenum pname, GLint param);
	FOGL_STATIC gl_pixel_storei_func* glPixelStorei;
	typedef void (FOGL_APIENTRY gl_pixel_transferf_func)(GLenum pname, GLfloat param);
	FOGL_STATIC gl_pixel_transferf_func* glPixelTransferf;
	typedef void (FOGL_APIENTRY gl_pixel_transferi_func)(GLenum pname, GLint param);
	FOGL_STATIC gl_pixel_transferi_func* glPixelTransferi;
	typedef void (FOGL_APIENTRY gl_pixel_zoom_func)(GLfloat xfactor, GLfloat yfactor);
	FOGL_STATIC gl_pixel_zoom_func* glPixelZoom;
	typedef void (FOGL_APIENTRY gl_point_size_func)(GLfloat size);
	FOGL_STATIC gl_point_size_func* glPointSize;
	typedef void (FOGL_APIENTRY gl_polygon_mode_func)(GLenum face, GLenum mode);
	FOGL_STATIC gl_polygon_mode_func* glPolygonMode;
	typedef void (FOGL_APIENTRY gl_polygon_offset_func)(GLfloat factor, GLfloat units);
	FOGL_STATIC gl_polygon_offset_func* glPolygonOffset;
	typedef void (FOGL_APIENTRY gl_polygon_stipple_func)(const GLubyte *mask);
	FOGL_STATIC gl_polygon_stipple_func* glPolygonStipple;
	typedef void (FOGL_APIENTRY gl_pop_attrib_func)(void);
	FOGL_STATIC gl_pop_attrib_func* glPopAttrib;
	typedef void (FOGL_APIENTRY gl_pop_client_attrib_func)(void);
	FOGL_STATIC gl_pop_client_attrib_func* glPopClientAttrib;
	typedef void (FOGL_APIENTRY gl_pop_matrix_func)(void);
	FOGL_STATIC gl_pop_matrix_func* glPopMatrix;
	typedef void (FOGL_APIENTRY gl_pop_name_func)(void);
	FOGL_STATIC gl_pop_name_func* glPopName;
	typedef void (FOGL_APIENTRY gl_prioritize_textures_func)(GLsizei n, const GLuint *textures, const GLclampf *priorities);
	FOGL_STATIC gl_prioritize_textures_func* glPrioritizeTextures;
	typedef void (FOGL_APIENTRY gl_push_attrib_func)(GLbitfield mask);
	FOGL_STATIC gl_push_attrib_func* glPushAttrib;
	typedef void (FOGL_APIENTRY gl_push_client_attrib_func)(GLbitfield mask);
	FOGL_STATIC gl_push_client_attrib_func* glPushClientAttrib;
	typedef void (FOGL_APIENTRY gl_push_matrix_func)(void);
	FOGL_STATIC gl_push_matrix_func* glPushMatrix;
	typedef void (FOGL_APIENTRY gl_push_name_func)(GLuint name);
	FOGL_STATIC gl_push_name_func* glPushName;
	typedef void (FOGL_APIENTRY gl_raster_pos2d_func)(GLdouble x, GLdouble y);
	FOGL_STATIC gl_raster_pos2d_func* glRasterPos2d;
	typedef void (FOGL_APIENTRY gl_raster_pos2dv_func)(const GLdouble *v);
	FOGL_STATIC gl_raster_pos2dv_func* glRasterPos2dv;
	typedef void (FOGL_APIENTRY gl_raster_pos2f_func)(GLfloat x, GLfloat y);
	FOGL_STATIC gl_raster_pos2f_func* glRasterPos2f;
	typedef void (FOGL_APIENTRY gl_raster_pos2fv_func)(const GLfloat *v);
	FOGL_STATIC gl_raster_pos2fv_func* glRasterPos2fv;
	typedef void (FOGL_APIENTRY gl_raster_pos2i_func)(GLint x, GLint y);
	FOGL_STATIC gl_raster_pos2i_func* glRasterPos2i;
	typedef void (FOGL_APIENTRY gl_raster_pos2iv_func)(const GLint *v);
	FOGL_STATIC gl_raster_pos2iv_func* glRasterPos2iv;
	typedef void (FOGL_APIENTRY gl_raster_pos2s_func)(GLshort x, GLshort y);
	FOGL_STATIC gl_raster_pos2s_func* glRasterPos2s;
	typedef void (FOGL_APIENTRY gl_raster_pos2sv_func)(const GLshort *v);
	FOGL_STATIC gl_raster_pos2sv_func* glRasterPos2sv;
	typedef void (FOGL_APIENTRY gl_raster_pos3d_func)(GLdouble x, GLdouble y, GLdouble z);
	FOGL_STATIC gl_raster_pos3d_func* glRasterPos3d;
	typedef void (FOGL_APIENTRY gl_raster_pos3dv_func)(const GLdouble *v);
	FOGL_STATIC gl_raster_pos3dv_func* glRasterPos3dv;
	typedef void (FOGL_APIENTRY gl_raster_pos3f_func)(GLfloat x, GLfloat y, GLfloat z);
	FOGL_STATIC gl_raster_pos3f_func* glRasterPos3f;
	typedef void (FOGL_APIENTRY gl_raster_pos3fv_func)(const GLfloat *v);
	FOGL_STATIC gl_raster_pos3fv_func* glRasterPos3fv;
	typedef void (FOGL_APIENTRY gl_raster_pos3i_func)(GLint x, GLint y, GLint z);
	FOGL_STATIC gl_raster_pos3i_func* glRasterPos3i;
	typedef void (FOGL_APIENTRY gl_raster_pos3iv_func)(const GLint *v);
	FOGL_STATIC gl_raster_pos3iv_func* glRasterPos3iv;
	typedef void (FOGL_APIENTRY gl_raster_pos3s_func)(GLshort x, GLshort y, GLshort z);
	FOGL_STATIC gl_raster_pos3s_func* glRasterPos3s;
	typedef void (FOGL_APIENTRY gl_raster_pos3sv_func)(const GLshort *v);
	FOGL_STATIC gl_raster_pos3sv_func* glRasterPos3sv;
	typedef void (FOGL_APIENTRY gl_raster_pos4d_func)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	FOGL_STATIC gl_raster_pos4d_func* glRasterPos4d;
	typedef void (FOGL_APIENTRY gl_raster_pos4dv_func)(const GLdouble *v);
	FOGL_STATIC gl_raster_pos4dv_func* glRasterPos4dv;
	typedef void (FOGL_APIENTRY gl_raster_pos4f_func)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	FOGL_STATIC gl_raster_pos4f_func* glRasterPos4f;
	typedef void (FOGL_APIENTRY gl_raster_pos4fv_func)(const GLfloat *v);
	FOGL_STATIC gl_raster_pos4fv_func* glRasterPos4fv;
	typedef void (FOGL_APIENTRY gl_raster_pos4i_func)(GLint x, GLint y, GLint z, GLint w);
	FOGL_STATIC gl_raster_pos4i_func* glRasterPos4i;
	typedef void (FOGL_APIENTRY gl_raster_pos4iv_func)(const GLint *v);
	FOGL_STATIC gl_raster_pos4iv_func* glRasterPos4iv;
	typedef void (FOGL_APIENTRY gl_raster_pos4s_func)(GLshort x, GLshort y, GLshort z, GLshort w);
	FOGL_STATIC gl_raster_pos4s_func* glRasterPos4s;
	typedef void (FOGL_APIENTRY gl_raster_pos4sv_func)(const GLshort *v);
	FOGL_STATIC gl_raster_pos4sv_func* glRasterPos4sv;
	typedef void (FOGL_APIENTRY gl_read_buffer_func)(GLenum mode);
	FOGL_STATIC gl_read_buffer_func* glReadBuffer;
	typedef void (FOGL_APIENTRY gl_read_pixels_func)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);
	FOGL_STATIC gl_read_pixels_func* glReadPixels;
	typedef void (FOGL_APIENTRY gl_rectd_func)(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
	FOGL_STATIC gl_rectd_func* glRectd;
	typedef void (FOGL_APIENTRY gl_rectdv_func)(const GLdouble *v1, const GLdouble *v2);
	FOGL_STATIC gl_rectdv_func* glRectdv;
	typedef void (FOGL_APIENTRY gl_rectf_func)(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
	FOGL_STATIC gl_rectf_func* glRectf;
	typedef void (FOGL_APIENTRY gl_rectfv_func)(const GLfloat *v1, const GLfloat *v2);
	FOGL_STATIC gl_rectfv_func* glRectfv;
	typedef void (FOGL_APIENTRY gl_recti_func)(GLint x1, GLint y1, GLint x2, GLint y2);
	FOGL_STATIC gl_recti_func* glRecti;
	typedef void (FOGL_APIENTRY gl_rectiv_func)(const GLint *v1, const GLint *v2);
	FOGL_STATIC gl_rectiv_func* glRectiv;
	typedef void (FOGL_APIENTRY gl_rects_func)(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
	FOGL_STATIC gl_rects_func* glRects;
	typedef void (FOGL_APIENTRY gl_rectsv_func)(const GLshort *v1, const GLshort *v2);
	FOGL_STATIC gl_rectsv_func* glRectsv;
	typedef GLint(FOGL_APIENTRY gl_render_mode_func)(GLenum mode);
	FOGL_STATIC gl_render_mode_func* glRenderMode;
	typedef void (FOGL_APIENTRY gl_rotated_func)(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
	FOGL_STATIC gl_rotated_func* glRotated;
	typedef void (FOGL_APIENTRY gl_rotatef_func)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
	FOGL_STATIC gl_rotatef_func* glRotatef;
	typedef void (FOGL_APIENTRY gl_scaled_func)(GLdouble x, GLdouble y, GLdouble z);
	FOGL_STATIC gl_scaled_func* glScaled;
	typedef void (FOGL_APIENTRY gl_scalef_func)(GLfloat x, GLfloat y, GLfloat z);
	FOGL_STATIC gl_scalef_func* glScalef;
	typedef void (FOGL_APIENTRY gl_scissor_func)(GLint x, GLint y, GLsizei width, GLsizei height);
	FOGL_STATIC gl_scissor_func* glScissor;
	typedef void (FOGL_APIENTRY gl_select_buffer_func)(GLsizei size, GLuint *buffer);
	FOGL_STATIC gl_select_buffer_func* glSelectBuffer;
	typedef void (FOGL_APIENTRY gl_shade_model_func)(GLenum mode);
	FOGL_STATIC gl_shade_model_func* glShadeModel;
	typedef void (FOGL_APIENTRY gl_stencil_func_func)(GLenum func, GLint ref, GLuint mask);
	FOGL_STATIC gl_stencil_func_func* glStencilFunc;
	typedef void (FOGL_APIENTRY gl_stencil_mask_func)(GLuint mask);
	FOGL_STATIC gl_stencil_mask_func* glStencilMask;
	typedef void (FOGL_APIENTRY gl_stencil_op_func)(GLenum fail, GLenum zfail, GLenum zpass);
	FOGL_STATIC gl_stencil_op_func* glStencilOp;
	typedef void (FOGL_APIENTRY gl_tex_coord1d_func)(GLdouble s);
	FOGL_STATIC gl_tex_coord1d_func* glTexCoord1d;
	typedef void (FOGL_APIENTRY gl_tex_coord1dv_func)(const GLdouble *v);
	FOGL_STATIC gl_tex_coord1dv_func* glTexCoord1dv;
	typedef void (FOGL_APIENTRY gl_tex_coord1f_func)(GLfloat s);
	FOGL_STATIC gl_tex_coord1f_func* glTexCoord1f;
	typedef void (FOGL_APIENTRY gl_tex_coord1fv_func)(const GLfloat *v);
	FOGL_STATIC gl_tex_coord1fv_func* glTexCoord1fv;
	typedef void (FOGL_APIENTRY gl_tex_coord1i_func)(GLint s);
	FOGL_STATIC gl_tex_coord1i_func* glTexCoord1i;
	typedef void (FOGL_APIENTRY gl_tex_coord1iv_func)(const GLint *v);
	FOGL_STATIC gl_tex_coord1iv_func* glTexCoord1iv;
	typedef void (FOGL_APIENTRY gl_tex_coord1s_func)(GLshort s);
	FOGL_STATIC gl_tex_coord1s_func* glTexCoord1s;
	typedef void (FOGL_APIENTRY gl_tex_coord1sv_func)(const GLshort *v);
	FOGL_STATIC gl_tex_coord1sv_func* glTexCoord1sv;
	typedef void (FOGL_APIENTRY gl_tex_coord2d_func)(GLdouble s, GLdouble t);
	FOGL_STATIC gl_tex_coord2d_func* glTexCoord2d;
	typedef void (FOGL_APIENTRY gl_tex_coord2dv_func)(const GLdouble *v);
	FOGL_STATIC gl_tex_coord2dv_func* glTexCoord2dv;
	typedef void (FOGL_APIENTRY gl_tex_coord2f_func)(GLfloat s, GLfloat t);
	FOGL_STATIC gl_tex_coord2f_func* glTexCoord2f;
	typedef void (FOGL_APIENTRY gl_tex_coord2fv_func)(const GLfloat *v);
	FOGL_STATIC gl_tex_coord2fv_func* glTexCoord2fv;
	typedef void (FOGL_APIENTRY gl_tex_coord2i_func)(GLint s, GLint t);
	FOGL_STATIC gl_tex_coord2i_func* glTexCoord2i;
	typedef void (FOGL_APIENTRY gl_tex_coord2iv_func)(const GLint *v);
	FOGL_STATIC gl_tex_coord2iv_func* glTexCoord2iv;
	typedef void (FOGL_APIENTRY gl_tex_coord2s_func)(GLshort s, GLshort t);
	FOGL_STATIC gl_tex_coord2s_func* glTexCoord2s;
	typedef void (FOGL_APIENTRY gl_tex_coord2sv_func)(const GLshort *v);
	FOGL_STATIC gl_tex_coord2sv_func* glTexCoord2sv;
	typedef void (FOGL_APIENTRY gl_tex_coord3d_func)(GLdouble s, GLdouble t, GLdouble r);
	FOGL_STATIC gl_tex_coord3d_func* glTexCoord3d;
	typedef void (FOGL_APIENTRY gl_tex_coord3dv_func)(const GLdouble *v);
	FOGL_STATIC gl_tex_coord3dv_func* glTexCoord3dv;
	typedef void (FOGL_APIENTRY gl_tex_coord3f_func)(GLfloat s, GLfloat t, GLfloat r);
	FOGL_STATIC gl_tex_coord3f_func* glTexCoord3f;
	typedef void (FOGL_APIENTRY gl_tex_coord3fv_func)(const GLfloat *v);
	FOGL_STATIC gl_tex_coord3fv_func* glTexCoord3fv;
	typedef void (FOGL_APIENTRY gl_tex_coord3i_func)(GLint s, GLint t, GLint r);
	FOGL_STATIC gl_tex_coord3i_func* glTexCoord3i;
	typedef void (FOGL_APIENTRY gl_tex_coord3iv_func)(const GLint *v);
	FOGL_STATIC gl_tex_coord3iv_func* glTexCoord3iv;
	typedef void (FOGL_APIENTRY gl_tex_coord3s_func)(GLshort s, GLshort t, GLshort r);
	FOGL_STATIC gl_tex_coord3s_func* glTexCoord3s;
	typedef void (FOGL_APIENTRY gl_tex_coord3sv_func)(const GLshort *v);
	FOGL_STATIC gl_tex_coord3sv_func* glTexCoord3sv;
	typedef void (FOGL_APIENTRY gl_tex_coord4d_func)(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
	FOGL_STATIC gl_tex_coord4d_func* glTexCoord4d;
	typedef void (FOGL_APIENTRY gl_tex_coord4dv_func)(const GLdouble *v);
	FOGL_STATIC gl_tex_coord4dv_func* glTexCoord4dv;
	typedef void (FOGL_APIENTRY gl_tex_coord4f_func)(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
	FOGL_STATIC gl_tex_coord4f_func* glTexCoord4f;
	typedef void (FOGL_APIENTRY gl_tex_coord4fv_func)(const GLfloat *v);
	FOGL_STATIC gl_tex_coord4fv_func* glTexCoord4fv;
	typedef void (FOGL_APIENTRY gl_tex_coord4i_func)(GLint s, GLint t, GLint r, GLint q);
	FOGL_STATIC gl_tex_coord4i_func* glTexCoord4i;
	typedef void (FOGL_APIENTRY gl_tex_coord4iv_func)(const GLint *v);
	FOGL_STATIC gl_tex_coord4iv_func* glTexCoord4iv;
	typedef void (FOGL_APIENTRY gl_tex_coord4s_func)(GLshort s, GLshort t, GLshort r, GLshort q);
	FOGL_STATIC gl_tex_coord4s_func* glTexCoord4s;
	typedef void (FOGL_APIENTRY gl_tex_coord4sv_func)(const GLshort *v);
	FOGL_STATIC gl_tex_coord4sv_func* glTexCoord4sv;
	typedef void (FOGL_APIENTRY gl_tex_coord_pointer_func)(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
	FOGL_STATIC gl_tex_coord_pointer_func* glTexCoordPointer;
	typedef void (FOGL_APIENTRY gl_tex_envf_func)(GLenum target, GLenum pname, GLfloat param);
	FOGL_STATIC gl_tex_envf_func* glTexEnvf;
	typedef void (FOGL_APIENTRY gl_tex_envfv_func)(GLenum target, GLenum pname, const GLfloat *params);
	FOGL_STATIC gl_tex_envfv_func* glTexEnvfv;
	typedef void (FOGL_APIENTRY gl_tex_envi_func)(GLenum target, GLenum pname, GLint param);
	FOGL_STATIC gl_tex_envi_func* glTexEnvi;
	typedef void (FOGL_APIENTRY gl_tex_enviv_func)(GLenum target, GLenum pname, const GLint *params);
	FOGL_STATIC gl_tex_enviv_func* glTexEnviv;
	typedef void (FOGL_APIENTRY gl_tex_gend_func)(GLenum coord, GLenum pname, GLdouble param);
	FOGL_STATIC gl_tex_gend_func* glTexGend;
	typedef void (FOGL_APIENTRY gl_tex_gendv_func)(GLenum coord, GLenum pname, const GLdouble *params);
	FOGL_STATIC gl_tex_gendv_func* glTexGendv;
	typedef void (FOGL_APIENTRY gl_tex_genf_func)(GLenum coord, GLenum pname, GLfloat param);
	FOGL_STATIC gl_tex_genf_func* glTexGenf;
	typedef void (FOGL_APIENTRY gl_tex_genfv_func)(GLenum coord, GLenum pname, const GLfloat *params);
	FOGL_STATIC gl_tex_genfv_func* glTexGenfv;
	typedef void (FOGL_APIENTRY gl_tex_geni_func)(GLenum coord, GLenum pname, GLint param);
	FOGL_STATIC gl_tex_geni_func* glTexGeni;
	typedef void (FOGL_APIENTRY gl_tex_geniv_func)(GLenum coord, GLenum pname, const GLint *params);
	FOGL_STATIC gl_tex_geniv_func* glTexGeniv;
	typedef void (FOGL_APIENTRY gl_tex_image1d_func)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
	FOGL_STATIC gl_tex_image1d_func* glTexImage1D;
	typedef void (FOGL_APIENTRY gl_tex_image2d_func)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
	FOGL_STATIC gl_tex_image2d_func* glTexImage2D;
	typedef void (FOGL_APIENTRY gl_tex_parameterf_func)(GLenum target, GLenum pname, GLfloat param);
	FOGL_STATIC gl_tex_parameterf_func* glTexParameterf;
	typedef void (FOGL_APIENTRY gl_tex_parameterfv_func)(GLenum target, GLenum pname, const GLfloat *params);
	FOGL_STATIC gl_tex_parameterfv_func* glTexParameterfv;
	typedef void (FOGL_APIENTRY gl_tex_parameteri_func)(GLenum target, GLenum pname, GLint param);
	FOGL_STATIC gl_tex_parameteri_func* glTexParameteri;
	typedef void (FOGL_APIENTRY gl_tex_parameteriv_func)(GLenum target, GLenum pname, const GLint *params);
	FOGL_STATIC gl_tex_parameteriv_func* glTexParameteriv;
	typedef void (FOGL_APIENTRY gl_tex_sub_image1d_func)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
	FOGL_STATIC gl_tex_sub_image1d_func* glTexSubImage1D;
	typedef void (FOGL_APIENTRY gl_tex_sub_image2d_func)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
	FOGL_STATIC gl_tex_sub_image2d_func* glTexSubImage2D;
	typedef void (FOGL_APIENTRY gl_translated_func)(GLdouble x, GLdouble y, GLdouble z);
	FOGL_STATIC gl_translated_func* glTranslated;
	typedef void (FOGL_APIENTRY gl_translatef_func)(GLfloat x, GLfloat y, GLfloat z);
	FOGL_STATIC gl_translatef_func* glTranslatef;
	typedef void (FOGL_APIENTRY gl_vertex2d_func)(GLdouble x, GLdouble y);
	FOGL_STATIC gl_vertex2d_func* glVertex2d;
	typedef void (FOGL_APIENTRY gl_vertex2dv_func)(const GLdouble *v);
	FOGL_STATIC gl_vertex2dv_func* glVertex2dv;
	typedef void (FOGL_APIENTRY gl_vertex2f_func)(GLfloat x, GLfloat y);
	FOGL_STATIC gl_vertex2f_func* glVertex2f;
	typedef void (FOGL_APIENTRY gl_vertex2fv_func)(const GLfloat *v);
	FOGL_STATIC gl_vertex2fv_func* glVertex2fv;
	typedef void (FOGL_APIENTRY gl_vertex2i_func)(GLint x, GLint y);
	FOGL_STATIC gl_vertex2i_func* glVertex2i;
	typedef void (FOGL_APIENTRY gl_vertex2iv_func)(const GLint *v);
	FOGL_STATIC gl_vertex2iv_func* glVertex2iv;
	typedef void (FOGL_APIENTRY gl_vertex2s_func)(GLshort x, GLshort y);
	FOGL_STATIC gl_vertex2s_func* glVertex2s;
	typedef void (FOGL_APIENTRY gl_vertex2sv_func)(const GLshort *v);
	FOGL_STATIC gl_vertex2sv_func* glVertex2sv;
	typedef void (FOGL_APIENTRY gl_vertex3d_func)(GLdouble x, GLdouble y, GLdouble z);
	FOGL_STATIC gl_vertex3d_func* glVertex3d;
	typedef void (FOGL_APIENTRY gl_vertex3dv_func)(const GLdouble *v);
	FOGL_STATIC gl_vertex3dv_func* glVertex3dv;
	typedef void (FOGL_APIENTRY gl_vertex3f_func)(GLfloat x, GLfloat y, GLfloat z);
	FOGL_STATIC gl_vertex3f_func* glVertex3f;
	typedef void (FOGL_APIENTRY gl_vertex3fv_func)(const GLfloat *v);
	FOGL_STATIC gl_vertex3fv_func* glVertex3fv;
	typedef void (FOGL_APIENTRY gl_vertex3i_func)(GLint x, GLint y, GLint z);
	FOGL_STATIC gl_vertex3i_func* glVertex3i;
	typedef void (FOGL_APIENTRY gl_vertex3iv_func)(const GLint *v);
	FOGL_STATIC gl_vertex3iv_func* glVertex3iv;
	typedef void (FOGL_APIENTRY gl_vertex3s_func)(GLshort x, GLshort y, GLshort z);
	FOGL_STATIC gl_vertex3s_func* glVertex3s;
	typedef void (FOGL_APIENTRY gl_vertex3sv_func)(const GLshort *v);
	FOGL_STATIC gl_vertex3sv_func* glVertex3sv;
	typedef void (FOGL_APIENTRY gl_vertex4d_func)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	FOGL_STATIC gl_vertex4d_func* glVertex4d;
	typedef void (FOGL_APIENTRY gl_vertex4dv_func)(const GLdouble *v);
	FOGL_STATIC gl_vertex4dv_func* glVertex4dv;
	typedef void (FOGL_APIENTRY gl_vertex4f_func)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	FOGL_STATIC gl_vertex4f_func* glVertex4f;
	typedef void (FOGL_APIENTRY gl_vertex4fv_func)(const GLfloat *v);
	FOGL_STATIC gl_vertex4fv_func* glVertex4fv;
	typedef void (FOGL_APIENTRY gl_vertex4i_func)(GLint x, GLint y, GLint z, GLint w);
	FOGL_STATIC gl_vertex4i_func* glVertex4i;
	typedef void (FOGL_APIENTRY gl_vertex4iv_func)(const GLint *v);
	FOGL_STATIC gl_vertex4iv_func* glVertex4iv;
	typedef void (FOGL_APIENTRY gl_vertex4s_func)(GLshort x, GLshort y, GLshort z, GLshort w);
	FOGL_STATIC gl_vertex4s_func* glVertex4s;
	typedef void (FOGL_APIENTRY gl_vertex4sv_func)(const GLshort *v);
	FOGL_STATIC gl_vertex4sv_func* glVertex4sv;
	typedef void (FOGL_APIENTRY gl_vertex_pointer_func)(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
	FOGL_STATIC gl_vertex_pointer_func* glVertexPointer;
	typedef void (FOGL_APIENTRY gl_viewport_func)(GLint x, GLint y, GLsizei width, GLsizei height);
	FOGL_STATIC gl_viewport_func* glViewport;
#	else
	FOGL_GLAPI void FOGL_APIENTRY glAccum(GLenum op, GLfloat value);
	FOGL_GLAPI void FOGL_APIENTRY glAlphaFunc(GLenum func, GLclampf ref);
	FOGL_GLAPI GLboolean FOGL_APIENTRY glAreTexturesResident(GLsizei n, const GLuint *textures, GLboolean *residences);
	FOGL_GLAPI void FOGL_APIENTRY glArrayElement(GLint i);
	FOGL_GLAPI void FOGL_APIENTRY glBegin(GLenum mode);
	FOGL_GLAPI void FOGL_APIENTRY glBindTexture(GLenum target, GLuint texture);
	FOGL_GLAPI void FOGL_APIENTRY glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap);
	FOGL_GLAPI void FOGL_APIENTRY glBlendFunc(GLenum sfactor, GLenum dfactor);
	FOGL_GLAPI void FOGL_APIENTRY glCallList(GLuint list);
	FOGL_GLAPI void FOGL_APIENTRY glCallLists(GLsizei n, GLenum type, const GLvoid *lists);
	FOGL_GLAPI void FOGL_APIENTRY glClear(GLbitfield mask);
	FOGL_GLAPI void FOGL_APIENTRY glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
	FOGL_GLAPI void FOGL_APIENTRY glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
	FOGL_GLAPI void FOGL_APIENTRY glClearDepth(GLclampd depth);
	FOGL_GLAPI void FOGL_APIENTRY glClearIndex(GLfloat c);
	FOGL_GLAPI void FOGL_APIENTRY glClearStencil(GLint s);
	FOGL_GLAPI void FOGL_APIENTRY glClipPlane(GLenum plane, const GLdouble *equation);
	FOGL_GLAPI void FOGL_APIENTRY glColor3b(GLbyte red, GLbyte green, GLbyte blue);
	FOGL_GLAPI void FOGL_APIENTRY glColor3bv(const GLbyte *v);
	FOGL_GLAPI void FOGL_APIENTRY glColor3d(GLdouble red, GLdouble green, GLdouble blue);
	FOGL_GLAPI void FOGL_APIENTRY glColor3dv(const GLdouble *v);
	FOGL_GLAPI void FOGL_APIENTRY glColor3f(GLfloat red, GLfloat green, GLfloat blue);
	FOGL_GLAPI void FOGL_APIENTRY glColor3fv(const GLfloat *v);
	FOGL_GLAPI void FOGL_APIENTRY glColor3i(GLint red, GLint green, GLint blue);
	FOGL_GLAPI void FOGL_APIENTRY glColor3iv(const GLint *v);
	FOGL_GLAPI void FOGL_APIENTRY glColor3s(GLshort red, GLshort green, GLshort blue);
	FOGL_GLAPI void FOGL_APIENTRY glColor3sv(const GLshort *v);
	FOGL_GLAPI void FOGL_APIENTRY glColor3ub(GLubyte red, GLubyte green, GLubyte blue);
	FOGL_GLAPI void FOGL_APIENTRY glColor3ubv(const GLubyte *v);
	FOGL_GLAPI void FOGL_APIENTRY glColor3ui(GLuint red, GLuint green, GLuint blue);
	FOGL_GLAPI void FOGL_APIENTRY glColor3uiv(const GLuint *v);
	FOGL_GLAPI void FOGL_APIENTRY glColor3us(GLushort red, GLushort green, GLushort blue);
	FOGL_GLAPI void FOGL_APIENTRY glColor3usv(const GLushort *v);
	FOGL_GLAPI void FOGL_APIENTRY glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
	FOGL_GLAPI void FOGL_APIENTRY glColor4bv(const GLbyte *v);
	FOGL_GLAPI void FOGL_APIENTRY glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
	FOGL_GLAPI void FOGL_APIENTRY glColor4dv(const GLdouble *v);
	FOGL_GLAPI void FOGL_APIENTRY glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
	FOGL_GLAPI void FOGL_APIENTRY glColor4fv(const GLfloat *v);
	FOGL_GLAPI void FOGL_APIENTRY glColor4i(GLint red, GLint green, GLint blue, GLint alpha);
	FOGL_GLAPI void FOGL_APIENTRY glColor4iv(const GLint *v);
	FOGL_GLAPI void FOGL_APIENTRY glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha);
	FOGL_GLAPI void FOGL_APIENTRY glColor4sv(const GLshort *v);
	FOGL_GLAPI void FOGL_APIENTRY glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
	FOGL_GLAPI void FOGL_APIENTRY glColor4ubv(const GLubyte *v);
	FOGL_GLAPI void FOGL_APIENTRY glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha);
	FOGL_GLAPI void FOGL_APIENTRY glColor4uiv(const GLuint *v);
	FOGL_GLAPI void FOGL_APIENTRY glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha);
	FOGL_GLAPI void FOGL_APIENTRY glColor4usv(const GLushort *v);
	FOGL_GLAPI void FOGL_APIENTRY glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
	FOGL_GLAPI void FOGL_APIENTRY glColorMaterial(GLenum face, GLenum mode);
	FOGL_GLAPI void FOGL_APIENTRY glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
	FOGL_GLAPI void FOGL_APIENTRY glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
	FOGL_GLAPI void FOGL_APIENTRY glCopyTexImage1D(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border);
	FOGL_GLAPI void FOGL_APIENTRY glCopyTexImage2D(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
	FOGL_GLAPI void FOGL_APIENTRY glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
	FOGL_GLAPI void FOGL_APIENTRY glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	FOGL_GLAPI void FOGL_APIENTRY glCullFace(GLenum mode);
	FOGL_GLAPI void FOGL_APIENTRY glDeleteLists(GLuint list, GLsizei range);
	FOGL_GLAPI void FOGL_APIENTRY glDeleteTextures(GLsizei n, const GLuint *textures);
	FOGL_GLAPI void FOGL_APIENTRY glDepthFunc(GLenum func);
	FOGL_GLAPI void FOGL_APIENTRY glDepthMask(GLboolean flag);
	FOGL_GLAPI void FOGL_APIENTRY glDepthRange(GLclampd zNear, GLclampd zFar);
	FOGL_GLAPI void FOGL_APIENTRY glDisable(GLenum cap);
	FOGL_GLAPI void FOGL_APIENTRY glDisableClientState(GLenum array);
	FOGL_GLAPI void FOGL_APIENTRY glDrawArrays(GLenum mode, GLint first, GLsizei count);
	FOGL_GLAPI void FOGL_APIENTRY glDrawBuffer(GLenum mode);
	FOGL_GLAPI void FOGL_APIENTRY glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
	FOGL_GLAPI void FOGL_APIENTRY glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
	FOGL_GLAPI void FOGL_APIENTRY glEdgeFlag(GLboolean flag);
	FOGL_GLAPI void FOGL_APIENTRY glEdgeFlagPointer(GLsizei stride, const GLvoid *pointer);
	FOGL_GLAPI void FOGL_APIENTRY glEdgeFlagv(const GLboolean *flag);
	FOGL_GLAPI void FOGL_APIENTRY glEnable(GLenum cap);
	FOGL_GLAPI void FOGL_APIENTRY glEnableClientState(GLenum array);
	FOGL_GLAPI void FOGL_APIENTRY glEnd(void);
	FOGL_GLAPI void FOGL_APIENTRY glEndList(void);
	FOGL_GLAPI void FOGL_APIENTRY glEvalCoord1d(GLdouble u);
	FOGL_GLAPI void FOGL_APIENTRY glEvalCoord1dv(const GLdouble *u);
	FOGL_GLAPI void FOGL_APIENTRY glEvalCoord1f(GLfloat u);
	FOGL_GLAPI void FOGL_APIENTRY glEvalCoord1fv(const GLfloat *u);
	FOGL_GLAPI void FOGL_APIENTRY glEvalCoord2d(GLdouble u, GLdouble v);
	FOGL_GLAPI void FOGL_APIENTRY glEvalCoord2dv(const GLdouble *u);
	FOGL_GLAPI void FOGL_APIENTRY glEvalCoord2f(GLfloat u, GLfloat v);
	FOGL_GLAPI void FOGL_APIENTRY glEvalCoord2fv(const GLfloat *u);
	FOGL_GLAPI void FOGL_APIENTRY glEvalMesh1(GLenum mode, GLint i1, GLint i2);
	FOGL_GLAPI void FOGL_APIENTRY glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
	FOGL_GLAPI void FOGL_APIENTRY glEvalPoint1(GLint i);
	FOGL_GLAPI void FOGL_APIENTRY glEvalPoint2(GLint i, GLint j);
	FOGL_GLAPI void FOGL_APIENTRY glFeedbackBuffer(GLsizei size, GLenum type, GLfloat *buffer);
	FOGL_GLAPI void FOGL_APIENTRY glFinish(void);
	FOGL_GLAPI void FOGL_APIENTRY glFlush(void);
	FOGL_GLAPI void FOGL_APIENTRY glFogf(GLenum pname, GLfloat param);
	FOGL_GLAPI void FOGL_APIENTRY glFogfv(GLenum pname, const GLfloat *params);
	FOGL_GLAPI void FOGL_APIENTRY glFogi(GLenum pname, GLint param);
	FOGL_GLAPI void FOGL_APIENTRY glFogiv(GLenum pname, const GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glFrontFace(GLenum mode);
	FOGL_GLAPI void FOGL_APIENTRY glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
	FOGL_GLAPI GLuint FOGL_APIENTRY glGenLists(GLsizei range);
	FOGL_GLAPI void FOGL_APIENTRY glGenTextures(GLsizei n, GLuint *textures);
	FOGL_GLAPI void FOGL_APIENTRY glGetBooleanv(GLenum pname, GLboolean *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetClipPlane(GLenum plane, GLdouble *equation);
	FOGL_GLAPI void FOGL_APIENTRY glGetDoublev(GLenum pname, GLdouble *params);
	FOGL_GLAPI GLenum FOGL_APIENTRY glGetError(void);
	FOGL_GLAPI void FOGL_APIENTRY glGetFloatv(GLenum pname, GLfloat *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetIntegerv(GLenum pname, GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetLightfv(GLenum light, GLenum pname, GLfloat *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetLightiv(GLenum light, GLenum pname, GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetMapdv(GLenum target, GLenum query, GLdouble *v);
	FOGL_GLAPI void FOGL_APIENTRY glGetMapfv(GLenum target, GLenum query, GLfloat *v);
	FOGL_GLAPI void FOGL_APIENTRY glGetMapiv(GLenum target, GLenum query, GLint *v);
	FOGL_GLAPI void FOGL_APIENTRY glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetMaterialiv(GLenum face, GLenum pname, GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetPixelMapfv(GLenum map, GLfloat *values);
	FOGL_GLAPI void FOGL_APIENTRY glGetPixelMapuiv(GLenum map, GLuint *values);
	FOGL_GLAPI void FOGL_APIENTRY glGetPixelMapusv(GLenum map, GLushort *values);
	FOGL_GLAPI void FOGL_APIENTRY glGetPointerv(GLenum pname, GLvoid* *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetPolygonStipple(GLubyte *mask);
	FOGL_GLAPI const GLubyte * FOGL_APIENTRY glGetString(GLenum name);
	FOGL_GLAPI void FOGL_APIENTRY glGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetTexEnviv(GLenum target, GLenum pname, GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetTexGendv(GLenum coord, GLenum pname, GLdouble *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetTexGenfv(GLenum coord, GLenum pname, GLfloat *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetTexGeniv(GLenum coord, GLenum pname, GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
	FOGL_GLAPI void FOGL_APIENTRY glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetTexParameteriv(GLenum target, GLenum pname, GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glHint(GLenum target, GLenum mode);
	FOGL_GLAPI void FOGL_APIENTRY glIndexMask(GLuint mask);
	FOGL_GLAPI void FOGL_APIENTRY glIndexPointer(GLenum type, GLsizei stride, const GLvoid *pointer);
	FOGL_GLAPI void FOGL_APIENTRY glIndexd(GLdouble c);
	FOGL_GLAPI void FOGL_APIENTRY glIndexdv(const GLdouble *c);
	FOGL_GLAPI void FOGL_APIENTRY glIndexf(GLfloat c);
	FOGL_GLAPI void FOGL_APIENTRY glIndexfv(const GLfloat *c);
	FOGL_GLAPI void FOGL_APIENTRY glIndexi(GLint c);
	FOGL_GLAPI void FOGL_APIENTRY glIndexiv(const GLint *c);
	FOGL_GLAPI void FOGL_APIENTRY glIndexs(GLshort c);
	FOGL_GLAPI void FOGL_APIENTRY glIndexsv(const GLshort *c);
	FOGL_GLAPI void FOGL_APIENTRY glIndexub(GLubyte c);
	FOGL_GLAPI void FOGL_APIENTRY glIndexubv(const GLubyte *c);
	FOGL_GLAPI void FOGL_APIENTRY glInitNames(void);
	FOGL_GLAPI void FOGL_APIENTRY glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer);
	FOGL_GLAPI GLboolean FOGL_APIENTRY glIsEnabled(GLenum cap);
	FOGL_GLAPI GLboolean FOGL_APIENTRY glIsList(GLuint list);
	FOGL_GLAPI GLboolean FOGL_APIENTRY glIsTexture(GLuint texture);
	FOGL_GLAPI void FOGL_APIENTRY glLightModelf(GLenum pname, GLfloat param);
	FOGL_GLAPI void FOGL_APIENTRY glLightModelfv(GLenum pname, const GLfloat *params);
	FOGL_GLAPI void FOGL_APIENTRY glLightModeli(GLenum pname, GLint param);
	FOGL_GLAPI void FOGL_APIENTRY glLightModeliv(GLenum pname, const GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glLightf(GLenum light, GLenum pname, GLfloat param);
	FOGL_GLAPI void FOGL_APIENTRY glLightfv(GLenum light, GLenum pname, const GLfloat *params);
	FOGL_GLAPI void FOGL_APIENTRY glLighti(GLenum light, GLenum pname, GLint param);
	FOGL_GLAPI void FOGL_APIENTRY glLightiv(GLenum light, GLenum pname, const GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glLineStipple(GLint factor, GLushort pattern);
	FOGL_GLAPI void FOGL_APIENTRY glLineWidth(GLfloat width);
	FOGL_GLAPI void FOGL_APIENTRY glListBase(GLuint base);
	FOGL_GLAPI void FOGL_APIENTRY glLoadIdentity(void);
	FOGL_GLAPI void FOGL_APIENTRY glLoadMatrixd(const GLdouble *m);
	FOGL_GLAPI void FOGL_APIENTRY glLoadMatrixf(const GLfloat *m);
	FOGL_GLAPI void FOGL_APIENTRY glLoadName(GLuint name);
	FOGL_GLAPI void FOGL_APIENTRY glLogicOp(GLenum opcode);
	FOGL_GLAPI void FOGL_APIENTRY glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
	FOGL_GLAPI void FOGL_APIENTRY glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
	FOGL_GLAPI void FOGL_APIENTRY glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
	FOGL_GLAPI void FOGL_APIENTRY glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
	FOGL_GLAPI void FOGL_APIENTRY glMapGrid1d(GLint un, GLdouble u1, GLdouble u2);
	FOGL_GLAPI void FOGL_APIENTRY glMapGrid1f(GLint un, GLfloat u1, GLfloat u2);
	FOGL_GLAPI void FOGL_APIENTRY glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
	FOGL_GLAPI void FOGL_APIENTRY glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
	FOGL_GLAPI void FOGL_APIENTRY glMaterialf(GLenum face, GLenum pname, GLfloat param);
	FOGL_GLAPI void FOGL_APIENTRY glMaterialfv(GLenum face, GLenum pname, const GLfloat *params);
	FOGL_GLAPI void FOGL_APIENTRY glMateriali(GLenum face, GLenum pname, GLint param);
	FOGL_GLAPI void FOGL_APIENTRY glMaterialiv(GLenum face, GLenum pname, const GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glMatrixMode(GLenum mode);
	FOGL_GLAPI void FOGL_APIENTRY glMultMatrixd(const GLdouble *m);
	FOGL_GLAPI void FOGL_APIENTRY glMultMatrixf(const GLfloat *m);
	FOGL_GLAPI void FOGL_APIENTRY glNewList(GLuint list, GLenum mode);
	FOGL_GLAPI void FOGL_APIENTRY glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz);
	FOGL_GLAPI void FOGL_APIENTRY glNormal3bv(const GLbyte *v);
	FOGL_GLAPI void FOGL_APIENTRY glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz);
	FOGL_GLAPI void FOGL_APIENTRY glNormal3dv(const GLdouble *v);
	FOGL_GLAPI void FOGL_APIENTRY glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz);
	FOGL_GLAPI void FOGL_APIENTRY glNormal3fv(const GLfloat *v);
	FOGL_GLAPI void FOGL_APIENTRY glNormal3i(GLint nx, GLint ny, GLint nz);
	FOGL_GLAPI void FOGL_APIENTRY glNormal3iv(const GLint *v);
	FOGL_GLAPI void FOGL_APIENTRY glNormal3s(GLshort nx, GLshort ny, GLshort nz);
	FOGL_GLAPI void FOGL_APIENTRY glNormal3sv(const GLshort *v);
	FOGL_GLAPI void FOGL_APIENTRY glNormalPointer(GLenum type, GLsizei stride, const GLvoid *pointer);
	FOGL_GLAPI void FOGL_APIENTRY glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
	FOGL_GLAPI void FOGL_APIENTRY glPassThrough(GLfloat token);
	FOGL_GLAPI void FOGL_APIENTRY glPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat *values);
	FOGL_GLAPI void FOGL_APIENTRY glPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint *values);
	FOGL_GLAPI void FOGL_APIENTRY glPixelMapusv(GLenum map, GLsizei mapsize, const GLushort *values);
	FOGL_GLAPI void FOGL_APIENTRY glPixelStoref(GLenum pname, GLfloat param);
	FOGL_GLAPI void FOGL_APIENTRY glPixelStorei(GLenum pname, GLint param);
	FOGL_GLAPI void FOGL_APIENTRY glPixelTransferf(GLenum pname, GLfloat param);
	FOGL_GLAPI void FOGL_APIENTRY glPixelTransferi(GLenum pname, GLint param);
	FOGL_GLAPI void FOGL_APIENTRY glPixelZoom(GLfloat xfactor, GLfloat yfactor);
	FOGL_GLAPI void FOGL_APIENTRY glPointSize(GLfloat size);
	FOGL_GLAPI void FOGL_APIENTRY glPolygonMode(GLenum face, GLenum mode);
	FOGL_GLAPI void FOGL_APIENTRY glPolygonOffset(GLfloat factor, GLfloat units);
	FOGL_GLAPI void FOGL_APIENTRY glPolygonStipple(const GLubyte *mask);
	FOGL_GLAPI void FOGL_APIENTRY glPopAttrib(void);
	FOGL_GLAPI void FOGL_APIENTRY glPopClientAttrib(void);
	FOGL_GLAPI void FOGL_APIENTRY glPopMatrix(void);
	FOGL_GLAPI void FOGL_APIENTRY glPopName(void);
	FOGL_GLAPI void FOGL_APIENTRY glPrioritizeTextures(GLsizei n, const GLuint *textures, const GLclampf *priorities);
	FOGL_GLAPI void FOGL_APIENTRY glPushAttrib(GLbitfield mask);
	FOGL_GLAPI void FOGL_APIENTRY glPushClientAttrib(GLbitfield mask);
	FOGL_GLAPI void FOGL_APIENTRY glPushMatrix(void);
	FOGL_GLAPI void FOGL_APIENTRY glPushName(GLuint name);
	FOGL_GLAPI void FOGL_APIENTRY glRasterPos2d(GLdouble x, GLdouble y);
	FOGL_GLAPI void FOGL_APIENTRY glRasterPos2dv(const GLdouble *v);
	FOGL_GLAPI void FOGL_APIENTRY glRasterPos2f(GLfloat x, GLfloat y);
	FOGL_GLAPI void FOGL_APIENTRY glRasterPos2fv(const GLfloat *v);
	FOGL_GLAPI void FOGL_APIENTRY glRasterPos2i(GLint x, GLint y);
	FOGL_GLAPI void FOGL_APIENTRY glRasterPos2iv(const GLint *v);
	FOGL_GLAPI void FOGL_APIENTRY glRasterPos2s(GLshort x, GLshort y);
	FOGL_GLAPI void FOGL_APIENTRY glRasterPos2sv(const GLshort *v);
	FOGL_GLAPI void FOGL_APIENTRY glRasterPos3d(GLdouble x, GLdouble y, GLdouble z);
	FOGL_GLAPI void FOGL_APIENTRY glRasterPos3dv(const GLdouble *v);
	FOGL_GLAPI void FOGL_APIENTRY glRasterPos3f(GLfloat x, GLfloat y, GLfloat z);
	FOGL_GLAPI void FOGL_APIENTRY glRasterPos3fv(const GLfloat *v);
	FOGL_GLAPI void FOGL_APIENTRY glRasterPos3i(GLint x, GLint y, GLint z);
	FOGL_GLAPI void FOGL_APIENTRY glRasterPos3iv(const GLint *v);
	FOGL_GLAPI void FOGL_APIENTRY glRasterPos3s(GLshort x, GLshort y, GLshort z);
	FOGL_GLAPI void FOGL_APIENTRY glRasterPos3sv(const GLshort *v);
	FOGL_GLAPI void FOGL_APIENTRY glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	FOGL_GLAPI void FOGL_APIENTRY glRasterPos4dv(const GLdouble *v);
	FOGL_GLAPI void FOGL_APIENTRY glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	FOGL_GLAPI void FOGL_APIENTRY glRasterPos4fv(const GLfloat *v);
	FOGL_GLAPI void FOGL_APIENTRY glRasterPos4i(GLint x, GLint y, GLint z, GLint w);
	FOGL_GLAPI void FOGL_APIENTRY glRasterPos4iv(const GLint *v);
	FOGL_GLAPI void FOGL_APIENTRY glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w);
	FOGL_GLAPI void FOGL_APIENTRY glRasterPos4sv(const GLshort *v);
	FOGL_GLAPI void FOGL_APIENTRY glReadBuffer(GLenum mode);
	FOGL_GLAPI void FOGL_APIENTRY glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);
	FOGL_GLAPI void FOGL_APIENTRY glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
	FOGL_GLAPI void FOGL_APIENTRY glRectdv(const GLdouble *v1, const GLdouble *v2);
	FOGL_GLAPI void FOGL_APIENTRY glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
	FOGL_GLAPI void FOGL_APIENTRY glRectfv(const GLfloat *v1, const GLfloat *v2);
	FOGL_GLAPI void FOGL_APIENTRY glRecti(GLint x1, GLint y1, GLint x2, GLint y2);
	FOGL_GLAPI void FOGL_APIENTRY glRectiv(const GLint *v1, const GLint *v2);
	FOGL_GLAPI void FOGL_APIENTRY glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
	FOGL_GLAPI void FOGL_APIENTRY glRectsv(const GLshort *v1, const GLshort *v2);
	FOGL_GLAPI GLint FOGL_APIENTRY glRenderMode(GLenum mode);
	FOGL_GLAPI void FOGL_APIENTRY glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
	FOGL_GLAPI void FOGL_APIENTRY glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
	FOGL_GLAPI void FOGL_APIENTRY glScaled(GLdouble x, GLdouble y, GLdouble z);
	FOGL_GLAPI void FOGL_APIENTRY glScalef(GLfloat x, GLfloat y, GLfloat z);
	FOGL_GLAPI void FOGL_APIENTRY glScissor(GLint x, GLint y, GLsizei width, GLsizei height);
	FOGL_GLAPI void FOGL_APIENTRY glSelectBuffer(GLsizei size, GLuint *buffer);
	FOGL_GLAPI void FOGL_APIENTRY glShadeModel(GLenum mode);
	FOGL_GLAPI void FOGL_APIENTRY glStencilFunc(GLenum func, GLint ref, GLuint mask);
	FOGL_GLAPI void FOGL_APIENTRY glStencilMask(GLuint mask);
	FOGL_GLAPI void FOGL_APIENTRY glStencilOp(GLenum fail, GLenum zfail, GLenum zpass);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoord1d(GLdouble s);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoord1dv(const GLdouble *v);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoord1f(GLfloat s);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoord1fv(const GLfloat *v);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoord1i(GLint s);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoord1iv(const GLint *v);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoord1s(GLshort s);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoord1sv(const GLshort *v);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoord2d(GLdouble s, GLdouble t);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoord2dv(const GLdouble *v);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoord2f(GLfloat s, GLfloat t);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoord2fv(const GLfloat *v);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoord2i(GLint s, GLint t);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoord2iv(const GLint *v);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoord2s(GLshort s, GLshort t);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoord2sv(const GLshort *v);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoord3d(GLdouble s, GLdouble t, GLdouble r);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoord3dv(const GLdouble *v);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoord3f(GLfloat s, GLfloat t, GLfloat r);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoord3fv(const GLfloat *v);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoord3i(GLint s, GLint t, GLint r);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoord3iv(const GLint *v);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoord3s(GLshort s, GLshort t, GLshort r);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoord3sv(const GLshort *v);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoord4dv(const GLdouble *v);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoord4fv(const GLfloat *v);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoord4i(GLint s, GLint t, GLint r, GLint q);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoord4iv(const GLint *v);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoord4sv(const GLshort *v);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
	FOGL_GLAPI void FOGL_APIENTRY glTexEnvf(GLenum target, GLenum pname, GLfloat param);
	FOGL_GLAPI void FOGL_APIENTRY glTexEnvfv(GLenum target, GLenum pname, const GLfloat *params);
	FOGL_GLAPI void FOGL_APIENTRY glTexEnvi(GLenum target, GLenum pname, GLint param);
	FOGL_GLAPI void FOGL_APIENTRY glTexEnviv(GLenum target, GLenum pname, const GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glTexGend(GLenum coord, GLenum pname, GLdouble param);
	FOGL_GLAPI void FOGL_APIENTRY glTexGendv(GLenum coord, GLenum pname, const GLdouble *params);
	FOGL_GLAPI void FOGL_APIENTRY glTexGenf(GLenum coord, GLenum pname, GLfloat param);
	FOGL_GLAPI void FOGL_APIENTRY glTexGenfv(GLenum coord, GLenum pname, const GLfloat *params);
	FOGL_GLAPI void FOGL_APIENTRY glTexGeni(GLenum coord, GLenum pname, GLint param);
	FOGL_GLAPI void FOGL_APIENTRY glTexGeniv(GLenum coord, GLenum pname, const GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
	FOGL_GLAPI void FOGL_APIENTRY glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
	FOGL_GLAPI void FOGL_APIENTRY glTexParameterf(GLenum target, GLenum pname, GLfloat param);
	FOGL_GLAPI void FOGL_APIENTRY glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params);
	FOGL_GLAPI void FOGL_APIENTRY glTexParameteri(GLenum target, GLenum pname, GLint param);
	FOGL_GLAPI void FOGL_APIENTRY glTexParameteriv(GLenum target, GLenum pname, const GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
	FOGL_GLAPI void FOGL_APIENTRY glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
	FOGL_GLAPI void FOGL_APIENTRY glTranslated(GLdouble x, GLdouble y, GLdouble z);
	FOGL_GLAPI void FOGL_APIENTRY glTranslatef(GLfloat x, GLfloat y, GLfloat z);
	FOGL_GLAPI void FOGL_APIENTRY glVertex2d(GLdouble x, GLdouble y);
	FOGL_GLAPI void FOGL_APIENTRY glVertex2dv(const GLdouble *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertex2f(GLfloat x, GLfloat y);
	FOGL_GLAPI void FOGL_APIENTRY glVertex2fv(const GLfloat *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertex2i(GLint x, GLint y);
	FOGL_GLAPI void FOGL_APIENTRY glVertex2iv(const GLint *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertex2s(GLshort x, GLshort y);
	FOGL_GLAPI void FOGL_APIENTRY glVertex2sv(const GLshort *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertex3d(GLdouble x, GLdouble y, GLdouble z);
	FOGL_GLAPI void FOGL_APIENTRY glVertex3dv(const GLdouble *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertex3f(GLfloat x, GLfloat y, GLfloat z);
	FOGL_GLAPI void FOGL_APIENTRY glVertex3fv(const GLfloat *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertex3i(GLint x, GLint y, GLint z);
	FOGL_GLAPI void FOGL_APIENTRY glVertex3iv(const GLint *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertex3s(GLshort x, GLshort y, GLshort z);
	FOGL_GLAPI void FOGL_APIENTRY glVertex3sv(const GLshort *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	FOGL_GLAPI void FOGL_APIENTRY glVertex4dv(const GLdouble *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	FOGL_GLAPI void FOGL_APIENTRY glVertex4fv(const GLfloat *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertex4i(GLint x, GLint y, GLint z, GLint w);
	FOGL_GLAPI void FOGL_APIENTRY glVertex4iv(const GLint *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w);
	FOGL_GLAPI void FOGL_APIENTRY glVertex4sv(const GLshort *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
	FOGL_GLAPI void FOGL_APIENTRY glViewport(GLint x, GLint y, GLsizei width, GLsizei height);
#	endif // FOGL_STATIC
#endif // GL_VERSION_1_1
#ifndef GL_VERSION_1_2
#	define GL_VERSION_1_2 1
	static constexpr uint32_t GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
	static constexpr uint32_t GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
	static constexpr uint32_t GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
	static constexpr uint32_t GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
	static constexpr uint32_t GL_UNSIGNED_INT_10_10_10_2 = 0x8036;
	static constexpr uint32_t GL_TEXTURE_BINDING_3D = 0x806A;
	static constexpr uint32_t GL_PACK_SKIP_IMAGES = 0x806B;
	static constexpr uint32_t GL_PACK_IMAGE_HEIGHT = 0x806C;
	static constexpr uint32_t GL_UNPACK_SKIP_IMAGES = 0x806D;
	static constexpr uint32_t GL_UNPACK_IMAGE_HEIGHT = 0x806E;
	static constexpr uint32_t GL_TEXTURE_3D = 0x806F;
	static constexpr uint32_t GL_PROXY_TEXTURE_3D = 0x8070;
	static constexpr uint32_t GL_TEXTURE_DEPTH = 0x8071;
	static constexpr uint32_t GL_TEXTURE_WRAP_R = 0x8072;
	static constexpr uint32_t GL_MAX_3D_TEXTURE_SIZE = 0x8073;
	static constexpr uint32_t GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
	static constexpr uint32_t GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
	static constexpr uint32_t GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
	static constexpr uint32_t GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
	static constexpr uint32_t GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
	static constexpr uint32_t GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
	static constexpr uint32_t GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
	static constexpr uint32_t GL_BGR = 0x80E0;
	static constexpr uint32_t GL_BGRA = 0x80E1;
	static constexpr uint32_t GL_MAX_ELEMENTS_VERTICES = 0x80E8;
	static constexpr uint32_t GL_MAX_ELEMENTS_INDICES = 0x80E9;
	static constexpr uint32_t GL_CLAMP_TO_EDGE = 0x812F;
	static constexpr uint32_t GL_TEXTURE_MIN_LOD = 0x813A;
	static constexpr uint32_t GL_TEXTURE_MAX_LOD = 0x813B;
	static constexpr uint32_t GL_TEXTURE_BASE_LEVEL = 0x813C;
	static constexpr uint32_t GL_TEXTURE_MAX_LEVEL = 0x813D;
	static constexpr uint32_t GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
	static constexpr uint32_t GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
	static constexpr uint32_t GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
	static constexpr uint32_t GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
	static constexpr uint32_t GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
	static constexpr uint32_t GL_RESCALE_NORMAL = 0x803A;
	static constexpr uint32_t GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8;
	static constexpr uint32_t GL_SINGLE_COLOR = 0x81F9;
	static constexpr uint32_t GL_SEPARATE_SPECULAR_COLOR = 0x81FA;
	static constexpr uint32_t GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
#	ifdef FOGL_STATIC
	typedef void (FOGL_APIENTRY gl_draw_range_elements_func)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
	FOGL_STATIC gl_draw_range_elements_func* glDrawRangeElements;
	typedef void (FOGL_APIENTRY gl_tex_image3d_func)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
	FOGL_STATIC gl_tex_image3d_func* glTexImage3D;
	typedef void (FOGL_APIENTRY gl_tex_sub_image3d_func)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
	FOGL_STATIC gl_tex_sub_image3d_func* glTexSubImage3D;
	typedef void (FOGL_APIENTRY gl_copy_tex_sub_image3d_func)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	FOGL_STATIC gl_copy_tex_sub_image3d_func* glCopyTexSubImage3D;
#	else
	FOGL_GLAPI void FOGL_APIENTRY glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
	FOGL_GLAPI void FOGL_APIENTRY glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
	FOGL_GLAPI void FOGL_APIENTRY glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
	FOGL_GLAPI void FOGL_APIENTRY glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
#	endif // FOGL_STATIC
#endif // GL_VERSION_1_2
#ifndef GL_VERSION_1_3
#	define GL_VERSION_1_3 1
	static constexpr uint32_t GL_TEXTURE0 = 0x84C0;
	static constexpr uint32_t GL_TEXTURE1 = 0x84C1;
	static constexpr uint32_t GL_TEXTURE2 = 0x84C2;
	static constexpr uint32_t GL_TEXTURE3 = 0x84C3;
	static constexpr uint32_t GL_TEXTURE4 = 0x84C4;
	static constexpr uint32_t GL_TEXTURE5 = 0x84C5;
	static constexpr uint32_t GL_TEXTURE6 = 0x84C6;
	static constexpr uint32_t GL_TEXTURE7 = 0x84C7;
	static constexpr uint32_t GL_TEXTURE8 = 0x84C8;
	static constexpr uint32_t GL_TEXTURE9 = 0x84C9;
	static constexpr uint32_t GL_TEXTURE10 = 0x84CA;
	static constexpr uint32_t GL_TEXTURE11 = 0x84CB;
	static constexpr uint32_t GL_TEXTURE12 = 0x84CC;
	static constexpr uint32_t GL_TEXTURE13 = 0x84CD;
	static constexpr uint32_t GL_TEXTURE14 = 0x84CE;
	static constexpr uint32_t GL_TEXTURE15 = 0x84CF;
	static constexpr uint32_t GL_TEXTURE16 = 0x84D0;
	static constexpr uint32_t GL_TEXTURE17 = 0x84D1;
	static constexpr uint32_t GL_TEXTURE18 = 0x84D2;
	static constexpr uint32_t GL_TEXTURE19 = 0x84D3;
	static constexpr uint32_t GL_TEXTURE20 = 0x84D4;
	static constexpr uint32_t GL_TEXTURE21 = 0x84D5;
	static constexpr uint32_t GL_TEXTURE22 = 0x84D6;
	static constexpr uint32_t GL_TEXTURE23 = 0x84D7;
	static constexpr uint32_t GL_TEXTURE24 = 0x84D8;
	static constexpr uint32_t GL_TEXTURE25 = 0x84D9;
	static constexpr uint32_t GL_TEXTURE26 = 0x84DA;
	static constexpr uint32_t GL_TEXTURE27 = 0x84DB;
	static constexpr uint32_t GL_TEXTURE28 = 0x84DC;
	static constexpr uint32_t GL_TEXTURE29 = 0x84DD;
	static constexpr uint32_t GL_TEXTURE30 = 0x84DE;
	static constexpr uint32_t GL_TEXTURE31 = 0x84DF;
	static constexpr uint32_t GL_ACTIVE_TEXTURE = 0x84E0;
	static constexpr uint32_t GL_MULTISAMPLE = 0x809D;
	static constexpr uint32_t GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
	static constexpr uint32_t GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
	static constexpr uint32_t GL_SAMPLE_COVERAGE = 0x80A0;
	static constexpr uint32_t GL_SAMPLE_BUFFERS = 0x80A8;
	static constexpr uint32_t GL_SAMPLES = 0x80A9;
	static constexpr uint32_t GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
	static constexpr uint32_t GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
	static constexpr uint32_t GL_TEXTURE_CUBE_MAP = 0x8513;
	static constexpr uint32_t GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
	static constexpr uint32_t GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
	static constexpr uint32_t GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
	static constexpr uint32_t GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
	static constexpr uint32_t GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
	static constexpr uint32_t GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
	static constexpr uint32_t GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
	static constexpr uint32_t GL_PROXY_TEXTURE_CUBE_MAP = 0x851B;
	static constexpr uint32_t GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
	static constexpr uint32_t GL_COMPRESSED_RGB = 0x84ED;
	static constexpr uint32_t GL_COMPRESSED_RGBA = 0x84EE;
	static constexpr uint32_t GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
	static constexpr uint32_t GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
	static constexpr uint32_t GL_TEXTURE_COMPRESSED = 0x86A1;
	static constexpr uint32_t GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
	static constexpr uint32_t GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
	static constexpr uint32_t GL_CLAMP_TO_BORDER = 0x812D;
	static constexpr uint32_t GL_CLIENT_ACTIVE_TEXTURE = 0x84E1;
	static constexpr uint32_t GL_MAX_TEXTURE_UNITS = 0x84E2;
	static constexpr uint32_t GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84E3;
	static constexpr uint32_t GL_TRANSPOSE_PROJECTION_MATRIX = 0x84E4;
	static constexpr uint32_t GL_TRANSPOSE_TEXTURE_MATRIX = 0x84E5;
	static constexpr uint32_t GL_TRANSPOSE_COLOR_MATRIX = 0x84E6;
	static constexpr uint32_t GL_MULTISAMPLE_BIT = 0x20000000;
	static constexpr uint32_t GL_NORMAL_MAP = 0x8511;
	static constexpr uint32_t GL_REFLECTION_MAP = 0x8512;
	static constexpr uint32_t GL_COMPRESSED_ALPHA = 0x84E9;
	static constexpr uint32_t GL_COMPRESSED_LUMINANCE = 0x84EA;
	static constexpr uint32_t GL_COMPRESSED_LUMINANCE_ALPHA = 0x84EB;
	static constexpr uint32_t GL_COMPRESSED_INTENSITY = 0x84EC;
	static constexpr uint32_t GL_COMBINE = 0x8570;
	static constexpr uint32_t GL_COMBINE_RGB = 0x8571;
	static constexpr uint32_t GL_COMBINE_ALPHA = 0x8572;
	static constexpr uint32_t GL_SOURCE0_RGB = 0x8580;
	static constexpr uint32_t GL_SOURCE1_RGB = 0x8581;
	static constexpr uint32_t GL_SOURCE2_RGB = 0x8582;
	static constexpr uint32_t GL_SOURCE0_ALPHA = 0x8588;
	static constexpr uint32_t GL_SOURCE1_ALPHA = 0x8589;
	static constexpr uint32_t GL_SOURCE2_ALPHA = 0x858A;
	static constexpr uint32_t GL_OPERAND0_RGB = 0x8590;
	static constexpr uint32_t GL_OPERAND1_RGB = 0x8591;
	static constexpr uint32_t GL_OPERAND2_RGB = 0x8592;
	static constexpr uint32_t GL_OPERAND0_ALPHA = 0x8598;
	static constexpr uint32_t GL_OPERAND1_ALPHA = 0x8599;
	static constexpr uint32_t GL_OPERAND2_ALPHA = 0x859A;
	static constexpr uint32_t GL_RGB_SCALE = 0x8573;
	static constexpr uint32_t GL_ADD_SIGNED = 0x8574;
	static constexpr uint32_t GL_INTERPOLATE = 0x8575;
	static constexpr uint32_t GL_SUBTRACT = 0x84E7;
	static constexpr uint32_t GL_CONSTANT = 0x8576;
	static constexpr uint32_t GL_PRIMARY_COLOR = 0x8577;
	static constexpr uint32_t GL_PREVIOUS = 0x8578;
	static constexpr uint32_t GL_DOT3_RGB = 0x86AE;
	static constexpr uint32_t GL_DOT3_RGBA = 0x86AF;
#	ifdef FOGL_STATIC
	typedef void (FOGL_APIENTRY gl_active_texture_func)(GLenum texture);
	FOGL_STATIC gl_active_texture_func* glActiveTexture;
	typedef void (FOGL_APIENTRY gl_sample_coverage_func)(GLfloat value, GLboolean invert);
	FOGL_STATIC gl_sample_coverage_func* glSampleCoverage;
	typedef void (FOGL_APIENTRY gl_compressed_tex_image3d_func)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
	FOGL_STATIC gl_compressed_tex_image3d_func* glCompressedTexImage3D;
	typedef void (FOGL_APIENTRY gl_compressed_tex_image2d_func)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
	FOGL_STATIC gl_compressed_tex_image2d_func* glCompressedTexImage2D;
	typedef void (FOGL_APIENTRY gl_compressed_tex_image1d_func)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
	FOGL_STATIC gl_compressed_tex_image1d_func* glCompressedTexImage1D;
	typedef void (FOGL_APIENTRY gl_compressed_tex_sub_image3d_func)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
	FOGL_STATIC gl_compressed_tex_sub_image3d_func* glCompressedTexSubImage3D;
	typedef void (FOGL_APIENTRY gl_compressed_tex_sub_image2d_func)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
	FOGL_STATIC gl_compressed_tex_sub_image2d_func* glCompressedTexSubImage2D;
	typedef void (FOGL_APIENTRY gl_compressed_tex_sub_image1d_func)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
	FOGL_STATIC gl_compressed_tex_sub_image1d_func* glCompressedTexSubImage1D;
	typedef void (FOGL_APIENTRY gl_get_compressed_tex_image_func)(GLenum target, GLint level, void *img);
	FOGL_STATIC gl_get_compressed_tex_image_func* glGetCompressedTexImage;
	typedef void (FOGL_APIENTRY gl_client_active_texture_func)(GLenum texture);
	FOGL_STATIC gl_client_active_texture_func* glClientActiveTexture;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord1d_func)(GLenum target, GLdouble s);
	FOGL_STATIC gl_multi_tex_coord1d_func* glMultiTexCoord1d;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord1dv_func)(GLenum target, const GLdouble *v);
	FOGL_STATIC gl_multi_tex_coord1dv_func* glMultiTexCoord1dv;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord1f_func)(GLenum target, GLfloat s);
	FOGL_STATIC gl_multi_tex_coord1f_func* glMultiTexCoord1f;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord1fv_func)(GLenum target, const GLfloat *v);
	FOGL_STATIC gl_multi_tex_coord1fv_func* glMultiTexCoord1fv;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord1i_func)(GLenum target, GLint s);
	FOGL_STATIC gl_multi_tex_coord1i_func* glMultiTexCoord1i;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord1iv_func)(GLenum target, const GLint *v);
	FOGL_STATIC gl_multi_tex_coord1iv_func* glMultiTexCoord1iv;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord1s_func)(GLenum target, GLshort s);
	FOGL_STATIC gl_multi_tex_coord1s_func* glMultiTexCoord1s;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord1sv_func)(GLenum target, const GLshort *v);
	FOGL_STATIC gl_multi_tex_coord1sv_func* glMultiTexCoord1sv;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord2d_func)(GLenum target, GLdouble s, GLdouble t);
	FOGL_STATIC gl_multi_tex_coord2d_func* glMultiTexCoord2d;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord2dv_func)(GLenum target, const GLdouble *v);
	FOGL_STATIC gl_multi_tex_coord2dv_func* glMultiTexCoord2dv;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord2f_func)(GLenum target, GLfloat s, GLfloat t);
	FOGL_STATIC gl_multi_tex_coord2f_func* glMultiTexCoord2f;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord2fv_func)(GLenum target, const GLfloat *v);
	FOGL_STATIC gl_multi_tex_coord2fv_func* glMultiTexCoord2fv;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord2i_func)(GLenum target, GLint s, GLint t);
	FOGL_STATIC gl_multi_tex_coord2i_func* glMultiTexCoord2i;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord2iv_func)(GLenum target, const GLint *v);
	FOGL_STATIC gl_multi_tex_coord2iv_func* glMultiTexCoord2iv;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord2s_func)(GLenum target, GLshort s, GLshort t);
	FOGL_STATIC gl_multi_tex_coord2s_func* glMultiTexCoord2s;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord2sv_func)(GLenum target, const GLshort *v);
	FOGL_STATIC gl_multi_tex_coord2sv_func* glMultiTexCoord2sv;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord3d_func)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
	FOGL_STATIC gl_multi_tex_coord3d_func* glMultiTexCoord3d;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord3dv_func)(GLenum target, const GLdouble *v);
	FOGL_STATIC gl_multi_tex_coord3dv_func* glMultiTexCoord3dv;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord3f_func)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
	FOGL_STATIC gl_multi_tex_coord3f_func* glMultiTexCoord3f;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord3fv_func)(GLenum target, const GLfloat *v);
	FOGL_STATIC gl_multi_tex_coord3fv_func* glMultiTexCoord3fv;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord3i_func)(GLenum target, GLint s, GLint t, GLint r);
	FOGL_STATIC gl_multi_tex_coord3i_func* glMultiTexCoord3i;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord3iv_func)(GLenum target, const GLint *v);
	FOGL_STATIC gl_multi_tex_coord3iv_func* glMultiTexCoord3iv;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord3s_func)(GLenum target, GLshort s, GLshort t, GLshort r);
	FOGL_STATIC gl_multi_tex_coord3s_func* glMultiTexCoord3s;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord3sv_func)(GLenum target, const GLshort *v);
	FOGL_STATIC gl_multi_tex_coord3sv_func* glMultiTexCoord3sv;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord4d_func)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
	FOGL_STATIC gl_multi_tex_coord4d_func* glMultiTexCoord4d;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord4dv_func)(GLenum target, const GLdouble *v);
	FOGL_STATIC gl_multi_tex_coord4dv_func* glMultiTexCoord4dv;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord4f_func)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
	FOGL_STATIC gl_multi_tex_coord4f_func* glMultiTexCoord4f;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord4fv_func)(GLenum target, const GLfloat *v);
	FOGL_STATIC gl_multi_tex_coord4fv_func* glMultiTexCoord4fv;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord4i_func)(GLenum target, GLint s, GLint t, GLint r, GLint q);
	FOGL_STATIC gl_multi_tex_coord4i_func* glMultiTexCoord4i;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord4iv_func)(GLenum target, const GLint *v);
	FOGL_STATIC gl_multi_tex_coord4iv_func* glMultiTexCoord4iv;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord4s_func)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
	FOGL_STATIC gl_multi_tex_coord4s_func* glMultiTexCoord4s;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord4sv_func)(GLenum target, const GLshort *v);
	FOGL_STATIC gl_multi_tex_coord4sv_func* glMultiTexCoord4sv;
	typedef void (FOGL_APIENTRY gl_load_transpose_matrixf_func)(const GLfloat *m);
	FOGL_STATIC gl_load_transpose_matrixf_func* glLoadTransposeMatrixf;
	typedef void (FOGL_APIENTRY gl_load_transpose_matrixd_func)(const GLdouble *m);
	FOGL_STATIC gl_load_transpose_matrixd_func* glLoadTransposeMatrixd;
	typedef void (FOGL_APIENTRY gl_mult_transpose_matrixf_func)(const GLfloat *m);
	FOGL_STATIC gl_mult_transpose_matrixf_func* glMultTransposeMatrixf;
	typedef void (FOGL_APIENTRY gl_mult_transpose_matrixd_func)(const GLdouble *m);
	FOGL_STATIC gl_mult_transpose_matrixd_func* glMultTransposeMatrixd;
#	else
	FOGL_GLAPI void FOGL_APIENTRY glActiveTexture(GLenum texture);
	FOGL_GLAPI void FOGL_APIENTRY glSampleCoverage(GLfloat value, GLboolean invert);
	FOGL_GLAPI void FOGL_APIENTRY glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
	FOGL_GLAPI void FOGL_APIENTRY glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
	FOGL_GLAPI void FOGL_APIENTRY glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
	FOGL_GLAPI void FOGL_APIENTRY glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
	FOGL_GLAPI void FOGL_APIENTRY glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
	FOGL_GLAPI void FOGL_APIENTRY glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
	FOGL_GLAPI void FOGL_APIENTRY glGetCompressedTexImage(GLenum target, GLint level, void *img);
	FOGL_GLAPI void FOGL_APIENTRY glClientActiveTexture(GLenum texture);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoord1d(GLenum target, GLdouble s);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoord1dv(GLenum target, const GLdouble *v);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoord1f(GLenum target, GLfloat s);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoord1fv(GLenum target, const GLfloat *v);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoord1i(GLenum target, GLint s);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoord1iv(GLenum target, const GLint *v);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoord1s(GLenum target, GLshort s);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoord1sv(GLenum target, const GLshort *v);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoord2dv(GLenum target, const GLdouble *v);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoord2fv(GLenum target, const GLfloat *v);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoord2i(GLenum target, GLint s, GLint t);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoord2iv(GLenum target, const GLint *v);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoord2s(GLenum target, GLshort s, GLshort t);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoord2sv(GLenum target, const GLshort *v);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoord3dv(GLenum target, const GLdouble *v);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoord3fv(GLenum target, const GLfloat *v);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoord3iv(GLenum target, const GLint *v);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoord3sv(GLenum target, const GLshort *v);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoord4dv(GLenum target, const GLdouble *v);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoord4fv(GLenum target, const GLfloat *v);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoord4iv(GLenum target, const GLint *v);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoord4sv(GLenum target, const GLshort *v);
	FOGL_GLAPI void FOGL_APIENTRY glLoadTransposeMatrixf(const GLfloat *m);
	FOGL_GLAPI void FOGL_APIENTRY glLoadTransposeMatrixd(const GLdouble *m);
	FOGL_GLAPI void FOGL_APIENTRY glMultTransposeMatrixf(const GLfloat *m);
	FOGL_GLAPI void FOGL_APIENTRY glMultTransposeMatrixd(const GLdouble *m);
#	endif // FOGL_STATIC
#endif // GL_VERSION_1_3
#ifndef GL_VERSION_1_4
#	define GL_VERSION_1_4 1
	static constexpr uint32_t GL_BLEND_DST_RGB = 0x80C8;
	static constexpr uint32_t GL_BLEND_SRC_RGB = 0x80C9;
	static constexpr uint32_t GL_BLEND_DST_ALPHA = 0x80CA;
	static constexpr uint32_t GL_BLEND_SRC_ALPHA = 0x80CB;
	static constexpr uint32_t GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
	static constexpr uint32_t GL_DEPTH_COMPONENT16 = 0x81A5;
	static constexpr uint32_t GL_DEPTH_COMPONENT24 = 0x81A6;
	static constexpr uint32_t GL_DEPTH_COMPONENT32 = 0x81A7;
	static constexpr uint32_t GL_MIRRORED_REPEAT = 0x8370;
	static constexpr uint32_t GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
	static constexpr uint32_t GL_TEXTURE_LOD_BIAS = 0x8501;
	static constexpr uint32_t GL_INCR_WRAP = 0x8507;
	static constexpr uint32_t GL_DECR_WRAP = 0x8508;
	static constexpr uint32_t GL_TEXTURE_DEPTH_SIZE = 0x884A;
	static constexpr uint32_t GL_TEXTURE_COMPARE_MODE = 0x884C;
	static constexpr uint32_t GL_TEXTURE_COMPARE_FUNC = 0x884D;
	static constexpr uint32_t GL_POINT_SIZE_MIN = 0x8126;
	static constexpr uint32_t GL_POINT_SIZE_MAX = 0x8127;
	static constexpr uint32_t GL_POINT_DISTANCE_ATTENUATION = 0x8129;
	static constexpr uint32_t GL_GENERATE_MIPMAP = 0x8191;
	static constexpr uint32_t GL_GENERATE_MIPMAP_HINT = 0x8192;
	static constexpr uint32_t GL_FOG_COORDINATE_SOURCE = 0x8450;
	static constexpr uint32_t GL_FOG_COORDINATE = 0x8451;
	static constexpr uint32_t GL_FRAGMENT_DEPTH = 0x8452;
	static constexpr uint32_t GL_CURRENT_FOG_COORDINATE = 0x8453;
	static constexpr uint32_t GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454;
	static constexpr uint32_t GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455;
	static constexpr uint32_t GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456;
	static constexpr uint32_t GL_FOG_COORDINATE_ARRAY = 0x8457;
	static constexpr uint32_t GL_COLOR_SUM = 0x8458;
	static constexpr uint32_t GL_CURRENT_SECONDARY_COLOR = 0x8459;
	static constexpr uint32_t GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845A;
	static constexpr uint32_t GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845B;
	static constexpr uint32_t GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845C;
	static constexpr uint32_t GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845D;
	static constexpr uint32_t GL_SECONDARY_COLOR_ARRAY = 0x845E;
	static constexpr uint32_t GL_TEXTURE_FILTER_CONTROL = 0x8500;
	static constexpr uint32_t GL_DEPTH_TEXTURE_MODE = 0x884B;
	static constexpr uint32_t GL_COMPARE_R_TO_TEXTURE = 0x884E;
	static constexpr uint32_t GL_FUNC_ADD = 0x8006;
	static constexpr uint32_t GL_FUNC_SUBTRACT = 0x800A;
	static constexpr uint32_t GL_FUNC_REVERSE_SUBTRACT = 0x800B;
	static constexpr uint32_t GL_MIN = 0x8007;
	static constexpr uint32_t GL_MAX = 0x8008;
	static constexpr uint32_t GL_CONSTANT_COLOR = 0x8001;
	static constexpr uint32_t GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
	static constexpr uint32_t GL_CONSTANT_ALPHA = 0x8003;
	static constexpr uint32_t GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
#	ifdef FOGL_STATIC
	typedef void (FOGL_APIENTRY gl_blend_func_separate_func)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
	FOGL_STATIC gl_blend_func_separate_func* glBlendFuncSeparate;
	typedef void (FOGL_APIENTRY gl_multi_draw_arrays_func)(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
	FOGL_STATIC gl_multi_draw_arrays_func* glMultiDrawArrays;
	typedef void (FOGL_APIENTRY gl_multi_draw_elements_func)(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount);
	FOGL_STATIC gl_multi_draw_elements_func* glMultiDrawElements;
	typedef void (FOGL_APIENTRY gl_point_parameterf_func)(GLenum pname, GLfloat param);
	FOGL_STATIC gl_point_parameterf_func* glPointParameterf;
	typedef void (FOGL_APIENTRY gl_point_parameterfv_func)(GLenum pname, const GLfloat *params);
	FOGL_STATIC gl_point_parameterfv_func* glPointParameterfv;
	typedef void (FOGL_APIENTRY gl_point_parameteri_func)(GLenum pname, GLint param);
	FOGL_STATIC gl_point_parameteri_func* glPointParameteri;
	typedef void (FOGL_APIENTRY gl_point_parameteriv_func)(GLenum pname, const GLint *params);
	FOGL_STATIC gl_point_parameteriv_func* glPointParameteriv;
	typedef void (FOGL_APIENTRY gl_fog_coordf_func)(GLfloat coord);
	FOGL_STATIC gl_fog_coordf_func* glFogCoordf;
	typedef void (FOGL_APIENTRY gl_fog_coordfv_func)(const GLfloat *coord);
	FOGL_STATIC gl_fog_coordfv_func* glFogCoordfv;
	typedef void (FOGL_APIENTRY gl_fog_coordd_func)(GLdouble coord);
	FOGL_STATIC gl_fog_coordd_func* glFogCoordd;
	typedef void (FOGL_APIENTRY gl_fog_coorddv_func)(const GLdouble *coord);
	FOGL_STATIC gl_fog_coorddv_func* glFogCoorddv;
	typedef void (FOGL_APIENTRY gl_fog_coord_pointer_func)(GLenum type, GLsizei stride, const void *pointer);
	FOGL_STATIC gl_fog_coord_pointer_func* glFogCoordPointer;
	typedef void (FOGL_APIENTRY gl_secondary_color3b_func)(GLbyte red, GLbyte green, GLbyte blue);
	FOGL_STATIC gl_secondary_color3b_func* glSecondaryColor3b;
	typedef void (FOGL_APIENTRY gl_secondary_color3bv_func)(const GLbyte *v);
	FOGL_STATIC gl_secondary_color3bv_func* glSecondaryColor3bv;
	typedef void (FOGL_APIENTRY gl_secondary_color3d_func)(GLdouble red, GLdouble green, GLdouble blue);
	FOGL_STATIC gl_secondary_color3d_func* glSecondaryColor3d;
	typedef void (FOGL_APIENTRY gl_secondary_color3dv_func)(const GLdouble *v);
	FOGL_STATIC gl_secondary_color3dv_func* glSecondaryColor3dv;
	typedef void (FOGL_APIENTRY gl_secondary_color3f_func)(GLfloat red, GLfloat green, GLfloat blue);
	FOGL_STATIC gl_secondary_color3f_func* glSecondaryColor3f;
	typedef void (FOGL_APIENTRY gl_secondary_color3fv_func)(const GLfloat *v);
	FOGL_STATIC gl_secondary_color3fv_func* glSecondaryColor3fv;
	typedef void (FOGL_APIENTRY gl_secondary_color3i_func)(GLint red, GLint green, GLint blue);
	FOGL_STATIC gl_secondary_color3i_func* glSecondaryColor3i;
	typedef void (FOGL_APIENTRY gl_secondary_color3iv_func)(const GLint *v);
	FOGL_STATIC gl_secondary_color3iv_func* glSecondaryColor3iv;
	typedef void (FOGL_APIENTRY gl_secondary_color3s_func)(GLshort red, GLshort green, GLshort blue);
	FOGL_STATIC gl_secondary_color3s_func* glSecondaryColor3s;
	typedef void (FOGL_APIENTRY gl_secondary_color3sv_func)(const GLshort *v);
	FOGL_STATIC gl_secondary_color3sv_func* glSecondaryColor3sv;
	typedef void (FOGL_APIENTRY gl_secondary_color3ub_func)(GLubyte red, GLubyte green, GLubyte blue);
	FOGL_STATIC gl_secondary_color3ub_func* glSecondaryColor3ub;
	typedef void (FOGL_APIENTRY gl_secondary_color3ubv_func)(const GLubyte *v);
	FOGL_STATIC gl_secondary_color3ubv_func* glSecondaryColor3ubv;
	typedef void (FOGL_APIENTRY gl_secondary_color3ui_func)(GLuint red, GLuint green, GLuint blue);
	FOGL_STATIC gl_secondary_color3ui_func* glSecondaryColor3ui;
	typedef void (FOGL_APIENTRY gl_secondary_color3uiv_func)(const GLuint *v);
	FOGL_STATIC gl_secondary_color3uiv_func* glSecondaryColor3uiv;
	typedef void (FOGL_APIENTRY gl_secondary_color3us_func)(GLushort red, GLushort green, GLushort blue);
	FOGL_STATIC gl_secondary_color3us_func* glSecondaryColor3us;
	typedef void (FOGL_APIENTRY gl_secondary_color3usv_func)(const GLushort *v);
	FOGL_STATIC gl_secondary_color3usv_func* glSecondaryColor3usv;
	typedef void (FOGL_APIENTRY gl_secondary_color_pointer_func)(GLint size, GLenum type, GLsizei stride, const void *pointer);
	FOGL_STATIC gl_secondary_color_pointer_func* glSecondaryColorPointer;
	typedef void (FOGL_APIENTRY gl_window_pos2d_func)(GLdouble x, GLdouble y);
	FOGL_STATIC gl_window_pos2d_func* glWindowPos2d;
	typedef void (FOGL_APIENTRY gl_window_pos2dv_func)(const GLdouble *v);
	FOGL_STATIC gl_window_pos2dv_func* glWindowPos2dv;
	typedef void (FOGL_APIENTRY gl_window_pos2f_func)(GLfloat x, GLfloat y);
	FOGL_STATIC gl_window_pos2f_func* glWindowPos2f;
	typedef void (FOGL_APIENTRY gl_window_pos2fv_func)(const GLfloat *v);
	FOGL_STATIC gl_window_pos2fv_func* glWindowPos2fv;
	typedef void (FOGL_APIENTRY gl_window_pos2i_func)(GLint x, GLint y);
	FOGL_STATIC gl_window_pos2i_func* glWindowPos2i;
	typedef void (FOGL_APIENTRY gl_window_pos2iv_func)(const GLint *v);
	FOGL_STATIC gl_window_pos2iv_func* glWindowPos2iv;
	typedef void (FOGL_APIENTRY gl_window_pos2s_func)(GLshort x, GLshort y);
	FOGL_STATIC gl_window_pos2s_func* glWindowPos2s;
	typedef void (FOGL_APIENTRY gl_window_pos2sv_func)(const GLshort *v);
	FOGL_STATIC gl_window_pos2sv_func* glWindowPos2sv;
	typedef void (FOGL_APIENTRY gl_window_pos3d_func)(GLdouble x, GLdouble y, GLdouble z);
	FOGL_STATIC gl_window_pos3d_func* glWindowPos3d;
	typedef void (FOGL_APIENTRY gl_window_pos3dv_func)(const GLdouble *v);
	FOGL_STATIC gl_window_pos3dv_func* glWindowPos3dv;
	typedef void (FOGL_APIENTRY gl_window_pos3f_func)(GLfloat x, GLfloat y, GLfloat z);
	FOGL_STATIC gl_window_pos3f_func* glWindowPos3f;
	typedef void (FOGL_APIENTRY gl_window_pos3fv_func)(const GLfloat *v);
	FOGL_STATIC gl_window_pos3fv_func* glWindowPos3fv;
	typedef void (FOGL_APIENTRY gl_window_pos3i_func)(GLint x, GLint y, GLint z);
	FOGL_STATIC gl_window_pos3i_func* glWindowPos3i;
	typedef void (FOGL_APIENTRY gl_window_pos3iv_func)(const GLint *v);
	FOGL_STATIC gl_window_pos3iv_func* glWindowPos3iv;
	typedef void (FOGL_APIENTRY gl_window_pos3s_func)(GLshort x, GLshort y, GLshort z);
	FOGL_STATIC gl_window_pos3s_func* glWindowPos3s;
	typedef void (FOGL_APIENTRY gl_window_pos3sv_func)(const GLshort *v);
	FOGL_STATIC gl_window_pos3sv_func* glWindowPos3sv;
	typedef void (FOGL_APIENTRY gl_blend_color_func)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
	FOGL_STATIC gl_blend_color_func* glBlendColor;
	typedef void (FOGL_APIENTRY gl_blend_equation_func)(GLenum mode);
	FOGL_STATIC gl_blend_equation_func* glBlendEquation;
#	else
	FOGL_GLAPI void FOGL_APIENTRY glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
	FOGL_GLAPI void FOGL_APIENTRY glMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
	FOGL_GLAPI void FOGL_APIENTRY glMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount);
	FOGL_GLAPI void FOGL_APIENTRY glPointParameterf(GLenum pname, GLfloat param);
	FOGL_GLAPI void FOGL_APIENTRY glPointParameterfv(GLenum pname, const GLfloat *params);
	FOGL_GLAPI void FOGL_APIENTRY glPointParameteri(GLenum pname, GLint param);
	FOGL_GLAPI void FOGL_APIENTRY glPointParameteriv(GLenum pname, const GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glFogCoordf(GLfloat coord);
	FOGL_GLAPI void FOGL_APIENTRY glFogCoordfv(const GLfloat *coord);
	FOGL_GLAPI void FOGL_APIENTRY glFogCoordd(GLdouble coord);
	FOGL_GLAPI void FOGL_APIENTRY glFogCoorddv(const GLdouble *coord);
	FOGL_GLAPI void FOGL_APIENTRY glFogCoordPointer(GLenum type, GLsizei stride, const void *pointer);
	FOGL_GLAPI void FOGL_APIENTRY glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue);
	FOGL_GLAPI void FOGL_APIENTRY glSecondaryColor3bv(const GLbyte *v);
	FOGL_GLAPI void FOGL_APIENTRY glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue);
	FOGL_GLAPI void FOGL_APIENTRY glSecondaryColor3dv(const GLdouble *v);
	FOGL_GLAPI void FOGL_APIENTRY glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue);
	FOGL_GLAPI void FOGL_APIENTRY glSecondaryColor3fv(const GLfloat *v);
	FOGL_GLAPI void FOGL_APIENTRY glSecondaryColor3i(GLint red, GLint green, GLint blue);
	FOGL_GLAPI void FOGL_APIENTRY glSecondaryColor3iv(const GLint *v);
	FOGL_GLAPI void FOGL_APIENTRY glSecondaryColor3s(GLshort red, GLshort green, GLshort blue);
	FOGL_GLAPI void FOGL_APIENTRY glSecondaryColor3sv(const GLshort *v);
	FOGL_GLAPI void FOGL_APIENTRY glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue);
	FOGL_GLAPI void FOGL_APIENTRY glSecondaryColor3ubv(const GLubyte *v);
	FOGL_GLAPI void FOGL_APIENTRY glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue);
	FOGL_GLAPI void FOGL_APIENTRY glSecondaryColor3uiv(const GLuint *v);
	FOGL_GLAPI void FOGL_APIENTRY glSecondaryColor3us(GLushort red, GLushort green, GLushort blue);
	FOGL_GLAPI void FOGL_APIENTRY glSecondaryColor3usv(const GLushort *v);
	FOGL_GLAPI void FOGL_APIENTRY glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const void *pointer);
	FOGL_GLAPI void FOGL_APIENTRY glWindowPos2d(GLdouble x, GLdouble y);
	FOGL_GLAPI void FOGL_APIENTRY glWindowPos2dv(const GLdouble *v);
	FOGL_GLAPI void FOGL_APIENTRY glWindowPos2f(GLfloat x, GLfloat y);
	FOGL_GLAPI void FOGL_APIENTRY glWindowPos2fv(const GLfloat *v);
	FOGL_GLAPI void FOGL_APIENTRY glWindowPos2i(GLint x, GLint y);
	FOGL_GLAPI void FOGL_APIENTRY glWindowPos2iv(const GLint *v);
	FOGL_GLAPI void FOGL_APIENTRY glWindowPos2s(GLshort x, GLshort y);
	FOGL_GLAPI void FOGL_APIENTRY glWindowPos2sv(const GLshort *v);
	FOGL_GLAPI void FOGL_APIENTRY glWindowPos3d(GLdouble x, GLdouble y, GLdouble z);
	FOGL_GLAPI void FOGL_APIENTRY glWindowPos3dv(const GLdouble *v);
	FOGL_GLAPI void FOGL_APIENTRY glWindowPos3f(GLfloat x, GLfloat y, GLfloat z);
	FOGL_GLAPI void FOGL_APIENTRY glWindowPos3fv(const GLfloat *v);
	FOGL_GLAPI void FOGL_APIENTRY glWindowPos3i(GLint x, GLint y, GLint z);
	FOGL_GLAPI void FOGL_APIENTRY glWindowPos3iv(const GLint *v);
	FOGL_GLAPI void FOGL_APIENTRY glWindowPos3s(GLshort x, GLshort y, GLshort z);
	FOGL_GLAPI void FOGL_APIENTRY glWindowPos3sv(const GLshort *v);
	FOGL_GLAPI void FOGL_APIENTRY glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
	FOGL_GLAPI void FOGL_APIENTRY glBlendEquation(GLenum mode);
#	endif // FOGL_STATIC
#endif // GL_VERSION_1_4
#ifndef GL_VERSION_1_5
#	define GL_VERSION_1_5 1
	typedef ptrdiff_t GLsizeiptr;
	typedef ptrdiff_t GLintptr;
	static constexpr uint32_t GL_BUFFER_SIZE = 0x8764;
	static constexpr uint32_t GL_BUFFER_USAGE = 0x8765;
	static constexpr uint32_t GL_QUERY_COUNTER_BITS = 0x8864;
	static constexpr uint32_t GL_CURRENT_QUERY = 0x8865;
	static constexpr uint32_t GL_QUERY_RESULT = 0x8866;
	static constexpr uint32_t GL_QUERY_RESULT_AVAILABLE = 0x8867;
	static constexpr uint32_t GL_ARRAY_BUFFER = 0x8892;
	static constexpr uint32_t GL_ELEMENT_ARRAY_BUFFER = 0x8893;
	static constexpr uint32_t GL_ARRAY_BUFFER_BINDING = 0x8894;
	static constexpr uint32_t GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
	static constexpr uint32_t GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
	static constexpr uint32_t GL_READ_ONLY = 0x88B8;
	static constexpr uint32_t GL_WRITE_ONLY = 0x88B9;
	static constexpr uint32_t GL_READ_WRITE = 0x88BA;
	static constexpr uint32_t GL_BUFFER_ACCESS = 0x88BB;
	static constexpr uint32_t GL_BUFFER_MAPPED = 0x88BC;
	static constexpr uint32_t GL_BUFFER_MAP_POINTER = 0x88BD;
	static constexpr uint32_t GL_STREAM_DRAW = 0x88E0;
	static constexpr uint32_t GL_STREAM_READ = 0x88E1;
	static constexpr uint32_t GL_STREAM_COPY = 0x88E2;
	static constexpr uint32_t GL_STATIC_DRAW = 0x88E4;
	static constexpr uint32_t GL_STATIC_READ = 0x88E5;
	static constexpr uint32_t GL_STATIC_COPY = 0x88E6;
	static constexpr uint32_t GL_DYNAMIC_DRAW = 0x88E8;
	static constexpr uint32_t GL_DYNAMIC_READ = 0x88E9;
	static constexpr uint32_t GL_DYNAMIC_COPY = 0x88EA;
	static constexpr uint32_t GL_SAMPLES_PASSED = 0x8914;
	static constexpr uint32_t GL_SRC1_ALPHA = 0x8589;
	static constexpr uint32_t GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896;
	static constexpr uint32_t GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897;
	static constexpr uint32_t GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898;
	static constexpr uint32_t GL_INDEX_ARRAY_BUFFER_BINDING = 0x8899;
	static constexpr uint32_t GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A;
	static constexpr uint32_t GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B;
	static constexpr uint32_t GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C;
	static constexpr uint32_t GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D;
	static constexpr uint32_t GL_WEIGHT_ARRAY_BUFFER_BINDING = 0x889E;
	static constexpr uint32_t GL_FOG_COORD_SRC = 0x8450;
	static constexpr uint32_t GL_FOG_COORD = 0x8451;
	static constexpr uint32_t GL_CURRENT_FOG_COORD = 0x8453;
	static constexpr uint32_t GL_FOG_COORD_ARRAY_TYPE = 0x8454;
	static constexpr uint32_t GL_FOG_COORD_ARRAY_STRIDE = 0x8455;
	static constexpr uint32_t GL_FOG_COORD_ARRAY_POINTER = 0x8456;
	static constexpr uint32_t GL_FOG_COORD_ARRAY = 0x8457;
	static constexpr uint32_t GL_FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D;
	static constexpr uint32_t GL_SRC0_RGB = 0x8580;
	static constexpr uint32_t GL_SRC1_RGB = 0x8581;
	static constexpr uint32_t GL_SRC2_RGB = 0x8582;
	static constexpr uint32_t GL_SRC0_ALPHA = 0x8588;
	static constexpr uint32_t GL_SRC2_ALPHA = 0x858A;
#	ifdef FOGL_STATIC
	typedef void (FOGL_APIENTRY gl_gen_queries_func)(GLsizei n, GLuint *ids);
	FOGL_STATIC gl_gen_queries_func* glGenQueries;
	typedef void (FOGL_APIENTRY gl_delete_queries_func)(GLsizei n, const GLuint *ids);
	FOGL_STATIC gl_delete_queries_func* glDeleteQueries;
	typedef GLboolean(FOGL_APIENTRY gl_is_query_func)(GLuint id);
	FOGL_STATIC gl_is_query_func* glIsQuery;
	typedef void (FOGL_APIENTRY gl_begin_query_func)(GLenum target, GLuint id);
	FOGL_STATIC gl_begin_query_func* glBeginQuery;
	typedef void (FOGL_APIENTRY gl_end_query_func)(GLenum target);
	FOGL_STATIC gl_end_query_func* glEndQuery;
	typedef void (FOGL_APIENTRY gl_get_queryiv_func)(GLenum target, GLenum pname, GLint *params);
	FOGL_STATIC gl_get_queryiv_func* glGetQueryiv;
	typedef void (FOGL_APIENTRY gl_get_query_objectiv_func)(GLuint id, GLenum pname, GLint *params);
	FOGL_STATIC gl_get_query_objectiv_func* glGetQueryObjectiv;
	typedef void (FOGL_APIENTRY gl_get_query_objectuiv_func)(GLuint id, GLenum pname, GLuint *params);
	FOGL_STATIC gl_get_query_objectuiv_func* glGetQueryObjectuiv;
	typedef void (FOGL_APIENTRY gl_bind_buffer_func)(GLenum target, GLuint buffer);
	FOGL_STATIC gl_bind_buffer_func* glBindBuffer;
	typedef void (FOGL_APIENTRY gl_delete_buffers_func)(GLsizei n, const GLuint *buffers);
	FOGL_STATIC gl_delete_buffers_func* glDeleteBuffers;
	typedef void (FOGL_APIENTRY gl_gen_buffers_func)(GLsizei n, GLuint *buffers);
	FOGL_STATIC gl_gen_buffers_func* glGenBuffers;
	typedef GLboolean(FOGL_APIENTRY gl_is_buffer_func)(GLuint buffer);
	FOGL_STATIC gl_is_buffer_func* glIsBuffer;
	typedef void (FOGL_APIENTRY gl_buffer_data_func)(GLenum target, GLsizeiptr size, const void *data, GLenum usage);
	FOGL_STATIC gl_buffer_data_func* glBufferData;
	typedef void (FOGL_APIENTRY gl_buffer_sub_data_func)(GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
	FOGL_STATIC gl_buffer_sub_data_func* glBufferSubData;
	typedef void (FOGL_APIENTRY gl_get_buffer_sub_data_func)(GLenum target, GLintptr offset, GLsizeiptr size, void *data);
	FOGL_STATIC gl_get_buffer_sub_data_func* glGetBufferSubData;
	typedef void (FOGL_APIENTRY gl_map_buffer_func)(GLenum target, GLenum access);
	FOGL_STATIC gl_map_buffer_func* glMapBuffer;
	typedef GLboolean(FOGL_APIENTRY gl_unmap_buffer_func)(GLenum target);
	FOGL_STATIC gl_unmap_buffer_func* glUnmapBuffer;
	typedef void (FOGL_APIENTRY gl_get_buffer_parameteriv_func)(GLenum target, GLenum pname, GLint *params);
	FOGL_STATIC gl_get_buffer_parameteriv_func* glGetBufferParameteriv;
	typedef void (FOGL_APIENTRY gl_get_buffer_pointerv_func)(GLenum target, GLenum pname, void **params);
	FOGL_STATIC gl_get_buffer_pointerv_func* glGetBufferPointerv;
#	else
	FOGL_GLAPI void FOGL_APIENTRY glGenQueries(GLsizei n, GLuint *ids);
	FOGL_GLAPI void FOGL_APIENTRY glDeleteQueries(GLsizei n, const GLuint *ids);
	FOGL_GLAPI GLboolean FOGL_APIENTRY glIsQuery(GLuint id);
	FOGL_GLAPI void FOGL_APIENTRY glBeginQuery(GLenum target, GLuint id);
	FOGL_GLAPI void FOGL_APIENTRY glEndQuery(GLenum target);
	FOGL_GLAPI void FOGL_APIENTRY glGetQueryiv(GLenum target, GLenum pname, GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params);
	FOGL_GLAPI void FOGL_APIENTRY glBindBuffer(GLenum target, GLuint buffer);
	FOGL_GLAPI void FOGL_APIENTRY glDeleteBuffers(GLsizei n, const GLuint *buffers);
	FOGL_GLAPI void FOGL_APIENTRY glGenBuffers(GLsizei n, GLuint *buffers);
	FOGL_GLAPI GLboolean FOGL_APIENTRY glIsBuffer(GLuint buffer);
	FOGL_GLAPI void FOGL_APIENTRY glBufferData(GLenum target, GLsizeiptr size, const void *data, GLenum usage);
	FOGL_GLAPI void FOGL_APIENTRY glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
	FOGL_GLAPI void FOGL_APIENTRY glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void *data);
	FOGL_GLAPI void FOGL_APIENTRY glMapBuffer(GLenum target, GLenum access);
	FOGL_GLAPI GLboolean FOGL_APIENTRY glUnmapBuffer(GLenum target);
	FOGL_GLAPI void FOGL_APIENTRY glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetBufferPointerv(GLenum target, GLenum pname, void **params);
#	endif // FOGL_STATIC
#endif // GL_VERSION_1_5
#ifndef GL_VERSION_2_0
#	define GL_VERSION_2_0 1
	typedef char GLchar;
	static constexpr uint32_t GL_BLEND_EQUATION_RGB = 0x8009;
	static constexpr uint32_t GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
	static constexpr uint32_t GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
	static constexpr uint32_t GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
	static constexpr uint32_t GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
	static constexpr uint32_t GL_CURRENT_VERTEX_ATTRIB = 0x8626;
	static constexpr uint32_t GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
	static constexpr uint32_t GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
	static constexpr uint32_t GL_STENCIL_BACK_FUNC = 0x8800;
	static constexpr uint32_t GL_STENCIL_BACK_FAIL = 0x8801;
	static constexpr uint32_t GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
	static constexpr uint32_t GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
	static constexpr uint32_t GL_MAX_DRAW_BUFFERS = 0x8824;
	static constexpr uint32_t GL_DRAW_BUFFER0 = 0x8825;
	static constexpr uint32_t GL_DRAW_BUFFER1 = 0x8826;
	static constexpr uint32_t GL_DRAW_BUFFER2 = 0x8827;
	static constexpr uint32_t GL_DRAW_BUFFER3 = 0x8828;
	static constexpr uint32_t GL_DRAW_BUFFER4 = 0x8829;
	static constexpr uint32_t GL_DRAW_BUFFER5 = 0x882A;
	static constexpr uint32_t GL_DRAW_BUFFER6 = 0x882B;
	static constexpr uint32_t GL_DRAW_BUFFER7 = 0x882C;
	static constexpr uint32_t GL_DRAW_BUFFER8 = 0x882D;
	static constexpr uint32_t GL_DRAW_BUFFER9 = 0x882E;
	static constexpr uint32_t GL_DRAW_BUFFER10 = 0x882F;
	static constexpr uint32_t GL_DRAW_BUFFER11 = 0x8830;
	static constexpr uint32_t GL_DRAW_BUFFER12 = 0x8831;
	static constexpr uint32_t GL_DRAW_BUFFER13 = 0x8832;
	static constexpr uint32_t GL_DRAW_BUFFER14 = 0x8833;
	static constexpr uint32_t GL_DRAW_BUFFER15 = 0x8834;
	static constexpr uint32_t GL_BLEND_EQUATION_ALPHA = 0x883D;
	static constexpr uint32_t GL_MAX_VERTEX_ATTRIBS = 0x8869;
	static constexpr uint32_t GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
	static constexpr uint32_t GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
	static constexpr uint32_t GL_FRAGMENT_SHADER = 0x8B30;
	static constexpr uint32_t GL_VERTEX_SHADER = 0x8B31;
	static constexpr uint32_t GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
	static constexpr uint32_t GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
	static constexpr uint32_t GL_MAX_VARYING_FLOATS = 0x8B4B;
	static constexpr uint32_t GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
	static constexpr uint32_t GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
	static constexpr uint32_t GL_SHADER_TYPE = 0x8B4F;
	static constexpr uint32_t GL_FLOAT_VEC2 = 0x8B50;
	static constexpr uint32_t GL_FLOAT_VEC3 = 0x8B51;
	static constexpr uint32_t GL_FLOAT_VEC4 = 0x8B52;
	static constexpr uint32_t GL_INT_VEC2 = 0x8B53;
	static constexpr uint32_t GL_INT_VEC3 = 0x8B54;
	static constexpr uint32_t GL_INT_VEC4 = 0x8B55;
	static constexpr uint32_t GL_BOOL = 0x8B56;
	static constexpr uint32_t GL_BOOL_VEC2 = 0x8B57;
	static constexpr uint32_t GL_BOOL_VEC3 = 0x8B58;
	static constexpr uint32_t GL_BOOL_VEC4 = 0x8B59;
	static constexpr uint32_t GL_FLOAT_MAT2 = 0x8B5A;
	static constexpr uint32_t GL_FLOAT_MAT3 = 0x8B5B;
	static constexpr uint32_t GL_FLOAT_MAT4 = 0x8B5C;
	static constexpr uint32_t GL_SAMPLER_1D = 0x8B5D;
	static constexpr uint32_t GL_SAMPLER_2D = 0x8B5E;
	static constexpr uint32_t GL_SAMPLER_3D = 0x8B5F;
	static constexpr uint32_t GL_SAMPLER_CUBE = 0x8B60;
	static constexpr uint32_t GL_SAMPLER_1D_SHADOW = 0x8B61;
	static constexpr uint32_t GL_SAMPLER_2D_SHADOW = 0x8B62;
	static constexpr uint32_t GL_DELETE_STATUS = 0x8B80;
	static constexpr uint32_t GL_COMPILE_STATUS = 0x8B81;
	static constexpr uint32_t GL_LINK_STATUS = 0x8B82;
	static constexpr uint32_t GL_VALIDATE_STATUS = 0x8B83;
	static constexpr uint32_t GL_INFO_LOG_LENGTH = 0x8B84;
	static constexpr uint32_t GL_ATTACHED_SHADERS = 0x8B85;
	static constexpr uint32_t GL_ACTIVE_UNIFORMS = 0x8B86;
	static constexpr uint32_t GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
	static constexpr uint32_t GL_SHADER_SOURCE_LENGTH = 0x8B88;
	static constexpr uint32_t GL_ACTIVE_ATTRIBUTES = 0x8B89;
	static constexpr uint32_t GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
	static constexpr uint32_t GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
	static constexpr uint32_t GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
	static constexpr uint32_t GL_CURRENT_PROGRAM = 0x8B8D;
	static constexpr uint32_t GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
	static constexpr uint32_t GL_LOWER_LEFT = 0x8CA1;
	static constexpr uint32_t GL_UPPER_LEFT = 0x8CA2;
	static constexpr uint32_t GL_STENCIL_BACK_REF = 0x8CA3;
	static constexpr uint32_t GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
	static constexpr uint32_t GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
	static constexpr uint32_t GL_VERTEX_PROGRAM_TWO_SIDE = 0x8643;
	static constexpr uint32_t GL_POINT_SPRITE = 0x8861;
	static constexpr uint32_t GL_COORD_REPLACE = 0x8862;
	static constexpr uint32_t GL_MAX_TEXTURE_COORDS = 0x8871;
#	ifdef FOGL_STATIC
	typedef void (FOGL_APIENTRY gl_blend_equation_separate_func)(GLenum modeRGB, GLenum modeAlpha);
	FOGL_STATIC gl_blend_equation_separate_func* glBlendEquationSeparate;
	typedef void (FOGL_APIENTRY gl_draw_buffers_func)(GLsizei n, const GLenum *bufs);
	FOGL_STATIC gl_draw_buffers_func* glDrawBuffers;
	typedef void (FOGL_APIENTRY gl_stencil_op_separate_func)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
	FOGL_STATIC gl_stencil_op_separate_func* glStencilOpSeparate;
	typedef void (FOGL_APIENTRY gl_stencil_func_separate_func)(GLenum face, GLenum func, GLint ref, GLuint mask);
	FOGL_STATIC gl_stencil_func_separate_func* glStencilFuncSeparate;
	typedef void (FOGL_APIENTRY gl_stencil_mask_separate_func)(GLenum face, GLuint mask);
	FOGL_STATIC gl_stencil_mask_separate_func* glStencilMaskSeparate;
	typedef void (FOGL_APIENTRY gl_attach_shader_func)(GLuint program, GLuint shader);
	FOGL_STATIC gl_attach_shader_func* glAttachShader;
	typedef void (FOGL_APIENTRY gl_bind_attrib_location_func)(GLuint program, GLuint index, const GLchar *name);
	FOGL_STATIC gl_bind_attrib_location_func* glBindAttribLocation;
	typedef void (FOGL_APIENTRY gl_compile_shader_func)(GLuint shader);
	FOGL_STATIC gl_compile_shader_func* glCompileShader;
	typedef GLuint(FOGL_APIENTRY gl_create_program_func)(void);
	FOGL_STATIC gl_create_program_func* glCreateProgram;
	typedef GLuint(FOGL_APIENTRY gl_create_shader_func)(GLenum type);
	FOGL_STATIC gl_create_shader_func* glCreateShader;
	typedef void (FOGL_APIENTRY gl_delete_program_func)(GLuint program);
	FOGL_STATIC gl_delete_program_func* glDeleteProgram;
	typedef void (FOGL_APIENTRY gl_delete_shader_func)(GLuint shader);
	FOGL_STATIC gl_delete_shader_func* glDeleteShader;
	typedef void (FOGL_APIENTRY gl_detach_shader_func)(GLuint program, GLuint shader);
	FOGL_STATIC gl_detach_shader_func* glDetachShader;
	typedef void (FOGL_APIENTRY gl_disable_vertex_attrib_array_func)(GLuint index);
	FOGL_STATIC gl_disable_vertex_attrib_array_func* glDisableVertexAttribArray;
	typedef void (FOGL_APIENTRY gl_enable_vertex_attrib_array_func)(GLuint index);
	FOGL_STATIC gl_enable_vertex_attrib_array_func* glEnableVertexAttribArray;
	typedef void (FOGL_APIENTRY gl_get_active_attrib_func)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
	FOGL_STATIC gl_get_active_attrib_func* glGetActiveAttrib;
	typedef void (FOGL_APIENTRY gl_get_active_uniform_func)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
	FOGL_STATIC gl_get_active_uniform_func* glGetActiveUniform;
	typedef void (FOGL_APIENTRY gl_get_attached_shaders_func)(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
	FOGL_STATIC gl_get_attached_shaders_func* glGetAttachedShaders;
	typedef GLint(FOGL_APIENTRY gl_get_attrib_location_func)(GLuint program, const GLchar *name);
	FOGL_STATIC gl_get_attrib_location_func* glGetAttribLocation;
	typedef void (FOGL_APIENTRY gl_get_programiv_func)(GLuint program, GLenum pname, GLint *params);
	FOGL_STATIC gl_get_programiv_func* glGetProgramiv;
	typedef void (FOGL_APIENTRY gl_get_program_info_log_func)(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
	FOGL_STATIC gl_get_program_info_log_func* glGetProgramInfoLog;
	typedef void (FOGL_APIENTRY gl_get_shaderiv_func)(GLuint shader, GLenum pname, GLint *params);
	FOGL_STATIC gl_get_shaderiv_func* glGetShaderiv;
	typedef void (FOGL_APIENTRY gl_get_shader_info_log_func)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
	FOGL_STATIC gl_get_shader_info_log_func* glGetShaderInfoLog;
	typedef void (FOGL_APIENTRY gl_get_shader_source_func)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
	FOGL_STATIC gl_get_shader_source_func* glGetShaderSource;
	typedef GLint(FOGL_APIENTRY gl_get_uniform_location_func)(GLuint program, const GLchar *name);
	FOGL_STATIC gl_get_uniform_location_func* glGetUniformLocation;
	typedef void (FOGL_APIENTRY gl_get_uniformfv_func)(GLuint program, GLint location, GLfloat *params);
	FOGL_STATIC gl_get_uniformfv_func* glGetUniformfv;
	typedef void (FOGL_APIENTRY gl_get_uniformiv_func)(GLuint program, GLint location, GLint *params);
	FOGL_STATIC gl_get_uniformiv_func* glGetUniformiv;
	typedef void (FOGL_APIENTRY gl_get_vertex_attribdv_func)(GLuint index, GLenum pname, GLdouble *params);
	FOGL_STATIC gl_get_vertex_attribdv_func* glGetVertexAttribdv;
	typedef void (FOGL_APIENTRY gl_get_vertex_attribfv_func)(GLuint index, GLenum pname, GLfloat *params);
	FOGL_STATIC gl_get_vertex_attribfv_func* glGetVertexAttribfv;
	typedef void (FOGL_APIENTRY gl_get_vertex_attribiv_func)(GLuint index, GLenum pname, GLint *params);
	FOGL_STATIC gl_get_vertex_attribiv_func* glGetVertexAttribiv;
	typedef void (FOGL_APIENTRY gl_get_vertex_attrib_pointerv_func)(GLuint index, GLenum pname, void **pointer);
	FOGL_STATIC gl_get_vertex_attrib_pointerv_func* glGetVertexAttribPointerv;
	typedef GLboolean(FOGL_APIENTRY gl_is_program_func)(GLuint program);
	FOGL_STATIC gl_is_program_func* glIsProgram;
	typedef GLboolean(FOGL_APIENTRY gl_is_shader_func)(GLuint shader);
	FOGL_STATIC gl_is_shader_func* glIsShader;
	typedef void (FOGL_APIENTRY gl_link_program_func)(GLuint program);
	FOGL_STATIC gl_link_program_func* glLinkProgram;
	typedef void (FOGL_APIENTRY gl_shader_source_func)(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);
	FOGL_STATIC gl_shader_source_func* glShaderSource;
	typedef void (FOGL_APIENTRY gl_use_program_func)(GLuint program);
	FOGL_STATIC gl_use_program_func* glUseProgram;
	typedef void (FOGL_APIENTRY gl_uniform1f_func)(GLint location, GLfloat v0);
	FOGL_STATIC gl_uniform1f_func* glUniform1f;
	typedef void (FOGL_APIENTRY gl_uniform2f_func)(GLint location, GLfloat v0, GLfloat v1);
	FOGL_STATIC gl_uniform2f_func* glUniform2f;
	typedef void (FOGL_APIENTRY gl_uniform3f_func)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
	FOGL_STATIC gl_uniform3f_func* glUniform3f;
	typedef void (FOGL_APIENTRY gl_uniform4f_func)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
	FOGL_STATIC gl_uniform4f_func* glUniform4f;
	typedef void (FOGL_APIENTRY gl_uniform1i_func)(GLint location, GLint v0);
	FOGL_STATIC gl_uniform1i_func* glUniform1i;
	typedef void (FOGL_APIENTRY gl_uniform2i_func)(GLint location, GLint v0, GLint v1);
	FOGL_STATIC gl_uniform2i_func* glUniform2i;
	typedef void (FOGL_APIENTRY gl_uniform3i_func)(GLint location, GLint v0, GLint v1, GLint v2);
	FOGL_STATIC gl_uniform3i_func* glUniform3i;
	typedef void (FOGL_APIENTRY gl_uniform4i_func)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
	FOGL_STATIC gl_uniform4i_func* glUniform4i;
	typedef void (FOGL_APIENTRY gl_uniform1fv_func)(GLint location, GLsizei count, const GLfloat *value);
	FOGL_STATIC gl_uniform1fv_func* glUniform1fv;
	typedef void (FOGL_APIENTRY gl_uniform2fv_func)(GLint location, GLsizei count, const GLfloat *value);
	FOGL_STATIC gl_uniform2fv_func* glUniform2fv;
	typedef void (FOGL_APIENTRY gl_uniform3fv_func)(GLint location, GLsizei count, const GLfloat *value);
	FOGL_STATIC gl_uniform3fv_func* glUniform3fv;
	typedef void (FOGL_APIENTRY gl_uniform4fv_func)(GLint location, GLsizei count, const GLfloat *value);
	FOGL_STATIC gl_uniform4fv_func* glUniform4fv;
	typedef void (FOGL_APIENTRY gl_uniform1iv_func)(GLint location, GLsizei count, const GLint *value);
	FOGL_STATIC gl_uniform1iv_func* glUniform1iv;
	typedef void (FOGL_APIENTRY gl_uniform2iv_func)(GLint location, GLsizei count, const GLint *value);
	FOGL_STATIC gl_uniform2iv_func* glUniform2iv;
	typedef void (FOGL_APIENTRY gl_uniform3iv_func)(GLint location, GLsizei count, const GLint *value);
	FOGL_STATIC gl_uniform3iv_func* glUniform3iv;
	typedef void (FOGL_APIENTRY gl_uniform4iv_func)(GLint location, GLsizei count, const GLint *value);
	FOGL_STATIC gl_uniform4iv_func* glUniform4iv;
	typedef void (FOGL_APIENTRY gl_uniform_matrix2fv_func)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	FOGL_STATIC gl_uniform_matrix2fv_func* glUniformMatrix2fv;
	typedef void (FOGL_APIENTRY gl_uniform_matrix3fv_func)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	FOGL_STATIC gl_uniform_matrix3fv_func* glUniformMatrix3fv;
	typedef void (FOGL_APIENTRY gl_uniform_matrix4fv_func)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	FOGL_STATIC gl_uniform_matrix4fv_func* glUniformMatrix4fv;
	typedef void (FOGL_APIENTRY gl_validate_program_func)(GLuint program);
	FOGL_STATIC gl_validate_program_func* glValidateProgram;
	typedef void (FOGL_APIENTRY gl_vertex_attrib1d_func)(GLuint index, GLdouble x);
	FOGL_STATIC gl_vertex_attrib1d_func* glVertexAttrib1d;
	typedef void (FOGL_APIENTRY gl_vertex_attrib1dv_func)(GLuint index, const GLdouble *v);
	FOGL_STATIC gl_vertex_attrib1dv_func* glVertexAttrib1dv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib1f_func)(GLuint index, GLfloat x);
	FOGL_STATIC gl_vertex_attrib1f_func* glVertexAttrib1f;
	typedef void (FOGL_APIENTRY gl_vertex_attrib1fv_func)(GLuint index, const GLfloat *v);
	FOGL_STATIC gl_vertex_attrib1fv_func* glVertexAttrib1fv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib1s_func)(GLuint index, GLshort x);
	FOGL_STATIC gl_vertex_attrib1s_func* glVertexAttrib1s;
	typedef void (FOGL_APIENTRY gl_vertex_attrib1sv_func)(GLuint index, const GLshort *v);
	FOGL_STATIC gl_vertex_attrib1sv_func* glVertexAttrib1sv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib2d_func)(GLuint index, GLdouble x, GLdouble y);
	FOGL_STATIC gl_vertex_attrib2d_func* glVertexAttrib2d;
	typedef void (FOGL_APIENTRY gl_vertex_attrib2dv_func)(GLuint index, const GLdouble *v);
	FOGL_STATIC gl_vertex_attrib2dv_func* glVertexAttrib2dv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib2f_func)(GLuint index, GLfloat x, GLfloat y);
	FOGL_STATIC gl_vertex_attrib2f_func* glVertexAttrib2f;
	typedef void (FOGL_APIENTRY gl_vertex_attrib2fv_func)(GLuint index, const GLfloat *v);
	FOGL_STATIC gl_vertex_attrib2fv_func* glVertexAttrib2fv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib2s_func)(GLuint index, GLshort x, GLshort y);
	FOGL_STATIC gl_vertex_attrib2s_func* glVertexAttrib2s;
	typedef void (FOGL_APIENTRY gl_vertex_attrib2sv_func)(GLuint index, const GLshort *v);
	FOGL_STATIC gl_vertex_attrib2sv_func* glVertexAttrib2sv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib3d_func)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
	FOGL_STATIC gl_vertex_attrib3d_func* glVertexAttrib3d;
	typedef void (FOGL_APIENTRY gl_vertex_attrib3dv_func)(GLuint index, const GLdouble *v);
	FOGL_STATIC gl_vertex_attrib3dv_func* glVertexAttrib3dv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib3f_func)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
	FOGL_STATIC gl_vertex_attrib3f_func* glVertexAttrib3f;
	typedef void (FOGL_APIENTRY gl_vertex_attrib3fv_func)(GLuint index, const GLfloat *v);
	FOGL_STATIC gl_vertex_attrib3fv_func* glVertexAttrib3fv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib3s_func)(GLuint index, GLshort x, GLshort y, GLshort z);
	FOGL_STATIC gl_vertex_attrib3s_func* glVertexAttrib3s;
	typedef void (FOGL_APIENTRY gl_vertex_attrib3sv_func)(GLuint index, const GLshort *v);
	FOGL_STATIC gl_vertex_attrib3sv_func* glVertexAttrib3sv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib4_nbv_func)(GLuint index, const GLbyte *v);
	FOGL_STATIC gl_vertex_attrib4_nbv_func* glVertexAttrib4Nbv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib4_niv_func)(GLuint index, const GLint *v);
	FOGL_STATIC gl_vertex_attrib4_niv_func* glVertexAttrib4Niv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib4_nsv_func)(GLuint index, const GLshort *v);
	FOGL_STATIC gl_vertex_attrib4_nsv_func* glVertexAttrib4Nsv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib4_nub_func)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
	FOGL_STATIC gl_vertex_attrib4_nub_func* glVertexAttrib4Nub;
	typedef void (FOGL_APIENTRY gl_vertex_attrib4_nubv_func)(GLuint index, const GLubyte *v);
	FOGL_STATIC gl_vertex_attrib4_nubv_func* glVertexAttrib4Nubv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib4_nuiv_func)(GLuint index, const GLuint *v);
	FOGL_STATIC gl_vertex_attrib4_nuiv_func* glVertexAttrib4Nuiv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib4_nusv_func)(GLuint index, const GLushort *v);
	FOGL_STATIC gl_vertex_attrib4_nusv_func* glVertexAttrib4Nusv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib4bv_func)(GLuint index, const GLbyte *v);
	FOGL_STATIC gl_vertex_attrib4bv_func* glVertexAttrib4bv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib4d_func)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	FOGL_STATIC gl_vertex_attrib4d_func* glVertexAttrib4d;
	typedef void (FOGL_APIENTRY gl_vertex_attrib4dv_func)(GLuint index, const GLdouble *v);
	FOGL_STATIC gl_vertex_attrib4dv_func* glVertexAttrib4dv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib4f_func)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	FOGL_STATIC gl_vertex_attrib4f_func* glVertexAttrib4f;
	typedef void (FOGL_APIENTRY gl_vertex_attrib4fv_func)(GLuint index, const GLfloat *v);
	FOGL_STATIC gl_vertex_attrib4fv_func* glVertexAttrib4fv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib4iv_func)(GLuint index, const GLint *v);
	FOGL_STATIC gl_vertex_attrib4iv_func* glVertexAttrib4iv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib4s_func)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
	FOGL_STATIC gl_vertex_attrib4s_func* glVertexAttrib4s;
	typedef void (FOGL_APIENTRY gl_vertex_attrib4sv_func)(GLuint index, const GLshort *v);
	FOGL_STATIC gl_vertex_attrib4sv_func* glVertexAttrib4sv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib4ubv_func)(GLuint index, const GLubyte *v);
	FOGL_STATIC gl_vertex_attrib4ubv_func* glVertexAttrib4ubv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib4uiv_func)(GLuint index, const GLuint *v);
	FOGL_STATIC gl_vertex_attrib4uiv_func* glVertexAttrib4uiv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib4usv_func)(GLuint index, const GLushort *v);
	FOGL_STATIC gl_vertex_attrib4usv_func* glVertexAttrib4usv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_pointer_func)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
	FOGL_STATIC gl_vertex_attrib_pointer_func* glVertexAttribPointer;
#	else
	FOGL_GLAPI void FOGL_APIENTRY glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);
	FOGL_GLAPI void FOGL_APIENTRY glDrawBuffers(GLsizei n, const GLenum *bufs);
	FOGL_GLAPI void FOGL_APIENTRY glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
	FOGL_GLAPI void FOGL_APIENTRY glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask);
	FOGL_GLAPI void FOGL_APIENTRY glStencilMaskSeparate(GLenum face, GLuint mask);
	FOGL_GLAPI void FOGL_APIENTRY glAttachShader(GLuint program, GLuint shader);
	FOGL_GLAPI void FOGL_APIENTRY glBindAttribLocation(GLuint program, GLuint index, const GLchar *name);
	FOGL_GLAPI void FOGL_APIENTRY glCompileShader(GLuint shader);
	FOGL_GLAPI GLuint FOGL_APIENTRY glCreateProgram(void);
	FOGL_GLAPI GLuint FOGL_APIENTRY glCreateShader(GLenum type);
	FOGL_GLAPI void FOGL_APIENTRY glDeleteProgram(GLuint program);
	FOGL_GLAPI void FOGL_APIENTRY glDeleteShader(GLuint shader);
	FOGL_GLAPI void FOGL_APIENTRY glDetachShader(GLuint program, GLuint shader);
	FOGL_GLAPI void FOGL_APIENTRY glDisableVertexAttribArray(GLuint index);
	FOGL_GLAPI void FOGL_APIENTRY glEnableVertexAttribArray(GLuint index);
	FOGL_GLAPI void FOGL_APIENTRY glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
	FOGL_GLAPI void FOGL_APIENTRY glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
	FOGL_GLAPI void FOGL_APIENTRY glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
	FOGL_GLAPI GLint FOGL_APIENTRY glGetAttribLocation(GLuint program, const GLchar *name);
	FOGL_GLAPI void FOGL_APIENTRY glGetProgramiv(GLuint program, GLenum pname, GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
	FOGL_GLAPI void FOGL_APIENTRY glGetShaderiv(GLuint shader, GLenum pname, GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
	FOGL_GLAPI void FOGL_APIENTRY glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
	FOGL_GLAPI GLint FOGL_APIENTRY glGetUniformLocation(GLuint program, const GLchar *name);
	FOGL_GLAPI void FOGL_APIENTRY glGetUniformfv(GLuint program, GLint location, GLfloat *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetUniformiv(GLuint program, GLint location, GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetVertexAttribPointerv(GLuint index, GLenum pname, void **pointer);
	FOGL_GLAPI GLboolean FOGL_APIENTRY glIsProgram(GLuint program);
	FOGL_GLAPI GLboolean FOGL_APIENTRY glIsShader(GLuint shader);
	FOGL_GLAPI void FOGL_APIENTRY glLinkProgram(GLuint program);
	FOGL_GLAPI void FOGL_APIENTRY glShaderSource(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);
	FOGL_GLAPI void FOGL_APIENTRY glUseProgram(GLuint program);
	FOGL_GLAPI void FOGL_APIENTRY glUniform1f(GLint location, GLfloat v0);
	FOGL_GLAPI void FOGL_APIENTRY glUniform2f(GLint location, GLfloat v0, GLfloat v1);
	FOGL_GLAPI void FOGL_APIENTRY glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
	FOGL_GLAPI void FOGL_APIENTRY glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
	FOGL_GLAPI void FOGL_APIENTRY glUniform1i(GLint location, GLint v0);
	FOGL_GLAPI void FOGL_APIENTRY glUniform2i(GLint location, GLint v0, GLint v1);
	FOGL_GLAPI void FOGL_APIENTRY glUniform3i(GLint location, GLint v0, GLint v1, GLint v2);
	FOGL_GLAPI void FOGL_APIENTRY glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
	FOGL_GLAPI void FOGL_APIENTRY glUniform1fv(GLint location, GLsizei count, const GLfloat *value);
	FOGL_GLAPI void FOGL_APIENTRY glUniform2fv(GLint location, GLsizei count, const GLfloat *value);
	FOGL_GLAPI void FOGL_APIENTRY glUniform3fv(GLint location, GLsizei count, const GLfloat *value);
	FOGL_GLAPI void FOGL_APIENTRY glUniform4fv(GLint location, GLsizei count, const GLfloat *value);
	FOGL_GLAPI void FOGL_APIENTRY glUniform1iv(GLint location, GLsizei count, const GLint *value);
	FOGL_GLAPI void FOGL_APIENTRY glUniform2iv(GLint location, GLsizei count, const GLint *value);
	FOGL_GLAPI void FOGL_APIENTRY glUniform3iv(GLint location, GLsizei count, const GLint *value);
	FOGL_GLAPI void FOGL_APIENTRY glUniform4iv(GLint location, GLsizei count, const GLint *value);
	FOGL_GLAPI void FOGL_APIENTRY glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	FOGL_GLAPI void FOGL_APIENTRY glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	FOGL_GLAPI void FOGL_APIENTRY glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	FOGL_GLAPI void FOGL_APIENTRY glValidateProgram(GLuint program);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttrib1d(GLuint index, GLdouble x);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttrib1dv(GLuint index, const GLdouble *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttrib1f(GLuint index, GLfloat x);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttrib1fv(GLuint index, const GLfloat *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttrib1s(GLuint index, GLshort x);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttrib1sv(GLuint index, const GLshort *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttrib2dv(GLuint index, const GLdouble *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttrib2fv(GLuint index, const GLfloat *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttrib2s(GLuint index, GLshort x, GLshort y);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttrib2sv(GLuint index, const GLshort *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttrib3dv(GLuint index, const GLdouble *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttrib3fv(GLuint index, const GLfloat *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttrib3sv(GLuint index, const GLshort *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttrib4Nbv(GLuint index, const GLbyte *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttrib4Niv(GLuint index, const GLint *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttrib4Nsv(GLuint index, const GLshort *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttrib4Nubv(GLuint index, const GLubyte *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttrib4Nuiv(GLuint index, const GLuint *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttrib4Nusv(GLuint index, const GLushort *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttrib4bv(GLuint index, const GLbyte *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttrib4dv(GLuint index, const GLdouble *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttrib4fv(GLuint index, const GLfloat *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttrib4iv(GLuint index, const GLint *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttrib4sv(GLuint index, const GLshort *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttrib4ubv(GLuint index, const GLubyte *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttrib4uiv(GLuint index, const GLuint *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttrib4usv(GLuint index, const GLushort *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
#	endif // FOGL_STATIC
#endif // GL_VERSION_2_0
#ifndef GL_VERSION_2_1
#	define GL_VERSION_2_1 1
	static constexpr uint32_t GL_PIXEL_PACK_BUFFER = 0x88EB;
	static constexpr uint32_t GL_PIXEL_UNPACK_BUFFER = 0x88EC;
	static constexpr uint32_t GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
	static constexpr uint32_t GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
	static constexpr uint32_t GL_FLOAT_MAT2x3 = 0x8B65;
	static constexpr uint32_t GL_FLOAT_MAT2x4 = 0x8B66;
	static constexpr uint32_t GL_FLOAT_MAT3x2 = 0x8B67;
	static constexpr uint32_t GL_FLOAT_MAT3x4 = 0x8B68;
	static constexpr uint32_t GL_FLOAT_MAT4x2 = 0x8B69;
	static constexpr uint32_t GL_FLOAT_MAT4x3 = 0x8B6A;
	static constexpr uint32_t GL_SRGB = 0x8C40;
	static constexpr uint32_t GL_SRGB8 = 0x8C41;
	static constexpr uint32_t GL_SRGB_ALPHA = 0x8C42;
	static constexpr uint32_t GL_SRGB8_ALPHA8 = 0x8C43;
	static constexpr uint32_t GL_COMPRESSED_SRGB = 0x8C48;
	static constexpr uint32_t GL_COMPRESSED_SRGB_ALPHA = 0x8C49;
	static constexpr uint32_t GL_CURRENT_RASTER_SECONDARY_COLOR = 0x845F;
	static constexpr uint32_t GL_SLUMINANCE_ALPHA = 0x8C44;
	static constexpr uint32_t GL_SLUMINANCE8_ALPHA8 = 0x8C45;
	static constexpr uint32_t GL_SLUMINANCE = 0x8C46;
	static constexpr uint32_t GL_SLUMINANCE8 = 0x8C47;
	static constexpr uint32_t GL_COMPRESSED_SLUMINANCE = 0x8C4A;
	static constexpr uint32_t GL_COMPRESSED_SLUMINANCE_ALPHA = 0x8C4B;
#	ifdef FOGL_STATIC
	typedef void (FOGL_APIENTRY gl_uniform_matrix2x3fv_func)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	FOGL_STATIC gl_uniform_matrix2x3fv_func* glUniformMatrix2x3fv;
	typedef void (FOGL_APIENTRY gl_uniform_matrix3x2fv_func)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	FOGL_STATIC gl_uniform_matrix3x2fv_func* glUniformMatrix3x2fv;
	typedef void (FOGL_APIENTRY gl_uniform_matrix2x4fv_func)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	FOGL_STATIC gl_uniform_matrix2x4fv_func* glUniformMatrix2x4fv;
	typedef void (FOGL_APIENTRY gl_uniform_matrix4x2fv_func)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	FOGL_STATIC gl_uniform_matrix4x2fv_func* glUniformMatrix4x2fv;
	typedef void (FOGL_APIENTRY gl_uniform_matrix3x4fv_func)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	FOGL_STATIC gl_uniform_matrix3x4fv_func* glUniformMatrix3x4fv;
	typedef void (FOGL_APIENTRY gl_uniform_matrix4x3fv_func)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	FOGL_STATIC gl_uniform_matrix4x3fv_func* glUniformMatrix4x3fv;
#	else
	FOGL_GLAPI void FOGL_APIENTRY glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	FOGL_GLAPI void FOGL_APIENTRY glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	FOGL_GLAPI void FOGL_APIENTRY glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	FOGL_GLAPI void FOGL_APIENTRY glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	FOGL_GLAPI void FOGL_APIENTRY glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	FOGL_GLAPI void FOGL_APIENTRY glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
#	endif // FOGL_STATIC
#endif // GL_VERSION_2_1
#ifndef GL_VERSION_3_0
#	define GL_VERSION_3_0 1
	static constexpr uint32_t GL_COMPARE_REF_TO_TEXTURE = 0x884E;
	static constexpr uint32_t GL_CLIP_DISTANCE0 = 0x3000;
	static constexpr uint32_t GL_CLIP_DISTANCE1 = 0x3001;
	static constexpr uint32_t GL_CLIP_DISTANCE2 = 0x3002;
	static constexpr uint32_t GL_CLIP_DISTANCE3 = 0x3003;
	static constexpr uint32_t GL_CLIP_DISTANCE4 = 0x3004;
	static constexpr uint32_t GL_CLIP_DISTANCE5 = 0x3005;
	static constexpr uint32_t GL_CLIP_DISTANCE6 = 0x3006;
	static constexpr uint32_t GL_CLIP_DISTANCE7 = 0x3007;
	static constexpr uint32_t GL_MAX_CLIP_DISTANCES = 0x0D32;
	static constexpr uint32_t GL_MAJOR_VERSION = 0x821B;
	static constexpr uint32_t GL_MINOR_VERSION = 0x821C;
	static constexpr uint32_t GL_NUM_EXTENSIONS = 0x821D;
	static constexpr uint32_t GL_CONTEXT_FLAGS = 0x821E;
	static constexpr uint32_t GL_COMPRESSED_RED = 0x8225;
	static constexpr uint32_t GL_COMPRESSED_RG = 0x8226;
	static constexpr uint32_t GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001;
	static constexpr uint32_t GL_RGBA32F = 0x8814;
	static constexpr uint32_t GL_RGB32F = 0x8815;
	static constexpr uint32_t GL_RGBA16F = 0x881A;
	static constexpr uint32_t GL_RGB16F = 0x881B;
	static constexpr uint32_t GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
	static constexpr uint32_t GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
	static constexpr uint32_t GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
	static constexpr uint32_t GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
	static constexpr uint32_t GL_CLAMP_READ_COLOR = 0x891C;
	static constexpr uint32_t GL_FIXED_ONLY = 0x891D;
	static constexpr uint32_t GL_MAX_VARYING_COMPONENTS = 0x8B4B;
	static constexpr uint32_t GL_TEXTURE_1D_ARRAY = 0x8C18;
	static constexpr uint32_t GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19;
	static constexpr uint32_t GL_TEXTURE_2D_ARRAY = 0x8C1A;
	static constexpr uint32_t GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B;
	static constexpr uint32_t GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
	static constexpr uint32_t GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
	static constexpr uint32_t GL_R11F_G11F_B10F = 0x8C3A;
	static constexpr uint32_t GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
	static constexpr uint32_t GL_RGB9_E5 = 0x8C3D;
	static constexpr uint32_t GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
	static constexpr uint32_t GL_TEXTURE_SHARED_SIZE = 0x8C3F;
	static constexpr uint32_t GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
	static constexpr uint32_t GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
	static constexpr uint32_t GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
	static constexpr uint32_t GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
	static constexpr uint32_t GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
	static constexpr uint32_t GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
	static constexpr uint32_t GL_PRIMITIVES_GENERATED = 0x8C87;
	static constexpr uint32_t GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
	static constexpr uint32_t GL_RASTERIZER_DISCARD = 0x8C89;
	static constexpr uint32_t GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
	static constexpr uint32_t GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
	static constexpr uint32_t GL_INTERLEAVED_ATTRIBS = 0x8C8C;
	static constexpr uint32_t GL_SEPARATE_ATTRIBS = 0x8C8D;
	static constexpr uint32_t GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
	static constexpr uint32_t GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
	static constexpr uint32_t GL_RGBA32UI = 0x8D70;
	static constexpr uint32_t GL_RGB32UI = 0x8D71;
	static constexpr uint32_t GL_RGBA16UI = 0x8D76;
	static constexpr uint32_t GL_RGB16UI = 0x8D77;
	static constexpr uint32_t GL_RGBA8UI = 0x8D7C;
	static constexpr uint32_t GL_RGB8UI = 0x8D7D;
	static constexpr uint32_t GL_RGBA32I = 0x8D82;
	static constexpr uint32_t GL_RGB32I = 0x8D83;
	static constexpr uint32_t GL_RGBA16I = 0x8D88;
	static constexpr uint32_t GL_RGB16I = 0x8D89;
	static constexpr uint32_t GL_RGBA8I = 0x8D8E;
	static constexpr uint32_t GL_RGB8I = 0x8D8F;
	static constexpr uint32_t GL_RED_INTEGER = 0x8D94;
	static constexpr uint32_t GL_GREEN_INTEGER = 0x8D95;
	static constexpr uint32_t GL_BLUE_INTEGER = 0x8D96;
	static constexpr uint32_t GL_RGB_INTEGER = 0x8D98;
	static constexpr uint32_t GL_RGBA_INTEGER = 0x8D99;
	static constexpr uint32_t GL_BGR_INTEGER = 0x8D9A;
	static constexpr uint32_t GL_BGRA_INTEGER = 0x8D9B;
	static constexpr uint32_t GL_SAMPLER_1D_ARRAY = 0x8DC0;
	static constexpr uint32_t GL_SAMPLER_2D_ARRAY = 0x8DC1;
	static constexpr uint32_t GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3;
	static constexpr uint32_t GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
	static constexpr uint32_t GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
	static constexpr uint32_t GL_UNSIGNED_INT_VEC2 = 0x8DC6;
	static constexpr uint32_t GL_UNSIGNED_INT_VEC3 = 0x8DC7;
	static constexpr uint32_t GL_UNSIGNED_INT_VEC4 = 0x8DC8;
	static constexpr uint32_t GL_INT_SAMPLER_1D = 0x8DC9;
	static constexpr uint32_t GL_INT_SAMPLER_2D = 0x8DCA;
	static constexpr uint32_t GL_INT_SAMPLER_3D = 0x8DCB;
	static constexpr uint32_t GL_INT_SAMPLER_CUBE = 0x8DCC;
	static constexpr uint32_t GL_INT_SAMPLER_1D_ARRAY = 0x8DCE;
	static constexpr uint32_t GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
	static constexpr uint32_t GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1;
	static constexpr uint32_t GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
	static constexpr uint32_t GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
	static constexpr uint32_t GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
	static constexpr uint32_t GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6;
	static constexpr uint32_t GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
	static constexpr uint32_t GL_QUERY_WAIT = 0x8E13;
	static constexpr uint32_t GL_QUERY_NO_WAIT = 0x8E14;
	static constexpr uint32_t GL_QUERY_BY_REGION_WAIT = 0x8E15;
	static constexpr uint32_t GL_QUERY_BY_REGION_NO_WAIT = 0x8E16;
	static constexpr uint32_t GL_BUFFER_ACCESS_FLAGS = 0x911F;
	static constexpr uint32_t GL_BUFFER_MAP_LENGTH = 0x9120;
	static constexpr uint32_t GL_BUFFER_MAP_OFFSET = 0x9121;
	static constexpr uint32_t GL_DEPTH_COMPONENT32F = 0x8CAC;
	static constexpr uint32_t GL_DEPTH32F_STENCIL8 = 0x8CAD;
	static constexpr uint32_t GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
	static constexpr uint32_t GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
	static constexpr uint32_t GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
	static constexpr uint32_t GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
	static constexpr uint32_t GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
	static constexpr uint32_t GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
	static constexpr uint32_t GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
	static constexpr uint32_t GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
	static constexpr uint32_t GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
	static constexpr uint32_t GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
	static constexpr uint32_t GL_FRAMEBUFFER_DEFAULT = 0x8218;
	static constexpr uint32_t GL_FRAMEBUFFER_UNDEFINED = 0x8219;
	static constexpr uint32_t GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;
	static constexpr uint32_t GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
	static constexpr uint32_t GL_DEPTH_STENCIL = 0x84F9;
	static constexpr uint32_t GL_UNSIGNED_INT_24_8 = 0x84FA;
	static constexpr uint32_t GL_DEPTH24_STENCIL8 = 0x88F0;
	static constexpr uint32_t GL_TEXTURE_STENCIL_SIZE = 0x88F1;
	static constexpr uint32_t GL_TEXTURE_RED_TYPE = 0x8C10;
	static constexpr uint32_t GL_TEXTURE_GREEN_TYPE = 0x8C11;
	static constexpr uint32_t GL_TEXTURE_BLUE_TYPE = 0x8C12;
	static constexpr uint32_t GL_TEXTURE_ALPHA_TYPE = 0x8C13;
	static constexpr uint32_t GL_TEXTURE_DEPTH_TYPE = 0x8C16;
	static constexpr uint32_t GL_UNSIGNED_NORMALIZED = 0x8C17;
	static constexpr uint32_t GL_FRAMEBUFFER_BINDING = 0x8CA6;
	static constexpr uint32_t GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
	static constexpr uint32_t GL_RENDERBUFFER_BINDING = 0x8CA7;
	static constexpr uint32_t GL_READ_FRAMEBUFFER = 0x8CA8;
	static constexpr uint32_t GL_DRAW_FRAMEBUFFER = 0x8CA9;
	static constexpr uint32_t GL_READ_FRAMEBUFFER_BINDING = 0x8CAA;
	static constexpr uint32_t GL_RENDERBUFFER_SAMPLES = 0x8CAB;
	static constexpr uint32_t GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
	static constexpr uint32_t GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
	static constexpr uint32_t GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
	static constexpr uint32_t GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
	static constexpr uint32_t GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
	static constexpr uint32_t GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
	static constexpr uint32_t GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
	static constexpr uint32_t GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
	static constexpr uint32_t GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
	static constexpr uint32_t GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
	static constexpr uint32_t GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
	static constexpr uint32_t GL_MAX_COLOR_ATTACHMENTS = 0x8CDF;
	static constexpr uint32_t GL_COLOR_ATTACHMENT0 = 0x8CE0;
	static constexpr uint32_t GL_COLOR_ATTACHMENT1 = 0x8CE1;
	static constexpr uint32_t GL_COLOR_ATTACHMENT2 = 0x8CE2;
	static constexpr uint32_t GL_COLOR_ATTACHMENT3 = 0x8CE3;
	static constexpr uint32_t GL_COLOR_ATTACHMENT4 = 0x8CE4;
	static constexpr uint32_t GL_COLOR_ATTACHMENT5 = 0x8CE5;
	static constexpr uint32_t GL_COLOR_ATTACHMENT6 = 0x8CE6;
	static constexpr uint32_t GL_COLOR_ATTACHMENT7 = 0x8CE7;
	static constexpr uint32_t GL_COLOR_ATTACHMENT8 = 0x8CE8;
	static constexpr uint32_t GL_COLOR_ATTACHMENT9 = 0x8CE9;
	static constexpr uint32_t GL_COLOR_ATTACHMENT10 = 0x8CEA;
	static constexpr uint32_t GL_COLOR_ATTACHMENT11 = 0x8CEB;
	static constexpr uint32_t GL_COLOR_ATTACHMENT12 = 0x8CEC;
	static constexpr uint32_t GL_COLOR_ATTACHMENT13 = 0x8CED;
	static constexpr uint32_t GL_COLOR_ATTACHMENT14 = 0x8CEE;
	static constexpr uint32_t GL_COLOR_ATTACHMENT15 = 0x8CEF;
	static constexpr uint32_t GL_COLOR_ATTACHMENT16 = 0x8CF0;
	static constexpr uint32_t GL_COLOR_ATTACHMENT17 = 0x8CF1;
	static constexpr uint32_t GL_COLOR_ATTACHMENT18 = 0x8CF2;
	static constexpr uint32_t GL_COLOR_ATTACHMENT19 = 0x8CF3;
	static constexpr uint32_t GL_COLOR_ATTACHMENT20 = 0x8CF4;
	static constexpr uint32_t GL_COLOR_ATTACHMENT21 = 0x8CF5;
	static constexpr uint32_t GL_COLOR_ATTACHMENT22 = 0x8CF6;
	static constexpr uint32_t GL_COLOR_ATTACHMENT23 = 0x8CF7;
	static constexpr uint32_t GL_COLOR_ATTACHMENT24 = 0x8CF8;
	static constexpr uint32_t GL_COLOR_ATTACHMENT25 = 0x8CF9;
	static constexpr uint32_t GL_COLOR_ATTACHMENT26 = 0x8CFA;
	static constexpr uint32_t GL_COLOR_ATTACHMENT27 = 0x8CFB;
	static constexpr uint32_t GL_COLOR_ATTACHMENT28 = 0x8CFC;
	static constexpr uint32_t GL_COLOR_ATTACHMENT29 = 0x8CFD;
	static constexpr uint32_t GL_COLOR_ATTACHMENT30 = 0x8CFE;
	static constexpr uint32_t GL_COLOR_ATTACHMENT31 = 0x8CFF;
	static constexpr uint32_t GL_DEPTH_ATTACHMENT = 0x8D00;
	static constexpr uint32_t GL_STENCIL_ATTACHMENT = 0x8D20;
	static constexpr uint32_t GL_FRAMEBUFFER = 0x8D40;
	static constexpr uint32_t GL_RENDERBUFFER = 0x8D41;
	static constexpr uint32_t GL_RENDERBUFFER_WIDTH = 0x8D42;
	static constexpr uint32_t GL_RENDERBUFFER_HEIGHT = 0x8D43;
	static constexpr uint32_t GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
	static constexpr uint32_t GL_STENCIL_INDEX1 = 0x8D46;
	static constexpr uint32_t GL_STENCIL_INDEX4 = 0x8D47;
	static constexpr uint32_t GL_STENCIL_INDEX8 = 0x8D48;
	static constexpr uint32_t GL_STENCIL_INDEX16 = 0x8D49;
	static constexpr uint32_t GL_RENDERBUFFER_RED_SIZE = 0x8D50;
	static constexpr uint32_t GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
	static constexpr uint32_t GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
	static constexpr uint32_t GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
	static constexpr uint32_t GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
	static constexpr uint32_t GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
	static constexpr uint32_t GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
	static constexpr uint32_t GL_MAX_SAMPLES = 0x8D57;
	static constexpr uint32_t GL_INDEX = 0x8222;
	static constexpr uint32_t GL_TEXTURE_LUMINANCE_TYPE = 0x8C14;
	static constexpr uint32_t GL_TEXTURE_INTENSITY_TYPE = 0x8C15;
	static constexpr uint32_t GL_FRAMEBUFFER_SRGB = 0x8DB9;
	static constexpr uint32_t GL_HALF_FLOAT = 0x140B;
	static constexpr uint32_t GL_MAP_READ_BIT = 0x0001;
	static constexpr uint32_t GL_MAP_WRITE_BIT = 0x0002;
	static constexpr uint32_t GL_MAP_INVALIDATE_RANGE_BIT = 0x0004;
	static constexpr uint32_t GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008;
	static constexpr uint32_t GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010;
	static constexpr uint32_t GL_MAP_UNSYNCHRONIZED_BIT = 0x0020;
	static constexpr uint32_t GL_COMPRESSED_RED_RGTC1 = 0x8DBB;
	static constexpr uint32_t GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC;
	static constexpr uint32_t GL_COMPRESSED_RG_RGTC2 = 0x8DBD;
	static constexpr uint32_t GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE;
	static constexpr uint32_t GL_RG = 0x8227;
	static constexpr uint32_t GL_RG_INTEGER = 0x8228;
	static constexpr uint32_t GL_R8 = 0x8229;
	static constexpr uint32_t GL_R16 = 0x822A;
	static constexpr uint32_t GL_RG8 = 0x822B;
	static constexpr uint32_t GL_RG16 = 0x822C;
	static constexpr uint32_t GL_R16F = 0x822D;
	static constexpr uint32_t GL_R32F = 0x822E;
	static constexpr uint32_t GL_RG16F = 0x822F;
	static constexpr uint32_t GL_RG32F = 0x8230;
	static constexpr uint32_t GL_R8I = 0x8231;
	static constexpr uint32_t GL_R8UI = 0x8232;
	static constexpr uint32_t GL_R16I = 0x8233;
	static constexpr uint32_t GL_R16UI = 0x8234;
	static constexpr uint32_t GL_R32I = 0x8235;
	static constexpr uint32_t GL_R32UI = 0x8236;
	static constexpr uint32_t GL_RG8I = 0x8237;
	static constexpr uint32_t GL_RG8UI = 0x8238;
	static constexpr uint32_t GL_RG16I = 0x8239;
	static constexpr uint32_t GL_RG16UI = 0x823A;
	static constexpr uint32_t GL_RG32I = 0x823B;
	static constexpr uint32_t GL_RG32UI = 0x823C;
	static constexpr uint32_t GL_VERTEX_ARRAY_BINDING = 0x85B5;
	static constexpr uint32_t GL_CLAMP_VERTEX_COLOR = 0x891A;
	static constexpr uint32_t GL_CLAMP_FRAGMENT_COLOR = 0x891B;
	static constexpr uint32_t GL_ALPHA_INTEGER = 0x8D97;
#	ifdef FOGL_STATIC
	typedef void (FOGL_APIENTRY gl_color_maski_func)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
	FOGL_STATIC gl_color_maski_func* glColorMaski;
	typedef void (FOGL_APIENTRY gl_get_booleani_v_func)(GLenum target, GLuint index, GLboolean *data);
	FOGL_STATIC gl_get_booleani_v_func* glGetBooleani_v;
	typedef void (FOGL_APIENTRY gl_get_integeri_v_func)(GLenum target, GLuint index, GLint *data);
	FOGL_STATIC gl_get_integeri_v_func* glGetIntegeri_v;
	typedef void (FOGL_APIENTRY gl_enablei_func)(GLenum target, GLuint index);
	FOGL_STATIC gl_enablei_func* glEnablei;
	typedef void (FOGL_APIENTRY gl_disablei_func)(GLenum target, GLuint index);
	FOGL_STATIC gl_disablei_func* glDisablei;
	typedef GLboolean(FOGL_APIENTRY gl_is_enabledi_func)(GLenum target, GLuint index);
	FOGL_STATIC gl_is_enabledi_func* glIsEnabledi;
	typedef void (FOGL_APIENTRY gl_begin_transform_feedback_func)(GLenum primitiveMode);
	FOGL_STATIC gl_begin_transform_feedback_func* glBeginTransformFeedback;
	typedef void (FOGL_APIENTRY gl_end_transform_feedback_func)(void);
	FOGL_STATIC gl_end_transform_feedback_func* glEndTransformFeedback;
	typedef void (FOGL_APIENTRY gl_bind_buffer_range_func)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
	FOGL_STATIC gl_bind_buffer_range_func* glBindBufferRange;
	typedef void (FOGL_APIENTRY gl_bind_buffer_base_func)(GLenum target, GLuint index, GLuint buffer);
	FOGL_STATIC gl_bind_buffer_base_func* glBindBufferBase;
	typedef void (FOGL_APIENTRY gl_transform_feedback_varyings_func)(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
	FOGL_STATIC gl_transform_feedback_varyings_func* glTransformFeedbackVaryings;
	typedef void (FOGL_APIENTRY gl_get_transform_feedback_varying_func)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
	FOGL_STATIC gl_get_transform_feedback_varying_func* glGetTransformFeedbackVarying;
	typedef void (FOGL_APIENTRY gl_clamp_color_func)(GLenum target, GLenum clamp);
	FOGL_STATIC gl_clamp_color_func* glClampColor;
	typedef void (FOGL_APIENTRY gl_begin_conditional_render_func)(GLuint id, GLenum mode);
	FOGL_STATIC gl_begin_conditional_render_func* glBeginConditionalRender;
	typedef void (FOGL_APIENTRY gl_end_conditional_render_func)(void);
	FOGL_STATIC gl_end_conditional_render_func* glEndConditionalRender;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_i_pointer_func)(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
	FOGL_STATIC gl_vertex_attrib_i_pointer_func* glVertexAttribIPointer;
	typedef void (FOGL_APIENTRY gl_get_vertex_attrib_iiv_func)(GLuint index, GLenum pname, GLint *params);
	FOGL_STATIC gl_get_vertex_attrib_iiv_func* glGetVertexAttribIiv;
	typedef void (FOGL_APIENTRY gl_get_vertex_attrib_iuiv_func)(GLuint index, GLenum pname, GLuint *params);
	FOGL_STATIC gl_get_vertex_attrib_iuiv_func* glGetVertexAttribIuiv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_i1i_func)(GLuint index, GLint x);
	FOGL_STATIC gl_vertex_attrib_i1i_func* glVertexAttribI1i;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_i2i_func)(GLuint index, GLint x, GLint y);
	FOGL_STATIC gl_vertex_attrib_i2i_func* glVertexAttribI2i;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_i3i_func)(GLuint index, GLint x, GLint y, GLint z);
	FOGL_STATIC gl_vertex_attrib_i3i_func* glVertexAttribI3i;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_i4i_func)(GLuint index, GLint x, GLint y, GLint z, GLint w);
	FOGL_STATIC gl_vertex_attrib_i4i_func* glVertexAttribI4i;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_i1ui_func)(GLuint index, GLuint x);
	FOGL_STATIC gl_vertex_attrib_i1ui_func* glVertexAttribI1ui;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_i2ui_func)(GLuint index, GLuint x, GLuint y);
	FOGL_STATIC gl_vertex_attrib_i2ui_func* glVertexAttribI2ui;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_i3ui_func)(GLuint index, GLuint x, GLuint y, GLuint z);
	FOGL_STATIC gl_vertex_attrib_i3ui_func* glVertexAttribI3ui;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_i4ui_func)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
	FOGL_STATIC gl_vertex_attrib_i4ui_func* glVertexAttribI4ui;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_i1iv_func)(GLuint index, const GLint *v);
	FOGL_STATIC gl_vertex_attrib_i1iv_func* glVertexAttribI1iv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_i2iv_func)(GLuint index, const GLint *v);
	FOGL_STATIC gl_vertex_attrib_i2iv_func* glVertexAttribI2iv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_i3iv_func)(GLuint index, const GLint *v);
	FOGL_STATIC gl_vertex_attrib_i3iv_func* glVertexAttribI3iv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_i4iv_func)(GLuint index, const GLint *v);
	FOGL_STATIC gl_vertex_attrib_i4iv_func* glVertexAttribI4iv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_i1uiv_func)(GLuint index, const GLuint *v);
	FOGL_STATIC gl_vertex_attrib_i1uiv_func* glVertexAttribI1uiv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_i2uiv_func)(GLuint index, const GLuint *v);
	FOGL_STATIC gl_vertex_attrib_i2uiv_func* glVertexAttribI2uiv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_i3uiv_func)(GLuint index, const GLuint *v);
	FOGL_STATIC gl_vertex_attrib_i3uiv_func* glVertexAttribI3uiv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_i4uiv_func)(GLuint index, const GLuint *v);
	FOGL_STATIC gl_vertex_attrib_i4uiv_func* glVertexAttribI4uiv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_i4bv_func)(GLuint index, const GLbyte *v);
	FOGL_STATIC gl_vertex_attrib_i4bv_func* glVertexAttribI4bv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_i4sv_func)(GLuint index, const GLshort *v);
	FOGL_STATIC gl_vertex_attrib_i4sv_func* glVertexAttribI4sv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_i4ubv_func)(GLuint index, const GLubyte *v);
	FOGL_STATIC gl_vertex_attrib_i4ubv_func* glVertexAttribI4ubv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_i4usv_func)(GLuint index, const GLushort *v);
	FOGL_STATIC gl_vertex_attrib_i4usv_func* glVertexAttribI4usv;
	typedef void (FOGL_APIENTRY gl_get_uniformuiv_func)(GLuint program, GLint location, GLuint *params);
	FOGL_STATIC gl_get_uniformuiv_func* glGetUniformuiv;
	typedef void (FOGL_APIENTRY gl_bind_frag_data_location_func)(GLuint program, GLuint color, const GLchar *name);
	FOGL_STATIC gl_bind_frag_data_location_func* glBindFragDataLocation;
	typedef GLint(FOGL_APIENTRY gl_get_frag_data_location_func)(GLuint program, const GLchar *name);
	FOGL_STATIC gl_get_frag_data_location_func* glGetFragDataLocation;
	typedef void (FOGL_APIENTRY gl_uniform1ui_func)(GLint location, GLuint v0);
	FOGL_STATIC gl_uniform1ui_func* glUniform1ui;
	typedef void (FOGL_APIENTRY gl_uniform2ui_func)(GLint location, GLuint v0, GLuint v1);
	FOGL_STATIC gl_uniform2ui_func* glUniform2ui;
	typedef void (FOGL_APIENTRY gl_uniform3ui_func)(GLint location, GLuint v0, GLuint v1, GLuint v2);
	FOGL_STATIC gl_uniform3ui_func* glUniform3ui;
	typedef void (FOGL_APIENTRY gl_uniform4ui_func)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
	FOGL_STATIC gl_uniform4ui_func* glUniform4ui;
	typedef void (FOGL_APIENTRY gl_uniform1uiv_func)(GLint location, GLsizei count, const GLuint *value);
	FOGL_STATIC gl_uniform1uiv_func* glUniform1uiv;
	typedef void (FOGL_APIENTRY gl_uniform2uiv_func)(GLint location, GLsizei count, const GLuint *value);
	FOGL_STATIC gl_uniform2uiv_func* glUniform2uiv;
	typedef void (FOGL_APIENTRY gl_uniform3uiv_func)(GLint location, GLsizei count, const GLuint *value);
	FOGL_STATIC gl_uniform3uiv_func* glUniform3uiv;
	typedef void (FOGL_APIENTRY gl_uniform4uiv_func)(GLint location, GLsizei count, const GLuint *value);
	FOGL_STATIC gl_uniform4uiv_func* glUniform4uiv;
	typedef void (FOGL_APIENTRY gl_tex_parameter_iiv_func)(GLenum target, GLenum pname, const GLint *params);
	FOGL_STATIC gl_tex_parameter_iiv_func* glTexParameterIiv;
	typedef void (FOGL_APIENTRY gl_tex_parameter_iuiv_func)(GLenum target, GLenum pname, const GLuint *params);
	FOGL_STATIC gl_tex_parameter_iuiv_func* glTexParameterIuiv;
	typedef void (FOGL_APIENTRY gl_get_tex_parameter_iiv_func)(GLenum target, GLenum pname, GLint *params);
	FOGL_STATIC gl_get_tex_parameter_iiv_func* glGetTexParameterIiv;
	typedef void (FOGL_APIENTRY gl_get_tex_parameter_iuiv_func)(GLenum target, GLenum pname, GLuint *params);
	FOGL_STATIC gl_get_tex_parameter_iuiv_func* glGetTexParameterIuiv;
	typedef void (FOGL_APIENTRY gl_clear_bufferiv_func)(GLenum buffer, GLint drawbuffer, const GLint *value);
	FOGL_STATIC gl_clear_bufferiv_func* glClearBufferiv;
	typedef void (FOGL_APIENTRY gl_clear_bufferuiv_func)(GLenum buffer, GLint drawbuffer, const GLuint *value);
	FOGL_STATIC gl_clear_bufferuiv_func* glClearBufferuiv;
	typedef void (FOGL_APIENTRY gl_clear_bufferfv_func)(GLenum buffer, GLint drawbuffer, const GLfloat *value);
	FOGL_STATIC gl_clear_bufferfv_func* glClearBufferfv;
	typedef void (FOGL_APIENTRY gl_clear_bufferfi_func)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
	FOGL_STATIC gl_clear_bufferfi_func* glClearBufferfi;
	typedef const GLubyte(FOGL_APIENTRY gl_get_stringi_func)(GLenum name, GLuint index);
	FOGL_STATIC gl_get_stringi_func* glGetStringi;
	typedef GLboolean(FOGL_APIENTRY gl_is_renderbuffer_func)(GLuint renderbuffer);
	FOGL_STATIC gl_is_renderbuffer_func* glIsRenderbuffer;
	typedef void (FOGL_APIENTRY gl_bind_renderbuffer_func)(GLenum target, GLuint renderbuffer);
	FOGL_STATIC gl_bind_renderbuffer_func* glBindRenderbuffer;
	typedef void (FOGL_APIENTRY gl_delete_renderbuffers_func)(GLsizei n, const GLuint *renderbuffers);
	FOGL_STATIC gl_delete_renderbuffers_func* glDeleteRenderbuffers;
	typedef void (FOGL_APIENTRY gl_gen_renderbuffers_func)(GLsizei n, GLuint *renderbuffers);
	FOGL_STATIC gl_gen_renderbuffers_func* glGenRenderbuffers;
	typedef void (FOGL_APIENTRY gl_renderbuffer_storage_func)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
	FOGL_STATIC gl_renderbuffer_storage_func* glRenderbufferStorage;
	typedef void (FOGL_APIENTRY gl_get_renderbuffer_parameteriv_func)(GLenum target, GLenum pname, GLint *params);
	FOGL_STATIC gl_get_renderbuffer_parameteriv_func* glGetRenderbufferParameteriv;
	typedef GLboolean(FOGL_APIENTRY gl_is_framebuffer_func)(GLuint framebuffer);
	FOGL_STATIC gl_is_framebuffer_func* glIsFramebuffer;
	typedef void (FOGL_APIENTRY gl_bind_framebuffer_func)(GLenum target, GLuint framebuffer);
	FOGL_STATIC gl_bind_framebuffer_func* glBindFramebuffer;
	typedef void (FOGL_APIENTRY gl_delete_framebuffers_func)(GLsizei n, const GLuint *framebuffers);
	FOGL_STATIC gl_delete_framebuffers_func* glDeleteFramebuffers;
	typedef void (FOGL_APIENTRY gl_gen_framebuffers_func)(GLsizei n, GLuint *framebuffers);
	FOGL_STATIC gl_gen_framebuffers_func* glGenFramebuffers;
	typedef GLenum(FOGL_APIENTRY gl_check_framebuffer_status_func)(GLenum target);
	FOGL_STATIC gl_check_framebuffer_status_func* glCheckFramebufferStatus;
	typedef void (FOGL_APIENTRY gl_framebuffer_texture1d_func)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
	FOGL_STATIC gl_framebuffer_texture1d_func* glFramebufferTexture1D;
	typedef void (FOGL_APIENTRY gl_framebuffer_texture2d_func)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
	FOGL_STATIC gl_framebuffer_texture2d_func* glFramebufferTexture2D;
	typedef void (FOGL_APIENTRY gl_framebuffer_texture3d_func)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
	FOGL_STATIC gl_framebuffer_texture3d_func* glFramebufferTexture3D;
	typedef void (FOGL_APIENTRY gl_framebuffer_renderbuffer_func)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
	FOGL_STATIC gl_framebuffer_renderbuffer_func* glFramebufferRenderbuffer;
	typedef void (FOGL_APIENTRY gl_get_framebuffer_attachment_parameteriv_func)(GLenum target, GLenum attachment, GLenum pname, GLint *params);
	FOGL_STATIC gl_get_framebuffer_attachment_parameteriv_func* glGetFramebufferAttachmentParameteriv;
	typedef void (FOGL_APIENTRY gl_generate_mipmap_func)(GLenum target);
	FOGL_STATIC gl_generate_mipmap_func* glGenerateMipmap;
	typedef void (FOGL_APIENTRY gl_blit_framebuffer_func)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
	FOGL_STATIC gl_blit_framebuffer_func* glBlitFramebuffer;
	typedef void (FOGL_APIENTRY gl_renderbuffer_storage_multisample_func)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
	FOGL_STATIC gl_renderbuffer_storage_multisample_func* glRenderbufferStorageMultisample;
	typedef void (FOGL_APIENTRY gl_framebuffer_texture_layer_func)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
	FOGL_STATIC gl_framebuffer_texture_layer_func* glFramebufferTextureLayer;
	typedef void (FOGL_APIENTRY gl_map_buffer_range_func)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
	FOGL_STATIC gl_map_buffer_range_func* glMapBufferRange;
	typedef void (FOGL_APIENTRY gl_flush_mapped_buffer_range_func)(GLenum target, GLintptr offset, GLsizeiptr length);
	FOGL_STATIC gl_flush_mapped_buffer_range_func* glFlushMappedBufferRange;
	typedef void (FOGL_APIENTRY gl_bind_vertex_array_func)(GLuint array);
	FOGL_STATIC gl_bind_vertex_array_func* glBindVertexArray;
	typedef void (FOGL_APIENTRY gl_delete_vertex_arrays_func)(GLsizei n, const GLuint *arrays);
	FOGL_STATIC gl_delete_vertex_arrays_func* glDeleteVertexArrays;
	typedef void (FOGL_APIENTRY gl_gen_vertex_arrays_func)(GLsizei n, GLuint *arrays);
	FOGL_STATIC gl_gen_vertex_arrays_func* glGenVertexArrays;
	typedef GLboolean(FOGL_APIENTRY gl_is_vertex_array_func)(GLuint array);
	FOGL_STATIC gl_is_vertex_array_func* glIsVertexArray;
#	else
	FOGL_GLAPI void FOGL_APIENTRY glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
	FOGL_GLAPI void FOGL_APIENTRY glGetBooleani_v(GLenum target, GLuint index, GLboolean *data);
	FOGL_GLAPI void FOGL_APIENTRY glGetIntegeri_v(GLenum target, GLuint index, GLint *data);
	FOGL_GLAPI void FOGL_APIENTRY glEnablei(GLenum target, GLuint index);
	FOGL_GLAPI void FOGL_APIENTRY glDisablei(GLenum target, GLuint index);
	FOGL_GLAPI GLboolean FOGL_APIENTRY glIsEnabledi(GLenum target, GLuint index);
	FOGL_GLAPI void FOGL_APIENTRY glBeginTransformFeedback(GLenum primitiveMode);
	FOGL_GLAPI void FOGL_APIENTRY glEndTransformFeedback(void);
	FOGL_GLAPI void FOGL_APIENTRY glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
	FOGL_GLAPI void FOGL_APIENTRY glBindBufferBase(GLenum target, GLuint index, GLuint buffer);
	FOGL_GLAPI void FOGL_APIENTRY glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
	FOGL_GLAPI void FOGL_APIENTRY glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
	FOGL_GLAPI void FOGL_APIENTRY glClampColor(GLenum target, GLenum clamp);
	FOGL_GLAPI void FOGL_APIENTRY glBeginConditionalRender(GLuint id, GLenum mode);
	FOGL_GLAPI void FOGL_APIENTRY glEndConditionalRender(void);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
	FOGL_GLAPI void FOGL_APIENTRY glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribI1i(GLuint index, GLint x);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribI2i(GLuint index, GLint x, GLint y);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribI1ui(GLuint index, GLuint x);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribI2ui(GLuint index, GLuint x, GLuint y);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribI1iv(GLuint index, const GLint *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribI2iv(GLuint index, const GLint *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribI3iv(GLuint index, const GLint *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribI4iv(GLuint index, const GLint *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribI1uiv(GLuint index, const GLuint *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribI2uiv(GLuint index, const GLuint *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribI3uiv(GLuint index, const GLuint *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribI4uiv(GLuint index, const GLuint *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribI4bv(GLuint index, const GLbyte *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribI4sv(GLuint index, const GLshort *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribI4ubv(GLuint index, const GLubyte *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribI4usv(GLuint index, const GLushort *v);
	FOGL_GLAPI void FOGL_APIENTRY glGetUniformuiv(GLuint program, GLint location, GLuint *params);
	FOGL_GLAPI void FOGL_APIENTRY glBindFragDataLocation(GLuint program, GLuint color, const GLchar *name);
	FOGL_GLAPI GLint FOGL_APIENTRY glGetFragDataLocation(GLuint program, const GLchar *name);
	FOGL_GLAPI void FOGL_APIENTRY glUniform1ui(GLint location, GLuint v0);
	FOGL_GLAPI void FOGL_APIENTRY glUniform2ui(GLint location, GLuint v0, GLuint v1);
	FOGL_GLAPI void FOGL_APIENTRY glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2);
	FOGL_GLAPI void FOGL_APIENTRY glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
	FOGL_GLAPI void FOGL_APIENTRY glUniform1uiv(GLint location, GLsizei count, const GLuint *value);
	FOGL_GLAPI void FOGL_APIENTRY glUniform2uiv(GLint location, GLsizei count, const GLuint *value);
	FOGL_GLAPI void FOGL_APIENTRY glUniform3uiv(GLint location, GLsizei count, const GLuint *value);
	FOGL_GLAPI void FOGL_APIENTRY glUniform4uiv(GLint location, GLsizei count, const GLuint *value);
	FOGL_GLAPI void FOGL_APIENTRY glTexParameterIiv(GLenum target, GLenum pname, const GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params);
	FOGL_GLAPI void FOGL_APIENTRY glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value);
	FOGL_GLAPI void FOGL_APIENTRY glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value);
	FOGL_GLAPI void FOGL_APIENTRY glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value);
	FOGL_GLAPI void FOGL_APIENTRY glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
	FOGL_GLAPI const GLubyte FOGL_APIENTRY glGetStringi(GLenum name, GLuint index);
	FOGL_GLAPI GLboolean FOGL_APIENTRY glIsRenderbuffer(GLuint renderbuffer);
	FOGL_GLAPI void FOGL_APIENTRY glBindRenderbuffer(GLenum target, GLuint renderbuffer);
	FOGL_GLAPI void FOGL_APIENTRY glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers);
	FOGL_GLAPI void FOGL_APIENTRY glGenRenderbuffers(GLsizei n, GLuint *renderbuffers);
	FOGL_GLAPI void FOGL_APIENTRY glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
	FOGL_GLAPI void FOGL_APIENTRY glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params);
	FOGL_GLAPI GLboolean FOGL_APIENTRY glIsFramebuffer(GLuint framebuffer);
	FOGL_GLAPI void FOGL_APIENTRY glBindFramebuffer(GLenum target, GLuint framebuffer);
	FOGL_GLAPI void FOGL_APIENTRY glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers);
	FOGL_GLAPI void FOGL_APIENTRY glGenFramebuffers(GLsizei n, GLuint *framebuffers);
	FOGL_GLAPI GLenum FOGL_APIENTRY glCheckFramebufferStatus(GLenum target);
	FOGL_GLAPI void FOGL_APIENTRY glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
	FOGL_GLAPI void FOGL_APIENTRY glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
	FOGL_GLAPI void FOGL_APIENTRY glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
	FOGL_GLAPI void FOGL_APIENTRY glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
	FOGL_GLAPI void FOGL_APIENTRY glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glGenerateMipmap(GLenum target);
	FOGL_GLAPI void FOGL_APIENTRY glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
	FOGL_GLAPI void FOGL_APIENTRY glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
	FOGL_GLAPI void FOGL_APIENTRY glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
	FOGL_GLAPI void FOGL_APIENTRY glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
	FOGL_GLAPI void FOGL_APIENTRY glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length);
	FOGL_GLAPI void FOGL_APIENTRY glBindVertexArray(GLuint array);
	FOGL_GLAPI void FOGL_APIENTRY glDeleteVertexArrays(GLsizei n, const GLuint *arrays);
	FOGL_GLAPI void FOGL_APIENTRY glGenVertexArrays(GLsizei n, GLuint *arrays);
	FOGL_GLAPI GLboolean FOGL_APIENTRY glIsVertexArray(GLuint array);
#	endif // FOGL_STATIC
#endif // GL_VERSION_3_0
#ifndef GL_VERSION_3_1
#	define GL_VERSION_3_1 1
	static constexpr uint32_t GL_SAMPLER_2D_RECT = 0x8B63;
	static constexpr uint32_t GL_SAMPLER_2D_RECT_SHADOW = 0x8B64;
	static constexpr uint32_t GL_SAMPLER_BUFFER = 0x8DC2;
	static constexpr uint32_t GL_INT_SAMPLER_2D_RECT = 0x8DCD;
	static constexpr uint32_t GL_INT_SAMPLER_BUFFER = 0x8DD0;
	static constexpr uint32_t GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5;
	static constexpr uint32_t GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;
	static constexpr uint32_t GL_TEXTURE_BUFFER = 0x8C2A;
	static constexpr uint32_t GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;
	static constexpr uint32_t GL_TEXTURE_BINDING_BUFFER = 0x8C2C;
	static constexpr uint32_t GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;
	static constexpr uint32_t GL_TEXTURE_RECTANGLE = 0x84F5;
	static constexpr uint32_t GL_TEXTURE_BINDING_RECTANGLE = 0x84F6;
	static constexpr uint32_t GL_PROXY_TEXTURE_RECTANGLE = 0x84F7;
	static constexpr uint32_t GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8;
	static constexpr uint32_t GL_R8_SNORM = 0x8F94;
	static constexpr uint32_t GL_RG8_SNORM = 0x8F95;
	static constexpr uint32_t GL_RGB8_SNORM = 0x8F96;
	static constexpr uint32_t GL_RGBA8_SNORM = 0x8F97;
	static constexpr uint32_t GL_R16_SNORM = 0x8F98;
	static constexpr uint32_t GL_RG16_SNORM = 0x8F99;
	static constexpr uint32_t GL_RGB16_SNORM = 0x8F9A;
	static constexpr uint32_t GL_RGBA16_SNORM = 0x8F9B;
	static constexpr uint32_t GL_SIGNED_NORMALIZED = 0x8F9C;
	static constexpr uint32_t GL_PRIMITIVE_RESTART = 0x8F9D;
	static constexpr uint32_t GL_PRIMITIVE_RESTART_INDEX = 0x8F9E;
	static constexpr uint32_t GL_COPY_READ_BUFFER = 0x8F36;
	static constexpr uint32_t GL_COPY_WRITE_BUFFER = 0x8F37;
	static constexpr uint32_t GL_UNIFORM_BUFFER = 0x8A11;
	static constexpr uint32_t GL_UNIFORM_BUFFER_BINDING = 0x8A28;
	static constexpr uint32_t GL_UNIFORM_BUFFER_START = 0x8A29;
	static constexpr uint32_t GL_UNIFORM_BUFFER_SIZE = 0x8A2A;
	static constexpr uint32_t GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
	static constexpr uint32_t GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C;
	static constexpr uint32_t GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
	static constexpr uint32_t GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
	static constexpr uint32_t GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
	static constexpr uint32_t GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
	static constexpr uint32_t GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
	static constexpr uint32_t GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32;
	static constexpr uint32_t GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
	static constexpr uint32_t GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
	static constexpr uint32_t GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
	static constexpr uint32_t GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
	static constexpr uint32_t GL_UNIFORM_TYPE = 0x8A37;
	static constexpr uint32_t GL_UNIFORM_SIZE = 0x8A38;
	static constexpr uint32_t GL_UNIFORM_NAME_LENGTH = 0x8A39;
	static constexpr uint32_t GL_UNIFORM_BLOCK_INDEX = 0x8A3A;
	static constexpr uint32_t GL_UNIFORM_OFFSET = 0x8A3B;
	static constexpr uint32_t GL_UNIFORM_ARRAY_STRIDE = 0x8A3C;
	static constexpr uint32_t GL_UNIFORM_MATRIX_STRIDE = 0x8A3D;
	static constexpr uint32_t GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E;
	static constexpr uint32_t GL_UNIFORM_BLOCK_BINDING = 0x8A3F;
	static constexpr uint32_t GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
	static constexpr uint32_t GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
	static constexpr uint32_t GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
	static constexpr uint32_t GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
	static constexpr uint32_t GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
	static constexpr uint32_t GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45;
	static constexpr uint32_t GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
	static constexpr uint32_t GL_INVALID_INDEX = 0xFFFFFFFFu;
#	ifdef FOGL_STATIC
	typedef void (FOGL_APIENTRY gl_draw_arrays_instanced_func)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
	FOGL_STATIC gl_draw_arrays_instanced_func* glDrawArraysInstanced;
	typedef void (FOGL_APIENTRY gl_draw_elements_instanced_func)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);
	FOGL_STATIC gl_draw_elements_instanced_func* glDrawElementsInstanced;
	typedef void (FOGL_APIENTRY gl_tex_buffer_func)(GLenum target, GLenum internalformat, GLuint buffer);
	FOGL_STATIC gl_tex_buffer_func* glTexBuffer;
	typedef void (FOGL_APIENTRY gl_primitive_restart_index_func)(GLuint index);
	FOGL_STATIC gl_primitive_restart_index_func* glPrimitiveRestartIndex;
	typedef void (FOGL_APIENTRY gl_copy_buffer_sub_data_func)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
	FOGL_STATIC gl_copy_buffer_sub_data_func* glCopyBufferSubData;
	typedef void (FOGL_APIENTRY gl_get_uniform_indices_func)(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);
	FOGL_STATIC gl_get_uniform_indices_func* glGetUniformIndices;
	typedef void (FOGL_APIENTRY gl_get_active_uniformsiv_func)(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
	FOGL_STATIC gl_get_active_uniformsiv_func* glGetActiveUniformsiv;
	typedef void (FOGL_APIENTRY gl_get_active_uniform_name_func)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
	FOGL_STATIC gl_get_active_uniform_name_func* glGetActiveUniformName;
	typedef GLuint(FOGL_APIENTRY gl_get_uniform_block_index_func)(GLuint program, const GLchar *uniformBlockName);
	FOGL_STATIC gl_get_uniform_block_index_func* glGetUniformBlockIndex;
	typedef void (FOGL_APIENTRY gl_get_active_uniform_blockiv_func)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
	FOGL_STATIC gl_get_active_uniform_blockiv_func* glGetActiveUniformBlockiv;
	typedef void (FOGL_APIENTRY gl_get_active_uniform_block_name_func)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
	FOGL_STATIC gl_get_active_uniform_block_name_func* glGetActiveUniformBlockName;
	typedef void (FOGL_APIENTRY gl_uniform_block_binding_func)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
	FOGL_STATIC gl_uniform_block_binding_func* glUniformBlockBinding;
#	else
	FOGL_GLAPI void FOGL_APIENTRY glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
	FOGL_GLAPI void FOGL_APIENTRY glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);
	FOGL_GLAPI void FOGL_APIENTRY glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer);
	FOGL_GLAPI void FOGL_APIENTRY glPrimitiveRestartIndex(GLuint index);
	FOGL_GLAPI void FOGL_APIENTRY glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
	FOGL_GLAPI void FOGL_APIENTRY glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);
	FOGL_GLAPI void FOGL_APIENTRY glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
	FOGL_GLAPI GLuint FOGL_APIENTRY glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName);
	FOGL_GLAPI void FOGL_APIENTRY glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
	FOGL_GLAPI void FOGL_APIENTRY glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
#	endif // FOGL_STATIC
#endif // GL_VERSION_3_1
#ifndef GL_VERSION_3_2
#	define GL_VERSION_3_2 1
	typedef struct __GLsync *GLsync;
	typedef uint64_t GLuint64;
	typedef int64_t GLint64;
	static constexpr uint32_t GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001;
	static constexpr uint32_t GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002;
	static constexpr uint32_t GL_LINES_ADJACENCY = 0x000A;
	static constexpr uint32_t GL_LINE_STRIP_ADJACENCY = 0x000B;
	static constexpr uint32_t GL_TRIANGLES_ADJACENCY = 0x000C;
	static constexpr uint32_t GL_TRIANGLE_STRIP_ADJACENCY = 0x000D;
	static constexpr uint32_t GL_PROGRAM_POINT_SIZE = 0x8642;
	static constexpr uint32_t GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29;
	static constexpr uint32_t GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7;
	static constexpr uint32_t GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8;
	static constexpr uint32_t GL_GEOMETRY_SHADER = 0x8DD9;
	static constexpr uint32_t GL_GEOMETRY_VERTICES_OUT = 0x8916;
	static constexpr uint32_t GL_GEOMETRY_INPUT_TYPE = 0x8917;
	static constexpr uint32_t GL_GEOMETRY_OUTPUT_TYPE = 0x8918;
	static constexpr uint32_t GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF;
	static constexpr uint32_t GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0;
	static constexpr uint32_t GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1;
	static constexpr uint32_t GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
	static constexpr uint32_t GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123;
	static constexpr uint32_t GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124;
	static constexpr uint32_t GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
	static constexpr uint32_t GL_CONTEXT_PROFILE_MASK = 0x9126;
	static constexpr uint32_t GL_DEPTH_CLAMP = 0x864F;
	static constexpr uint32_t GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C;
	static constexpr uint32_t GL_FIRST_VERTEX_CONVENTION = 0x8E4D;
	static constexpr uint32_t GL_LAST_VERTEX_CONVENTION = 0x8E4E;
	static constexpr uint32_t GL_PROVOKING_VERTEX = 0x8E4F;
	static constexpr uint32_t GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F;
	static constexpr uint32_t GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111;
	static constexpr uint32_t GL_OBJECT_TYPE = 0x9112;
	static constexpr uint32_t GL_SYNC_CONDITION = 0x9113;
	static constexpr uint32_t GL_SYNC_STATUS = 0x9114;
	static constexpr uint32_t GL_SYNC_FLAGS = 0x9115;
	static constexpr uint32_t GL_SYNC_FENCE = 0x9116;
	static constexpr uint32_t GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
	static constexpr uint32_t GL_UNSIGNALED = 0x9118;
	static constexpr uint32_t GL_SIGNALED = 0x9119;
	static constexpr uint32_t GL_ALREADY_SIGNALED = 0x911A;
	static constexpr uint32_t GL_TIMEOUT_EXPIRED = 0x911B;
	static constexpr uint32_t GL_CONDITION_SATISFIED = 0x911C;
	static constexpr uint32_t GL_WAIT_FAILED = 0x911D;
	static constexpr uint64_t GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFFull;
	static constexpr uint32_t GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
	static constexpr uint32_t GL_SAMPLE_POSITION = 0x8E50;
	static constexpr uint32_t GL_SAMPLE_MASK = 0x8E51;
	static constexpr uint32_t GL_SAMPLE_MASK_VALUE = 0x8E52;
	static constexpr uint32_t GL_MAX_SAMPLE_MASK_WORDS = 0x8E59;
	static constexpr uint32_t GL_TEXTURE_2D_MULTISAMPLE = 0x9100;
	static constexpr uint32_t GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101;
	static constexpr uint32_t GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
	static constexpr uint32_t GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103;
	static constexpr uint32_t GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
	static constexpr uint32_t GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
	static constexpr uint32_t GL_TEXTURE_SAMPLES = 0x9106;
	static constexpr uint32_t GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
	static constexpr uint32_t GL_SAMPLER_2D_MULTISAMPLE = 0x9108;
	static constexpr uint32_t GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
	static constexpr uint32_t GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A;
	static constexpr uint32_t GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B;
	static constexpr uint32_t GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C;
	static constexpr uint32_t GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D;
	static constexpr uint32_t GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E;
	static constexpr uint32_t GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
	static constexpr uint32_t GL_MAX_INTEGER_SAMPLES = 0x9110;
#	ifdef FOGL_STATIC
	typedef void (FOGL_APIENTRY gl_draw_elements_base_vertex_func)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
	FOGL_STATIC gl_draw_elements_base_vertex_func* glDrawElementsBaseVertex;
	typedef void (FOGL_APIENTRY gl_draw_range_elements_base_vertex_func)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
	FOGL_STATIC gl_draw_range_elements_base_vertex_func* glDrawRangeElementsBaseVertex;
	typedef void (FOGL_APIENTRY gl_draw_elements_instanced_base_vertex_func)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
	FOGL_STATIC gl_draw_elements_instanced_base_vertex_func* glDrawElementsInstancedBaseVertex;
	typedef void (FOGL_APIENTRY gl_multi_draw_elements_base_vertex_func)(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex);
	FOGL_STATIC gl_multi_draw_elements_base_vertex_func* glMultiDrawElementsBaseVertex;
	typedef void (FOGL_APIENTRY gl_provoking_vertex_func)(GLenum mode);
	FOGL_STATIC gl_provoking_vertex_func* glProvokingVertex;
	typedef GLsync(FOGL_APIENTRY gl_fence_sync_func)(GLenum condition, GLbitfield flags);
	FOGL_STATIC gl_fence_sync_func* glFenceSync;
	typedef GLboolean(FOGL_APIENTRY gl_is_sync_func)(GLsync sync);
	FOGL_STATIC gl_is_sync_func* glIsSync;
	typedef void (FOGL_APIENTRY gl_delete_sync_func)(GLsync sync);
	FOGL_STATIC gl_delete_sync_func* glDeleteSync;
	typedef GLenum(FOGL_APIENTRY gl_client_wait_sync_func)(GLsync sync, GLbitfield flags, GLuint64 timeout);
	FOGL_STATIC gl_client_wait_sync_func* glClientWaitSync;
	typedef void (FOGL_APIENTRY gl_wait_sync_func)(GLsync sync, GLbitfield flags, GLuint64 timeout);
	FOGL_STATIC gl_wait_sync_func* glWaitSync;
	typedef void (FOGL_APIENTRY gl_get_integer64v_func)(GLenum pname, GLint64 *data);
	FOGL_STATIC gl_get_integer64v_func* glGetInteger64v;
	typedef void (FOGL_APIENTRY gl_get_synciv_func)(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
	FOGL_STATIC gl_get_synciv_func* glGetSynciv;
	typedef void (FOGL_APIENTRY gl_get_integer64i_v_func)(GLenum target, GLuint index, GLint64 *data);
	FOGL_STATIC gl_get_integer64i_v_func* glGetInteger64i_v;
	typedef void (FOGL_APIENTRY gl_get_buffer_parameteri64v_func)(GLenum target, GLenum pname, GLint64 *params);
	FOGL_STATIC gl_get_buffer_parameteri64v_func* glGetBufferParameteri64v;
	typedef void (FOGL_APIENTRY gl_framebuffer_texture_func)(GLenum target, GLenum attachment, GLuint texture, GLint level);
	FOGL_STATIC gl_framebuffer_texture_func* glFramebufferTexture;
	typedef void (FOGL_APIENTRY gl_tex_image2_d_multisample_func)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
	FOGL_STATIC gl_tex_image2_d_multisample_func* glTexImage2DMultisample;
	typedef void (FOGL_APIENTRY gl_tex_image3_d_multisample_func)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
	FOGL_STATIC gl_tex_image3_d_multisample_func* glTexImage3DMultisample;
	typedef void (FOGL_APIENTRY gl_get_multisamplefv_func)(GLenum pname, GLuint index, GLfloat *val);
	FOGL_STATIC gl_get_multisamplefv_func* glGetMultisamplefv;
	typedef void (FOGL_APIENTRY gl_sample_maski_func)(GLuint maskNumber, GLbitfield mask);
	FOGL_STATIC gl_sample_maski_func* glSampleMaski;
#	else
	FOGL_GLAPI void FOGL_APIENTRY glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
	FOGL_GLAPI void FOGL_APIENTRY glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
	FOGL_GLAPI void FOGL_APIENTRY glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
	FOGL_GLAPI void FOGL_APIENTRY glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex);
	FOGL_GLAPI void FOGL_APIENTRY glProvokingVertex(GLenum mode);
	FOGL_GLAPI GLsync FOGL_APIENTRY glFenceSync(GLenum condition, GLbitfield flags);
	FOGL_GLAPI GLboolean FOGL_APIENTRY glIsSync(GLsync sync);
	FOGL_GLAPI void FOGL_APIENTRY glDeleteSync(GLsync sync);
	FOGL_GLAPI GLenum FOGL_APIENTRY glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
	FOGL_GLAPI void FOGL_APIENTRY glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
	FOGL_GLAPI void FOGL_APIENTRY glGetInteger64v(GLenum pname, GLint64 *data);
	FOGL_GLAPI void FOGL_APIENTRY glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
	FOGL_GLAPI void FOGL_APIENTRY glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data);
	FOGL_GLAPI void FOGL_APIENTRY glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params);
	FOGL_GLAPI void FOGL_APIENTRY glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level);
	FOGL_GLAPI void FOGL_APIENTRY glTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
	FOGL_GLAPI void FOGL_APIENTRY glTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
	FOGL_GLAPI void FOGL_APIENTRY glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val);
	FOGL_GLAPI void FOGL_APIENTRY glSampleMaski(GLuint maskNumber, GLbitfield mask);
#	endif // FOGL_STATIC
#endif // GL_VERSION_3_2
#ifndef GL_VERSION_3_3
#	define GL_VERSION_3_3 1
	static constexpr uint32_t GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;
	static constexpr uint32_t GL_SRC1_COLOR = 0x88F9;
	static constexpr uint32_t GL_ONE_MINUS_SRC1_COLOR = 0x88FA;
	static constexpr uint32_t GL_ONE_MINUS_SRC1_ALPHA = 0x88FB;
	static constexpr uint32_t GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC;
	static constexpr uint32_t GL_ANY_SAMPLES_PASSED = 0x8C2F;
	static constexpr uint32_t GL_SAMPLER_BINDING = 0x8919;
	static constexpr uint32_t GL_RGB10_A2UI = 0x906F;
	static constexpr uint32_t GL_TEXTURE_SWIZZLE_R = 0x8E42;
	static constexpr uint32_t GL_TEXTURE_SWIZZLE_G = 0x8E43;
	static constexpr uint32_t GL_TEXTURE_SWIZZLE_B = 0x8E44;
	static constexpr uint32_t GL_TEXTURE_SWIZZLE_A = 0x8E45;
	static constexpr uint32_t GL_TEXTURE_SWIZZLE_RGBA = 0x8E46;
	static constexpr uint32_t GL_TIME_ELAPSED = 0x88BF;
	static constexpr uint32_t GL_TIMESTAMP = 0x8E28;
	static constexpr uint32_t GL_INT_2_10_10_10_REV = 0x8D9F;
#	ifdef FOGL_STATIC
	typedef void (FOGL_APIENTRY gl_bind_frag_data_location_indexed_func)(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
	FOGL_STATIC gl_bind_frag_data_location_indexed_func* glBindFragDataLocationIndexed;
	typedef GLint(FOGL_APIENTRY gl_get_frag_data_index_func)(GLuint program, const GLchar *name);
	FOGL_STATIC gl_get_frag_data_index_func* glGetFragDataIndex;
	typedef void (FOGL_APIENTRY gl_gen_samplers_func)(GLsizei count, GLuint *samplers);
	FOGL_STATIC gl_gen_samplers_func* glGenSamplers;
	typedef void (FOGL_APIENTRY gl_delete_samplers_func)(GLsizei count, const GLuint *samplers);
	FOGL_STATIC gl_delete_samplers_func* glDeleteSamplers;
	typedef GLboolean(FOGL_APIENTRY gl_is_sampler_func)(GLuint sampler);
	FOGL_STATIC gl_is_sampler_func* glIsSampler;
	typedef void (FOGL_APIENTRY gl_bind_sampler_func)(GLuint unit, GLuint sampler);
	FOGL_STATIC gl_bind_sampler_func* glBindSampler;
	typedef void (FOGL_APIENTRY gl_sampler_parameteri_func)(GLuint sampler, GLenum pname, GLint param);
	FOGL_STATIC gl_sampler_parameteri_func* glSamplerParameteri;
	typedef void (FOGL_APIENTRY gl_sampler_parameteriv_func)(GLuint sampler, GLenum pname, const GLint *param);
	FOGL_STATIC gl_sampler_parameteriv_func* glSamplerParameteriv;
	typedef void (FOGL_APIENTRY gl_sampler_parameterf_func)(GLuint sampler, GLenum pname, GLfloat param);
	FOGL_STATIC gl_sampler_parameterf_func* glSamplerParameterf;
	typedef void (FOGL_APIENTRY gl_sampler_parameterfv_func)(GLuint sampler, GLenum pname, const GLfloat *param);
	FOGL_STATIC gl_sampler_parameterfv_func* glSamplerParameterfv;
	typedef void (FOGL_APIENTRY gl_sampler_parameter_iiv_func)(GLuint sampler, GLenum pname, const GLint *param);
	FOGL_STATIC gl_sampler_parameter_iiv_func* glSamplerParameterIiv;
	typedef void (FOGL_APIENTRY gl_sampler_parameter_iuiv_func)(GLuint sampler, GLenum pname, const GLuint *param);
	FOGL_STATIC gl_sampler_parameter_iuiv_func* glSamplerParameterIuiv;
	typedef void (FOGL_APIENTRY gl_get_sampler_parameteriv_func)(GLuint sampler, GLenum pname, GLint *params);
	FOGL_STATIC gl_get_sampler_parameteriv_func* glGetSamplerParameteriv;
	typedef void (FOGL_APIENTRY gl_get_sampler_parameter_iiv_func)(GLuint sampler, GLenum pname, GLint *params);
	FOGL_STATIC gl_get_sampler_parameter_iiv_func* glGetSamplerParameterIiv;
	typedef void (FOGL_APIENTRY gl_get_sampler_parameterfv_func)(GLuint sampler, GLenum pname, GLfloat *params);
	FOGL_STATIC gl_get_sampler_parameterfv_func* glGetSamplerParameterfv;
	typedef void (FOGL_APIENTRY gl_get_sampler_parameter_iuiv_func)(GLuint sampler, GLenum pname, GLuint *params);
	FOGL_STATIC gl_get_sampler_parameter_iuiv_func* glGetSamplerParameterIuiv;
	typedef void (FOGL_APIENTRY gl_query_counter_func)(GLuint id, GLenum target);
	FOGL_STATIC gl_query_counter_func* glQueryCounter;
	typedef void (FOGL_APIENTRY gl_get_query_objecti64v_func)(GLuint id, GLenum pname, GLint64 *params);
	FOGL_STATIC gl_get_query_objecti64v_func* glGetQueryObjecti64v;
	typedef void (FOGL_APIENTRY gl_get_query_objectui64v_func)(GLuint id, GLenum pname, GLuint64 *params);
	FOGL_STATIC gl_get_query_objectui64v_func* glGetQueryObjectui64v;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_divisor_func)(GLuint index, GLuint divisor);
	FOGL_STATIC gl_vertex_attrib_divisor_func* glVertexAttribDivisor;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_p1ui_func)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
	FOGL_STATIC gl_vertex_attrib_p1ui_func* glVertexAttribP1ui;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_p1uiv_func)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
	FOGL_STATIC gl_vertex_attrib_p1uiv_func* glVertexAttribP1uiv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_p2ui_func)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
	FOGL_STATIC gl_vertex_attrib_p2ui_func* glVertexAttribP2ui;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_p2uiv_func)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
	FOGL_STATIC gl_vertex_attrib_p2uiv_func* glVertexAttribP2uiv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_p3ui_func)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
	FOGL_STATIC gl_vertex_attrib_p3ui_func* glVertexAttribP3ui;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_p3uiv_func)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
	FOGL_STATIC gl_vertex_attrib_p3uiv_func* glVertexAttribP3uiv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_p4ui_func)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
	FOGL_STATIC gl_vertex_attrib_p4ui_func* glVertexAttribP4ui;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_p4uiv_func)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
	FOGL_STATIC gl_vertex_attrib_p4uiv_func* glVertexAttribP4uiv;
	typedef void (FOGL_APIENTRY gl_vertex_p2ui_func)(GLenum type, GLuint value);
	FOGL_STATIC gl_vertex_p2ui_func* glVertexP2ui;
	typedef void (FOGL_APIENTRY gl_vertex_p2uiv_func)(GLenum type, const GLuint *value);
	FOGL_STATIC gl_vertex_p2uiv_func* glVertexP2uiv;
	typedef void (FOGL_APIENTRY gl_vertex_p3ui_func)(GLenum type, GLuint value);
	FOGL_STATIC gl_vertex_p3ui_func* glVertexP3ui;
	typedef void (FOGL_APIENTRY gl_vertex_p3uiv_func)(GLenum type, const GLuint *value);
	FOGL_STATIC gl_vertex_p3uiv_func* glVertexP3uiv;
	typedef void (FOGL_APIENTRY gl_vertex_p4ui_func)(GLenum type, GLuint value);
	FOGL_STATIC gl_vertex_p4ui_func* glVertexP4ui;
	typedef void (FOGL_APIENTRY gl_vertex_p4uiv_func)(GLenum type, const GLuint *value);
	FOGL_STATIC gl_vertex_p4uiv_func* glVertexP4uiv;
	typedef void (FOGL_APIENTRY gl_tex_coord_p1ui_func)(GLenum type, GLuint coords);
	FOGL_STATIC gl_tex_coord_p1ui_func* glTexCoordP1ui;
	typedef void (FOGL_APIENTRY gl_tex_coord_p1uiv_func)(GLenum type, const GLuint *coords);
	FOGL_STATIC gl_tex_coord_p1uiv_func* glTexCoordP1uiv;
	typedef void (FOGL_APIENTRY gl_tex_coord_p2ui_func)(GLenum type, GLuint coords);
	FOGL_STATIC gl_tex_coord_p2ui_func* glTexCoordP2ui;
	typedef void (FOGL_APIENTRY gl_tex_coord_p2uiv_func)(GLenum type, const GLuint *coords);
	FOGL_STATIC gl_tex_coord_p2uiv_func* glTexCoordP2uiv;
	typedef void (FOGL_APIENTRY gl_tex_coord_p3ui_func)(GLenum type, GLuint coords);
	FOGL_STATIC gl_tex_coord_p3ui_func* glTexCoordP3ui;
	typedef void (FOGL_APIENTRY gl_tex_coord_p3uiv_func)(GLenum type, const GLuint *coords);
	FOGL_STATIC gl_tex_coord_p3uiv_func* glTexCoordP3uiv;
	typedef void (FOGL_APIENTRY gl_tex_coord_p4ui_func)(GLenum type, GLuint coords);
	FOGL_STATIC gl_tex_coord_p4ui_func* glTexCoordP4ui;
	typedef void (FOGL_APIENTRY gl_tex_coord_p4uiv_func)(GLenum type, const GLuint *coords);
	FOGL_STATIC gl_tex_coord_p4uiv_func* glTexCoordP4uiv;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord_p1ui_func)(GLenum texture, GLenum type, GLuint coords);
	FOGL_STATIC gl_multi_tex_coord_p1ui_func* glMultiTexCoordP1ui;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord_p1uiv_func)(GLenum texture, GLenum type, const GLuint *coords);
	FOGL_STATIC gl_multi_tex_coord_p1uiv_func* glMultiTexCoordP1uiv;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord_p2ui_func)(GLenum texture, GLenum type, GLuint coords);
	FOGL_STATIC gl_multi_tex_coord_p2ui_func* glMultiTexCoordP2ui;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord_p2uiv_func)(GLenum texture, GLenum type, const GLuint *coords);
	FOGL_STATIC gl_multi_tex_coord_p2uiv_func* glMultiTexCoordP2uiv;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord_p3ui_func)(GLenum texture, GLenum type, GLuint coords);
	FOGL_STATIC gl_multi_tex_coord_p3ui_func* glMultiTexCoordP3ui;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord_p3uiv_func)(GLenum texture, GLenum type, const GLuint *coords);
	FOGL_STATIC gl_multi_tex_coord_p3uiv_func* glMultiTexCoordP3uiv;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord_p4ui_func)(GLenum texture, GLenum type, GLuint coords);
	FOGL_STATIC gl_multi_tex_coord_p4ui_func* glMultiTexCoordP4ui;
	typedef void (FOGL_APIENTRY gl_multi_tex_coord_p4uiv_func)(GLenum texture, GLenum type, const GLuint *coords);
	FOGL_STATIC gl_multi_tex_coord_p4uiv_func* glMultiTexCoordP4uiv;
	typedef void (FOGL_APIENTRY gl_normal_p3ui_func)(GLenum type, GLuint coords);
	FOGL_STATIC gl_normal_p3ui_func* glNormalP3ui;
	typedef void (FOGL_APIENTRY gl_normal_p3uiv_func)(GLenum type, const GLuint *coords);
	FOGL_STATIC gl_normal_p3uiv_func* glNormalP3uiv;
	typedef void (FOGL_APIENTRY gl_color_p3ui_func)(GLenum type, GLuint color);
	FOGL_STATIC gl_color_p3ui_func* glColorP3ui;
	typedef void (FOGL_APIENTRY gl_color_p3uiv_func)(GLenum type, const GLuint *color);
	FOGL_STATIC gl_color_p3uiv_func* glColorP3uiv;
	typedef void (FOGL_APIENTRY gl_color_p4ui_func)(GLenum type, GLuint color);
	FOGL_STATIC gl_color_p4ui_func* glColorP4ui;
	typedef void (FOGL_APIENTRY gl_color_p4uiv_func)(GLenum type, const GLuint *color);
	FOGL_STATIC gl_color_p4uiv_func* glColorP4uiv;
	typedef void (FOGL_APIENTRY gl_secondary_color_p3ui_func)(GLenum type, GLuint color);
	FOGL_STATIC gl_secondary_color_p3ui_func* glSecondaryColorP3ui;
	typedef void (FOGL_APIENTRY gl_secondary_color_p3uiv_func)(GLenum type, const GLuint *color);
	FOGL_STATIC gl_secondary_color_p3uiv_func* glSecondaryColorP3uiv;
#	else
	FOGL_GLAPI void FOGL_APIENTRY glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
	FOGL_GLAPI GLint FOGL_APIENTRY glGetFragDataIndex(GLuint program, const GLchar *name);
	FOGL_GLAPI void FOGL_APIENTRY glGenSamplers(GLsizei count, GLuint *samplers);
	FOGL_GLAPI void FOGL_APIENTRY glDeleteSamplers(GLsizei count, const GLuint *samplers);
	FOGL_GLAPI GLboolean FOGL_APIENTRY glIsSampler(GLuint sampler);
	FOGL_GLAPI void FOGL_APIENTRY glBindSampler(GLuint unit, GLuint sampler);
	FOGL_GLAPI void FOGL_APIENTRY glSamplerParameteri(GLuint sampler, GLenum pname, GLint param);
	FOGL_GLAPI void FOGL_APIENTRY glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *param);
	FOGL_GLAPI void FOGL_APIENTRY glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param);
	FOGL_GLAPI void FOGL_APIENTRY glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *param);
	FOGL_GLAPI void FOGL_APIENTRY glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *param);
	FOGL_GLAPI void FOGL_APIENTRY glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *param);
	FOGL_GLAPI void FOGL_APIENTRY glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params);
	FOGL_GLAPI void FOGL_APIENTRY glQueryCounter(GLuint id, GLenum target);
	FOGL_GLAPI void FOGL_APIENTRY glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribDivisor(GLuint index, GLuint divisor);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
	FOGL_GLAPI void FOGL_APIENTRY glVertexP2ui(GLenum type, GLuint value);
	FOGL_GLAPI void FOGL_APIENTRY glVertexP2uiv(GLenum type, const GLuint *value);
	FOGL_GLAPI void FOGL_APIENTRY glVertexP3ui(GLenum type, GLuint value);
	FOGL_GLAPI void FOGL_APIENTRY glVertexP3uiv(GLenum type, const GLuint *value);
	FOGL_GLAPI void FOGL_APIENTRY glVertexP4ui(GLenum type, GLuint value);
	FOGL_GLAPI void FOGL_APIENTRY glVertexP4uiv(GLenum type, const GLuint *value);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoordP1ui(GLenum type, GLuint coords);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoordP1uiv(GLenum type, const GLuint *coords);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoordP2ui(GLenum type, GLuint coords);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoordP2uiv(GLenum type, const GLuint *coords);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoordP3ui(GLenum type, GLuint coords);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoordP3uiv(GLenum type, const GLuint *coords);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoordP4ui(GLenum type, GLuint coords);
	FOGL_GLAPI void FOGL_APIENTRY glTexCoordP4uiv(GLenum type, const GLuint *coords);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint *coords);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint *coords);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint *coords);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords);
	FOGL_GLAPI void FOGL_APIENTRY glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint *coords);
	FOGL_GLAPI void FOGL_APIENTRY glNormalP3ui(GLenum type, GLuint coords);
	FOGL_GLAPI void FOGL_APIENTRY glNormalP3uiv(GLenum type, const GLuint *coords);
	FOGL_GLAPI void FOGL_APIENTRY glColorP3ui(GLenum type, GLuint color);
	FOGL_GLAPI void FOGL_APIENTRY glColorP3uiv(GLenum type, const GLuint *color);
	FOGL_GLAPI void FOGL_APIENTRY glColorP4ui(GLenum type, GLuint color);
	FOGL_GLAPI void FOGL_APIENTRY glColorP4uiv(GLenum type, const GLuint *color);
	FOGL_GLAPI void FOGL_APIENTRY glSecondaryColorP3ui(GLenum type, GLuint color);
	FOGL_GLAPI void FOGL_APIENTRY glSecondaryColorP3uiv(GLenum type, const GLuint *color);
#	endif // FOGL_STATIC
#endif // GL_VERSION_3_3
#ifndef GL_VERSION_4_0
#	define GL_VERSION_4_0 1
	static constexpr uint32_t GL_SAMPLE_SHADING = 0x8C36;
	static constexpr uint32_t GL_MIN_SAMPLE_SHADING_VALUE = 0x8C37;
	static constexpr uint32_t GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E;
	static constexpr uint32_t GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F;
	static constexpr uint32_t GL_TEXTURE_CUBE_MAP_ARRAY = 0x9009;
	static constexpr uint32_t GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A;
	static constexpr uint32_t GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B;
	static constexpr uint32_t GL_SAMPLER_CUBE_MAP_ARRAY = 0x900C;
	static constexpr uint32_t GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D;
	static constexpr uint32_t GL_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E;
	static constexpr uint32_t GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F;
	static constexpr uint32_t GL_DRAW_INDIRECT_BUFFER = 0x8F3F;
	static constexpr uint32_t GL_DRAW_INDIRECT_BUFFER_BINDING = 0x8F43;
	static constexpr uint32_t GL_GEOMETRY_SHADER_INVOCATIONS = 0x887F;
	static constexpr uint32_t GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A;
	static constexpr uint32_t GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B;
	static constexpr uint32_t GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C;
	static constexpr uint32_t GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D;
	static constexpr uint32_t GL_MAX_VERTEX_STREAMS = 0x8E71;
	static constexpr uint32_t GL_DOUBLE_VEC2 = 0x8FFC;
	static constexpr uint32_t GL_DOUBLE_VEC3 = 0x8FFD;
	static constexpr uint32_t GL_DOUBLE_VEC4 = 0x8FFE;
	static constexpr uint32_t GL_DOUBLE_MAT2 = 0x8F46;
	static constexpr uint32_t GL_DOUBLE_MAT3 = 0x8F47;
	static constexpr uint32_t GL_DOUBLE_MAT4 = 0x8F48;
	static constexpr uint32_t GL_DOUBLE_MAT2x3 = 0x8F49;
	static constexpr uint32_t GL_DOUBLE_MAT2x4 = 0x8F4A;
	static constexpr uint32_t GL_DOUBLE_MAT3x2 = 0x8F4B;
	static constexpr uint32_t GL_DOUBLE_MAT3x4 = 0x8F4C;
	static constexpr uint32_t GL_DOUBLE_MAT4x2 = 0x8F4D;
	static constexpr uint32_t GL_DOUBLE_MAT4x3 = 0x8F4E;
	static constexpr uint32_t GL_ACTIVE_SUBROUTINES = 0x8DE5;
	static constexpr uint32_t GL_ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6;
	static constexpr uint32_t GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47;
	static constexpr uint32_t GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48;
	static constexpr uint32_t GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49;
	static constexpr uint32_t GL_MAX_SUBROUTINES = 0x8DE7;
	static constexpr uint32_t GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8;
	static constexpr uint32_t GL_NUM_COMPATIBLE_SUBROUTINES = 0x8E4A;
	static constexpr uint32_t GL_COMPATIBLE_SUBROUTINES = 0x8E4B;
	static constexpr uint32_t GL_PATCHES = 0x000E;
	static constexpr uint32_t GL_PATCH_VERTICES = 0x8E72;
	static constexpr uint32_t GL_PATCH_DEFAULT_INNER_LEVEL = 0x8E73;
	static constexpr uint32_t GL_PATCH_DEFAULT_OUTER_LEVEL = 0x8E74;
	static constexpr uint32_t GL_TESS_CONTROL_OUTPUT_VERTICES = 0x8E75;
	static constexpr uint32_t GL_TESS_GEN_MODE = 0x8E76;
	static constexpr uint32_t GL_TESS_GEN_SPACING = 0x8E77;
	static constexpr uint32_t GL_TESS_GEN_VERTEX_ORDER = 0x8E78;
	static constexpr uint32_t GL_TESS_GEN_POINT_MODE = 0x8E79;
	static constexpr uint32_t GL_ISOLINES = 0x8E7A;
	static constexpr uint32_t GL_FRACTIONAL_ODD = 0x8E7B;
	static constexpr uint32_t GL_FRACTIONAL_EVEN = 0x8E7C;
	static constexpr uint32_t GL_MAX_PATCH_VERTICES = 0x8E7D;
	static constexpr uint32_t GL_MAX_TESS_GEN_LEVEL = 0x8E7E;
	static constexpr uint32_t GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F;
	static constexpr uint32_t GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80;
	static constexpr uint32_t GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81;
	static constexpr uint32_t GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82;
	static constexpr uint32_t GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83;
	static constexpr uint32_t GL_MAX_TESS_PATCH_COMPONENTS = 0x8E84;
	static constexpr uint32_t GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85;
	static constexpr uint32_t GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86;
	static constexpr uint32_t GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89;
	static constexpr uint32_t GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A;
	static constexpr uint32_t GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C;
	static constexpr uint32_t GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D;
	static constexpr uint32_t GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E;
	static constexpr uint32_t GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F;
	static constexpr uint32_t GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0;
	static constexpr uint32_t GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1;
	static constexpr uint32_t GL_TESS_EVALUATION_SHADER = 0x8E87;
	static constexpr uint32_t GL_TESS_CONTROL_SHADER = 0x8E88;
	static constexpr uint32_t GL_TRANSFORM_FEEDBACK = 0x8E22;
	static constexpr uint32_t GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23;
	static constexpr uint32_t GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24;
	static constexpr uint32_t GL_TRANSFORM_FEEDBACK_BINDING = 0x8E25;
	static constexpr uint32_t GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70;
#	ifdef FOGL_STATIC
	typedef void (FOGL_APIENTRY gl_min_sample_shading_func)(GLfloat value);
	FOGL_STATIC gl_min_sample_shading_func* glMinSampleShading;
	typedef void (FOGL_APIENTRY gl_blend_equationi_func)(GLuint buf, GLenum mode);
	FOGL_STATIC gl_blend_equationi_func* glBlendEquationi;
	typedef void (FOGL_APIENTRY gl_blend_equation_separatei_func)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
	FOGL_STATIC gl_blend_equation_separatei_func* glBlendEquationSeparatei;
	typedef void (FOGL_APIENTRY gl_blend_funci_func)(GLuint buf, GLenum src, GLenum dst);
	FOGL_STATIC gl_blend_funci_func* glBlendFunci;
	typedef void (FOGL_APIENTRY gl_blend_func_separatei_func)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
	FOGL_STATIC gl_blend_func_separatei_func* glBlendFuncSeparatei;
	typedef void (FOGL_APIENTRY gl_draw_arrays_indirect_func)(GLenum mode, const void *indirect);
	FOGL_STATIC gl_draw_arrays_indirect_func* glDrawArraysIndirect;
	typedef void (FOGL_APIENTRY gl_draw_elements_indirect_func)(GLenum mode, GLenum type, const void *indirect);
	FOGL_STATIC gl_draw_elements_indirect_func* glDrawElementsIndirect;
	typedef void (FOGL_APIENTRY gl_uniform1d_func)(GLint location, GLdouble x);
	FOGL_STATIC gl_uniform1d_func* glUniform1d;
	typedef void (FOGL_APIENTRY gl_uniform2d_func)(GLint location, GLdouble x, GLdouble y);
	FOGL_STATIC gl_uniform2d_func* glUniform2d;
	typedef void (FOGL_APIENTRY gl_uniform3d_func)(GLint location, GLdouble x, GLdouble y, GLdouble z);
	FOGL_STATIC gl_uniform3d_func* glUniform3d;
	typedef void (FOGL_APIENTRY gl_uniform4d_func)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	FOGL_STATIC gl_uniform4d_func* glUniform4d;
	typedef void (FOGL_APIENTRY gl_uniform1dv_func)(GLint location, GLsizei count, const GLdouble *value);
	FOGL_STATIC gl_uniform1dv_func* glUniform1dv;
	typedef void (FOGL_APIENTRY gl_uniform2dv_func)(GLint location, GLsizei count, const GLdouble *value);
	FOGL_STATIC gl_uniform2dv_func* glUniform2dv;
	typedef void (FOGL_APIENTRY gl_uniform3dv_func)(GLint location, GLsizei count, const GLdouble *value);
	FOGL_STATIC gl_uniform3dv_func* glUniform3dv;
	typedef void (FOGL_APIENTRY gl_uniform4dv_func)(GLint location, GLsizei count, const GLdouble *value);
	FOGL_STATIC gl_uniform4dv_func* glUniform4dv;
	typedef void (FOGL_APIENTRY gl_uniform_matrix2dv_func)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	FOGL_STATIC gl_uniform_matrix2dv_func* glUniformMatrix2dv;
	typedef void (FOGL_APIENTRY gl_uniform_matrix3dv_func)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	FOGL_STATIC gl_uniform_matrix3dv_func* glUniformMatrix3dv;
	typedef void (FOGL_APIENTRY gl_uniform_matrix4dv_func)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	FOGL_STATIC gl_uniform_matrix4dv_func* glUniformMatrix4dv;
	typedef void (FOGL_APIENTRY gl_uniform_matrix2x3dv_func)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	FOGL_STATIC gl_uniform_matrix2x3dv_func* glUniformMatrix2x3dv;
	typedef void (FOGL_APIENTRY gl_uniform_matrix2x4dv_func)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	FOGL_STATIC gl_uniform_matrix2x4dv_func* glUniformMatrix2x4dv;
	typedef void (FOGL_APIENTRY gl_uniform_matrix3x2dv_func)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	FOGL_STATIC gl_uniform_matrix3x2dv_func* glUniformMatrix3x2dv;
	typedef void (FOGL_APIENTRY gl_uniform_matrix3x4dv_func)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	FOGL_STATIC gl_uniform_matrix3x4dv_func* glUniformMatrix3x4dv;
	typedef void (FOGL_APIENTRY gl_uniform_matrix4x2dv_func)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	FOGL_STATIC gl_uniform_matrix4x2dv_func* glUniformMatrix4x2dv;
	typedef void (FOGL_APIENTRY gl_uniform_matrix4x3dv_func)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	FOGL_STATIC gl_uniform_matrix4x3dv_func* glUniformMatrix4x3dv;
	typedef void (FOGL_APIENTRY gl_get_uniformdv_func)(GLuint program, GLint location, GLdouble *params);
	FOGL_STATIC gl_get_uniformdv_func* glGetUniformdv;
	typedef GLint(FOGL_APIENTRY gl_get_subroutine_uniform_location_func)(GLuint program, GLenum shadertype, const GLchar *name);
	FOGL_STATIC gl_get_subroutine_uniform_location_func* glGetSubroutineUniformLocation;
	typedef GLuint(FOGL_APIENTRY gl_get_subroutine_index_func)(GLuint program, GLenum shadertype, const GLchar *name);
	FOGL_STATIC gl_get_subroutine_index_func* glGetSubroutineIndex;
	typedef void (FOGL_APIENTRY gl_get_active_subroutine_uniformiv_func)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
	FOGL_STATIC gl_get_active_subroutine_uniformiv_func* glGetActiveSubroutineUniformiv;
	typedef void (FOGL_APIENTRY gl_get_active_subroutine_uniform_name_func)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
	FOGL_STATIC gl_get_active_subroutine_uniform_name_func* glGetActiveSubroutineUniformName;
	typedef void (FOGL_APIENTRY gl_get_active_subroutine_name_func)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
	FOGL_STATIC gl_get_active_subroutine_name_func* glGetActiveSubroutineName;
	typedef void (FOGL_APIENTRY gl_uniform_subroutinesuiv_func)(GLenum shadertype, GLsizei count, const GLuint *indices);
	FOGL_STATIC gl_uniform_subroutinesuiv_func* glUniformSubroutinesuiv;
	typedef void (FOGL_APIENTRY gl_get_uniform_subroutineuiv_func)(GLenum shadertype, GLint location, GLuint *params);
	FOGL_STATIC gl_get_uniform_subroutineuiv_func* glGetUniformSubroutineuiv;
	typedef void (FOGL_APIENTRY gl_get_program_stageiv_func)(GLuint program, GLenum shadertype, GLenum pname, GLint *values);
	FOGL_STATIC gl_get_program_stageiv_func* glGetProgramStageiv;
	typedef void (FOGL_APIENTRY gl_patch_parameteri_func)(GLenum pname, GLint value);
	FOGL_STATIC gl_patch_parameteri_func* glPatchParameteri;
	typedef void (FOGL_APIENTRY gl_patch_parameterfv_func)(GLenum pname, const GLfloat *values);
	FOGL_STATIC gl_patch_parameterfv_func* glPatchParameterfv;
	typedef void (FOGL_APIENTRY gl_bind_transform_feedback_func)(GLenum target, GLuint id);
	FOGL_STATIC gl_bind_transform_feedback_func* glBindTransformFeedback;
	typedef void (FOGL_APIENTRY gl_delete_transform_feedbacks_func)(GLsizei n, const GLuint *ids);
	FOGL_STATIC gl_delete_transform_feedbacks_func* glDeleteTransformFeedbacks;
	typedef void (FOGL_APIENTRY gl_gen_transform_feedbacks_func)(GLsizei n, GLuint *ids);
	FOGL_STATIC gl_gen_transform_feedbacks_func* glGenTransformFeedbacks;
	typedef GLboolean(FOGL_APIENTRY gl_is_transform_feedback_func)(GLuint id);
	FOGL_STATIC gl_is_transform_feedback_func* glIsTransformFeedback;
	typedef void (FOGL_APIENTRY gl_pause_transform_feedback_func)(void);
	FOGL_STATIC gl_pause_transform_feedback_func* glPauseTransformFeedback;
	typedef void (FOGL_APIENTRY gl_resume_transform_feedback_func)(void);
	FOGL_STATIC gl_resume_transform_feedback_func* glResumeTransformFeedback;
	typedef void (FOGL_APIENTRY gl_draw_transform_feedback_func)(GLenum mode, GLuint id);
	FOGL_STATIC gl_draw_transform_feedback_func* glDrawTransformFeedback;
	typedef void (FOGL_APIENTRY gl_draw_transform_feedback_stream_func)(GLenum mode, GLuint id, GLuint stream);
	FOGL_STATIC gl_draw_transform_feedback_stream_func* glDrawTransformFeedbackStream;
	typedef void (FOGL_APIENTRY gl_begin_query_indexed_func)(GLenum target, GLuint index, GLuint id);
	FOGL_STATIC gl_begin_query_indexed_func* glBeginQueryIndexed;
	typedef void (FOGL_APIENTRY gl_end_query_indexed_func)(GLenum target, GLuint index);
	FOGL_STATIC gl_end_query_indexed_func* glEndQueryIndexed;
	typedef void (FOGL_APIENTRY gl_get_query_indexediv_func)(GLenum target, GLuint index, GLenum pname, GLint *params);
	FOGL_STATIC gl_get_query_indexediv_func* glGetQueryIndexediv;
#	else
	FOGL_GLAPI void FOGL_APIENTRY glMinSampleShading(GLfloat value);
	FOGL_GLAPI void FOGL_APIENTRY glBlendEquationi(GLuint buf, GLenum mode);
	FOGL_GLAPI void FOGL_APIENTRY glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
	FOGL_GLAPI void FOGL_APIENTRY glBlendFunci(GLuint buf, GLenum src, GLenum dst);
	FOGL_GLAPI void FOGL_APIENTRY glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
	FOGL_GLAPI void FOGL_APIENTRY glDrawArraysIndirect(GLenum mode, const void *indirect);
	FOGL_GLAPI void FOGL_APIENTRY glDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect);
	FOGL_GLAPI void FOGL_APIENTRY glUniform1d(GLint location, GLdouble x);
	FOGL_GLAPI void FOGL_APIENTRY glUniform2d(GLint location, GLdouble x, GLdouble y);
	FOGL_GLAPI void FOGL_APIENTRY glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z);
	FOGL_GLAPI void FOGL_APIENTRY glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	FOGL_GLAPI void FOGL_APIENTRY glUniform1dv(GLint location, GLsizei count, const GLdouble *value);
	FOGL_GLAPI void FOGL_APIENTRY glUniform2dv(GLint location, GLsizei count, const GLdouble *value);
	FOGL_GLAPI void FOGL_APIENTRY glUniform3dv(GLint location, GLsizei count, const GLdouble *value);
	FOGL_GLAPI void FOGL_APIENTRY glUniform4dv(GLint location, GLsizei count, const GLdouble *value);
	FOGL_GLAPI void FOGL_APIENTRY glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	FOGL_GLAPI void FOGL_APIENTRY glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	FOGL_GLAPI void FOGL_APIENTRY glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	FOGL_GLAPI void FOGL_APIENTRY glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	FOGL_GLAPI void FOGL_APIENTRY glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	FOGL_GLAPI void FOGL_APIENTRY glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	FOGL_GLAPI void FOGL_APIENTRY glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	FOGL_GLAPI void FOGL_APIENTRY glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	FOGL_GLAPI void FOGL_APIENTRY glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	FOGL_GLAPI void FOGL_APIENTRY glGetUniformdv(GLuint program, GLint location, GLdouble *params);
	FOGL_GLAPI GLint FOGL_APIENTRY glGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar *name);
	FOGL_GLAPI GLuint FOGL_APIENTRY glGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar *name);
	FOGL_GLAPI void FOGL_APIENTRY glGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
	FOGL_GLAPI void FOGL_APIENTRY glGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
	FOGL_GLAPI void FOGL_APIENTRY glGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
	FOGL_GLAPI void FOGL_APIENTRY glUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint *indices);
	FOGL_GLAPI void FOGL_APIENTRY glGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint *values);
	FOGL_GLAPI void FOGL_APIENTRY glPatchParameteri(GLenum pname, GLint value);
	FOGL_GLAPI void FOGL_APIENTRY glPatchParameterfv(GLenum pname, const GLfloat *values);
	FOGL_GLAPI void FOGL_APIENTRY glBindTransformFeedback(GLenum target, GLuint id);
	FOGL_GLAPI void FOGL_APIENTRY glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids);
	FOGL_GLAPI void FOGL_APIENTRY glGenTransformFeedbacks(GLsizei n, GLuint *ids);
	FOGL_GLAPI GLboolean FOGL_APIENTRY glIsTransformFeedback(GLuint id);
	FOGL_GLAPI void FOGL_APIENTRY glPauseTransformFeedback(void);
	FOGL_GLAPI void FOGL_APIENTRY glResumeTransformFeedback(void);
	FOGL_GLAPI void FOGL_APIENTRY glDrawTransformFeedback(GLenum mode, GLuint id);
	FOGL_GLAPI void FOGL_APIENTRY glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream);
	FOGL_GLAPI void FOGL_APIENTRY glBeginQueryIndexed(GLenum target, GLuint index, GLuint id);
	FOGL_GLAPI void FOGL_APIENTRY glEndQueryIndexed(GLenum target, GLuint index);
	FOGL_GLAPI void FOGL_APIENTRY glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params);
#	endif // FOGL_STATIC
#endif // GL_VERSION_4_0
#ifndef GL_VERSION_4_1
#	define GL_VERSION_4_1 1
	static constexpr uint32_t GL_FIXED = 0x140C;
	static constexpr uint32_t GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
	static constexpr uint32_t GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
	static constexpr uint32_t GL_LOW_FLOAT = 0x8DF0;
	static constexpr uint32_t GL_MEDIUM_FLOAT = 0x8DF1;
	static constexpr uint32_t GL_HIGH_FLOAT = 0x8DF2;
	static constexpr uint32_t GL_LOW_INT = 0x8DF3;
	static constexpr uint32_t GL_MEDIUM_INT = 0x8DF4;
	static constexpr uint32_t GL_HIGH_INT = 0x8DF5;
	static constexpr uint32_t GL_SHADER_COMPILER = 0x8DFA;
	static constexpr uint32_t GL_SHADER_BINARY_FORMATS = 0x8DF8;
	static constexpr uint32_t GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9;
	static constexpr uint32_t GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
	static constexpr uint32_t GL_MAX_VARYING_VECTORS = 0x8DFC;
	static constexpr uint32_t GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
	static constexpr uint32_t GL_RGB565 = 0x8D62;
	static constexpr uint32_t GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
	static constexpr uint32_t GL_PROGRAM_BINARY_LENGTH = 0x8741;
	static constexpr uint32_t GL_NUM_PROGRAM_BINARY_FORMATS = 0x87FE;
	static constexpr uint32_t GL_PROGRAM_BINARY_FORMATS = 0x87FF;
	static constexpr uint32_t GL_VERTEX_SHADER_BIT = 0x00000001;
	static constexpr uint32_t GL_FRAGMENT_SHADER_BIT = 0x00000002;
	static constexpr uint32_t GL_GEOMETRY_SHADER_BIT = 0x00000004;
	static constexpr uint32_t GL_TESS_CONTROL_SHADER_BIT = 0x00000008;
	static constexpr uint32_t GL_TESS_EVALUATION_SHADER_BIT = 0x00000010;
	static constexpr uint32_t GL_ALL_SHADER_BITS = 0xFFFFFFFF;
	static constexpr uint32_t GL_PROGRAM_SEPARABLE = 0x8258;
	static constexpr uint32_t GL_ACTIVE_PROGRAM = 0x8259;
	static constexpr uint32_t GL_PROGRAM_PIPELINE_BINDING = 0x825A;
	static constexpr uint32_t GL_MAX_VIEWPORTS = 0x825B;
	static constexpr uint32_t GL_VIEWPORT_SUBPIXEL_BITS = 0x825C;
	static constexpr uint32_t GL_VIEWPORT_BOUNDS_RANGE = 0x825D;
	static constexpr uint32_t GL_LAYER_PROVOKING_VERTEX = 0x825E;
	static constexpr uint32_t GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F;
	static constexpr uint32_t GL_UNDEFINED_VERTEX = 0x8260;
#	ifdef FOGL_STATIC
	typedef void (FOGL_APIENTRY gl_release_shader_compiler_func)(void);
	FOGL_STATIC gl_release_shader_compiler_func* glReleaseShaderCompiler;
	typedef void (FOGL_APIENTRY gl_shader_binary_func)(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length);
	FOGL_STATIC gl_shader_binary_func* glShaderBinary;
	typedef void (FOGL_APIENTRY gl_get_shader_precision_format_func)(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
	FOGL_STATIC gl_get_shader_precision_format_func* glGetShaderPrecisionFormat;
	typedef void (FOGL_APIENTRY gl_depth_rangef_func)(GLfloat n, GLfloat f);
	FOGL_STATIC gl_depth_rangef_func* glDepthRangef;
	typedef void (FOGL_APIENTRY gl_clear_depthf_func)(GLfloat d);
	FOGL_STATIC gl_clear_depthf_func* glClearDepthf;
	typedef void (FOGL_APIENTRY gl_get_program_binary_func)(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
	FOGL_STATIC gl_get_program_binary_func* glGetProgramBinary;
	typedef void (FOGL_APIENTRY gl_program_binary_func)(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
	FOGL_STATIC gl_program_binary_func* glProgramBinary;
	typedef void (FOGL_APIENTRY gl_program_parameteri_func)(GLuint program, GLenum pname, GLint value);
	FOGL_STATIC gl_program_parameteri_func* glProgramParameteri;
	typedef void (FOGL_APIENTRY gl_use_program_stages_func)(GLuint pipeline, GLbitfield stages, GLuint program);
	FOGL_STATIC gl_use_program_stages_func* glUseProgramStages;
	typedef void (FOGL_APIENTRY gl_active_shader_program_func)(GLuint pipeline, GLuint program);
	FOGL_STATIC gl_active_shader_program_func* glActiveShaderProgram;
	typedef GLuint(FOGL_APIENTRY gl_create_shader_programv_func)(GLenum type, GLsizei count, const GLchar *const*strings);
	FOGL_STATIC gl_create_shader_programv_func* glCreateShaderProgramv;
	typedef void (FOGL_APIENTRY gl_bind_program_pipeline_func)(GLuint pipeline);
	FOGL_STATIC gl_bind_program_pipeline_func* glBindProgramPipeline;
	typedef void (FOGL_APIENTRY gl_delete_program_pipelines_func)(GLsizei n, const GLuint *pipelines);
	FOGL_STATIC gl_delete_program_pipelines_func* glDeleteProgramPipelines;
	typedef void (FOGL_APIENTRY gl_gen_program_pipelines_func)(GLsizei n, GLuint *pipelines);
	FOGL_STATIC gl_gen_program_pipelines_func* glGenProgramPipelines;
	typedef GLboolean(FOGL_APIENTRY gl_is_program_pipeline_func)(GLuint pipeline);
	FOGL_STATIC gl_is_program_pipeline_func* glIsProgramPipeline;
	typedef void (FOGL_APIENTRY gl_get_program_pipelineiv_func)(GLuint pipeline, GLenum pname, GLint *params);
	FOGL_STATIC gl_get_program_pipelineiv_func* glGetProgramPipelineiv;
	typedef void (FOGL_APIENTRY gl_program_uniform1i_func)(GLuint program, GLint location, GLint v0);
	FOGL_STATIC gl_program_uniform1i_func* glProgramUniform1i;
	typedef void (FOGL_APIENTRY gl_program_uniform1iv_func)(GLuint program, GLint location, GLsizei count, const GLint *value);
	FOGL_STATIC gl_program_uniform1iv_func* glProgramUniform1iv;
	typedef void (FOGL_APIENTRY gl_program_uniform1f_func)(GLuint program, GLint location, GLfloat v0);
	FOGL_STATIC gl_program_uniform1f_func* glProgramUniform1f;
	typedef void (FOGL_APIENTRY gl_program_uniform1fv_func)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
	FOGL_STATIC gl_program_uniform1fv_func* glProgramUniform1fv;
	typedef void (FOGL_APIENTRY gl_program_uniform1d_func)(GLuint program, GLint location, GLdouble v0);
	FOGL_STATIC gl_program_uniform1d_func* glProgramUniform1d;
	typedef void (FOGL_APIENTRY gl_program_uniform1dv_func)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
	FOGL_STATIC gl_program_uniform1dv_func* glProgramUniform1dv;
	typedef void (FOGL_APIENTRY gl_program_uniform1ui_func)(GLuint program, GLint location, GLuint v0);
	FOGL_STATIC gl_program_uniform1ui_func* glProgramUniform1ui;
	typedef void (FOGL_APIENTRY gl_program_uniform1uiv_func)(GLuint program, GLint location, GLsizei count, const GLuint *value);
	FOGL_STATIC gl_program_uniform1uiv_func* glProgramUniform1uiv;
	typedef void (FOGL_APIENTRY gl_program_uniform2i_func)(GLuint program, GLint location, GLint v0, GLint v1);
	FOGL_STATIC gl_program_uniform2i_func* glProgramUniform2i;
	typedef void (FOGL_APIENTRY gl_program_uniform2iv_func)(GLuint program, GLint location, GLsizei count, const GLint *value);
	FOGL_STATIC gl_program_uniform2iv_func* glProgramUniform2iv;
	typedef void (FOGL_APIENTRY gl_program_uniform2f_func)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
	FOGL_STATIC gl_program_uniform2f_func* glProgramUniform2f;
	typedef void (FOGL_APIENTRY gl_program_uniform2fv_func)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
	FOGL_STATIC gl_program_uniform2fv_func* glProgramUniform2fv;
	typedef void (FOGL_APIENTRY gl_program_uniform2d_func)(GLuint program, GLint location, GLdouble v0, GLdouble v1);
	FOGL_STATIC gl_program_uniform2d_func* glProgramUniform2d;
	typedef void (FOGL_APIENTRY gl_program_uniform2dv_func)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
	FOGL_STATIC gl_program_uniform2dv_func* glProgramUniform2dv;
	typedef void (FOGL_APIENTRY gl_program_uniform2ui_func)(GLuint program, GLint location, GLuint v0, GLuint v1);
	FOGL_STATIC gl_program_uniform2ui_func* glProgramUniform2ui;
	typedef void (FOGL_APIENTRY gl_program_uniform2uiv_func)(GLuint program, GLint location, GLsizei count, const GLuint *value);
	FOGL_STATIC gl_program_uniform2uiv_func* glProgramUniform2uiv;
	typedef void (FOGL_APIENTRY gl_program_uniform3i_func)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
	FOGL_STATIC gl_program_uniform3i_func* glProgramUniform3i;
	typedef void (FOGL_APIENTRY gl_program_uniform3iv_func)(GLuint program, GLint location, GLsizei count, const GLint *value);
	FOGL_STATIC gl_program_uniform3iv_func* glProgramUniform3iv;
	typedef void (FOGL_APIENTRY gl_program_uniform3f_func)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
	FOGL_STATIC gl_program_uniform3f_func* glProgramUniform3f;
	typedef void (FOGL_APIENTRY gl_program_uniform3fv_func)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
	FOGL_STATIC gl_program_uniform3fv_func* glProgramUniform3fv;
	typedef void (FOGL_APIENTRY gl_program_uniform3d_func)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
	FOGL_STATIC gl_program_uniform3d_func* glProgramUniform3d;
	typedef void (FOGL_APIENTRY gl_program_uniform3dv_func)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
	FOGL_STATIC gl_program_uniform3dv_func* glProgramUniform3dv;
	typedef void (FOGL_APIENTRY gl_program_uniform3ui_func)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
	FOGL_STATIC gl_program_uniform3ui_func* glProgramUniform3ui;
	typedef void (FOGL_APIENTRY gl_program_uniform3uiv_func)(GLuint program, GLint location, GLsizei count, const GLuint *value);
	FOGL_STATIC gl_program_uniform3uiv_func* glProgramUniform3uiv;
	typedef void (FOGL_APIENTRY gl_program_uniform4i_func)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
	FOGL_STATIC gl_program_uniform4i_func* glProgramUniform4i;
	typedef void (FOGL_APIENTRY gl_program_uniform4iv_func)(GLuint program, GLint location, GLsizei count, const GLint *value);
	FOGL_STATIC gl_program_uniform4iv_func* glProgramUniform4iv;
	typedef void (FOGL_APIENTRY gl_program_uniform4f_func)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
	FOGL_STATIC gl_program_uniform4f_func* glProgramUniform4f;
	typedef void (FOGL_APIENTRY gl_program_uniform4fv_func)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
	FOGL_STATIC gl_program_uniform4fv_func* glProgramUniform4fv;
	typedef void (FOGL_APIENTRY gl_program_uniform4d_func)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
	FOGL_STATIC gl_program_uniform4d_func* glProgramUniform4d;
	typedef void (FOGL_APIENTRY gl_program_uniform4dv_func)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
	FOGL_STATIC gl_program_uniform4dv_func* glProgramUniform4dv;
	typedef void (FOGL_APIENTRY gl_program_uniform4ui_func)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
	FOGL_STATIC gl_program_uniform4ui_func* glProgramUniform4ui;
	typedef void (FOGL_APIENTRY gl_program_uniform4uiv_func)(GLuint program, GLint location, GLsizei count, const GLuint *value);
	FOGL_STATIC gl_program_uniform4uiv_func* glProgramUniform4uiv;
	typedef void (FOGL_APIENTRY gl_program_uniform_matrix2fv_func)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	FOGL_STATIC gl_program_uniform_matrix2fv_func* glProgramUniformMatrix2fv;
	typedef void (FOGL_APIENTRY gl_program_uniform_matrix3fv_func)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	FOGL_STATIC gl_program_uniform_matrix3fv_func* glProgramUniformMatrix3fv;
	typedef void (FOGL_APIENTRY gl_program_uniform_matrix4fv_func)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	FOGL_STATIC gl_program_uniform_matrix4fv_func* glProgramUniformMatrix4fv;
	typedef void (FOGL_APIENTRY gl_program_uniform_matrix2dv_func)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	FOGL_STATIC gl_program_uniform_matrix2dv_func* glProgramUniformMatrix2dv;
	typedef void (FOGL_APIENTRY gl_program_uniform_matrix3dv_func)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	FOGL_STATIC gl_program_uniform_matrix3dv_func* glProgramUniformMatrix3dv;
	typedef void (FOGL_APIENTRY gl_program_uniform_matrix4dv_func)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	FOGL_STATIC gl_program_uniform_matrix4dv_func* glProgramUniformMatrix4dv;
	typedef void (FOGL_APIENTRY gl_program_uniform_matrix2x3fv_func)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	FOGL_STATIC gl_program_uniform_matrix2x3fv_func* glProgramUniformMatrix2x3fv;
	typedef void (FOGL_APIENTRY gl_program_uniform_matrix3x2fv_func)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	FOGL_STATIC gl_program_uniform_matrix3x2fv_func* glProgramUniformMatrix3x2fv;
	typedef void (FOGL_APIENTRY gl_program_uniform_matrix2x4fv_func)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	FOGL_STATIC gl_program_uniform_matrix2x4fv_func* glProgramUniformMatrix2x4fv;
	typedef void (FOGL_APIENTRY gl_program_uniform_matrix4x2fv_func)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	FOGL_STATIC gl_program_uniform_matrix4x2fv_func* glProgramUniformMatrix4x2fv;
	typedef void (FOGL_APIENTRY gl_program_uniform_matrix3x4fv_func)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	FOGL_STATIC gl_program_uniform_matrix3x4fv_func* glProgramUniformMatrix3x4fv;
	typedef void (FOGL_APIENTRY gl_program_uniform_matrix4x3fv_func)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	FOGL_STATIC gl_program_uniform_matrix4x3fv_func* glProgramUniformMatrix4x3fv;
	typedef void (FOGL_APIENTRY gl_program_uniform_matrix2x3dv_func)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	FOGL_STATIC gl_program_uniform_matrix2x3dv_func* glProgramUniformMatrix2x3dv;
	typedef void (FOGL_APIENTRY gl_program_uniform_matrix3x2dv_func)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	FOGL_STATIC gl_program_uniform_matrix3x2dv_func* glProgramUniformMatrix3x2dv;
	typedef void (FOGL_APIENTRY gl_program_uniform_matrix2x4dv_func)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	FOGL_STATIC gl_program_uniform_matrix2x4dv_func* glProgramUniformMatrix2x4dv;
	typedef void (FOGL_APIENTRY gl_program_uniform_matrix4x2dv_func)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	FOGL_STATIC gl_program_uniform_matrix4x2dv_func* glProgramUniformMatrix4x2dv;
	typedef void (FOGL_APIENTRY gl_program_uniform_matrix3x4dv_func)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	FOGL_STATIC gl_program_uniform_matrix3x4dv_func* glProgramUniformMatrix3x4dv;
	typedef void (FOGL_APIENTRY gl_program_uniform_matrix4x3dv_func)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	FOGL_STATIC gl_program_uniform_matrix4x3dv_func* glProgramUniformMatrix4x3dv;
	typedef void (FOGL_APIENTRY gl_validate_program_pipeline_func)(GLuint pipeline);
	FOGL_STATIC gl_validate_program_pipeline_func* glValidateProgramPipeline;
	typedef void (FOGL_APIENTRY gl_get_program_pipeline_info_log_func)(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
	FOGL_STATIC gl_get_program_pipeline_info_log_func* glGetProgramPipelineInfoLog;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_l1d_func)(GLuint index, GLdouble x);
	FOGL_STATIC gl_vertex_attrib_l1d_func* glVertexAttribL1d;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_l2d_func)(GLuint index, GLdouble x, GLdouble y);
	FOGL_STATIC gl_vertex_attrib_l2d_func* glVertexAttribL2d;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_l3d_func)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
	FOGL_STATIC gl_vertex_attrib_l3d_func* glVertexAttribL3d;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_l4d_func)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	FOGL_STATIC gl_vertex_attrib_l4d_func* glVertexAttribL4d;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_l1dv_func)(GLuint index, const GLdouble *v);
	FOGL_STATIC gl_vertex_attrib_l1dv_func* glVertexAttribL1dv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_l2dv_func)(GLuint index, const GLdouble *v);
	FOGL_STATIC gl_vertex_attrib_l2dv_func* glVertexAttribL2dv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_l3dv_func)(GLuint index, const GLdouble *v);
	FOGL_STATIC gl_vertex_attrib_l3dv_func* glVertexAttribL3dv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_l4dv_func)(GLuint index, const GLdouble *v);
	FOGL_STATIC gl_vertex_attrib_l4dv_func* glVertexAttribL4dv;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_l_pointer_func)(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
	FOGL_STATIC gl_vertex_attrib_l_pointer_func* glVertexAttribLPointer;
	typedef void (FOGL_APIENTRY gl_get_vertex_attrib_ldv_func)(GLuint index, GLenum pname, GLdouble *params);
	FOGL_STATIC gl_get_vertex_attrib_ldv_func* glGetVertexAttribLdv;
	typedef void (FOGL_APIENTRY gl_viewport_arrayv_func)(GLuint first, GLsizei count, const GLfloat *v);
	FOGL_STATIC gl_viewport_arrayv_func* glViewportArrayv;
	typedef void (FOGL_APIENTRY gl_viewport_indexedf_func)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
	FOGL_STATIC gl_viewport_indexedf_func* glViewportIndexedf;
	typedef void (FOGL_APIENTRY gl_viewport_indexedfv_func)(GLuint index, const GLfloat *v);
	FOGL_STATIC gl_viewport_indexedfv_func* glViewportIndexedfv;
	typedef void (FOGL_APIENTRY gl_scissor_arrayv_func)(GLuint first, GLsizei count, const GLint *v);
	FOGL_STATIC gl_scissor_arrayv_func* glScissorArrayv;
	typedef void (FOGL_APIENTRY gl_scissor_indexed_func)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
	FOGL_STATIC gl_scissor_indexed_func* glScissorIndexed;
	typedef void (FOGL_APIENTRY gl_scissor_indexedv_func)(GLuint index, const GLint *v);
	FOGL_STATIC gl_scissor_indexedv_func* glScissorIndexedv;
	typedef void (FOGL_APIENTRY gl_depth_range_arrayv_func)(GLuint first, GLsizei count, const GLdouble *v);
	FOGL_STATIC gl_depth_range_arrayv_func* glDepthRangeArrayv;
	typedef void (FOGL_APIENTRY gl_depth_range_indexed_func)(GLuint index, GLdouble n, GLdouble f);
	FOGL_STATIC gl_depth_range_indexed_func* glDepthRangeIndexed;
	typedef void (FOGL_APIENTRY gl_get_floati_v_func)(GLenum target, GLuint index, GLfloat *data);
	FOGL_STATIC gl_get_floati_v_func* glGetFloati_v;
	typedef void (FOGL_APIENTRY gl_get_doublei_v_func)(GLenum target, GLuint index, GLdouble *data);
	FOGL_STATIC gl_get_doublei_v_func* glGetDoublei_v;
#	else
	FOGL_GLAPI void FOGL_APIENTRY glReleaseShaderCompiler(void);
	FOGL_GLAPI void FOGL_APIENTRY glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length);
	FOGL_GLAPI void FOGL_APIENTRY glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
	FOGL_GLAPI void FOGL_APIENTRY glDepthRangef(GLfloat n, GLfloat f);
	FOGL_GLAPI void FOGL_APIENTRY glClearDepthf(GLfloat d);
	FOGL_GLAPI void FOGL_APIENTRY glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
	FOGL_GLAPI void FOGL_APIENTRY glProgramBinary(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
	FOGL_GLAPI void FOGL_APIENTRY glProgramParameteri(GLuint program, GLenum pname, GLint value);
	FOGL_GLAPI void FOGL_APIENTRY glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program);
	FOGL_GLAPI void FOGL_APIENTRY glActiveShaderProgram(GLuint pipeline, GLuint program);
	FOGL_GLAPI GLuint FOGL_APIENTRY glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const*strings);
	FOGL_GLAPI void FOGL_APIENTRY glBindProgramPipeline(GLuint pipeline);
	FOGL_GLAPI void FOGL_APIENTRY glDeleteProgramPipelines(GLsizei n, const GLuint *pipelines);
	FOGL_GLAPI void FOGL_APIENTRY glGenProgramPipelines(GLsizei n, GLuint *pipelines);
	FOGL_GLAPI GLboolean FOGL_APIENTRY glIsProgramPipeline(GLuint pipeline);
	FOGL_GLAPI void FOGL_APIENTRY glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniform1i(GLuint program, GLint location, GLint v0);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniform1f(GLuint program, GLint location, GLfloat v0);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniform1d(GLuint program, GLint location, GLdouble v0);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniform1ui(GLuint program, GLint location, GLuint v0);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	FOGL_GLAPI void FOGL_APIENTRY glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	FOGL_GLAPI void FOGL_APIENTRY glValidateProgramPipeline(GLuint pipeline);
	FOGL_GLAPI void FOGL_APIENTRY glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribL1d(GLuint index, GLdouble x);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribL1dv(GLuint index, const GLdouble *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribL2dv(GLuint index, const GLdouble *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribL3dv(GLuint index, const GLdouble *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribL4dv(GLuint index, const GLdouble *v);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
	FOGL_GLAPI void FOGL_APIENTRY glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params);
	FOGL_GLAPI void FOGL_APIENTRY glViewportArrayv(GLuint first, GLsizei count, const GLfloat *v);
	FOGL_GLAPI void FOGL_APIENTRY glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
	FOGL_GLAPI void FOGL_APIENTRY glViewportIndexedfv(GLuint index, const GLfloat *v);
	FOGL_GLAPI void FOGL_APIENTRY glScissorArrayv(GLuint first, GLsizei count, const GLint *v);
	FOGL_GLAPI void FOGL_APIENTRY glScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
	FOGL_GLAPI void FOGL_APIENTRY glScissorIndexedv(GLuint index, const GLint *v);
	FOGL_GLAPI void FOGL_APIENTRY glDepthRangeArrayv(GLuint first, GLsizei count, const GLdouble *v);
	FOGL_GLAPI void FOGL_APIENTRY glDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f);
	FOGL_GLAPI void FOGL_APIENTRY glGetFloati_v(GLenum target, GLuint index, GLfloat *data);
	FOGL_GLAPI void FOGL_APIENTRY glGetDoublei_v(GLenum target, GLuint index, GLdouble *data);
#	endif // FOGL_STATIC
#endif // GL_VERSION_4_1
#ifndef GL_VERSION_4_2
#	define GL_VERSION_4_2 1
	static constexpr uint32_t GL_COPY_READ_BUFFER_BINDING = 0x8F36;
	static constexpr uint32_t GL_COPY_WRITE_BUFFER_BINDING = 0x8F37;
	static constexpr uint32_t GL_TRANSFORM_FEEDBACK_ACTIVE = 0x8E24;
	static constexpr uint32_t GL_TRANSFORM_FEEDBACK_PAUSED = 0x8E23;
	static constexpr uint32_t GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127;
	static constexpr uint32_t GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128;
	static constexpr uint32_t GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129;
	static constexpr uint32_t GL_UNPACK_COMPRESSED_BLOCK_SIZE = 0x912A;
	static constexpr uint32_t GL_PACK_COMPRESSED_BLOCK_WIDTH = 0x912B;
	static constexpr uint32_t GL_PACK_COMPRESSED_BLOCK_HEIGHT = 0x912C;
	static constexpr uint32_t GL_PACK_COMPRESSED_BLOCK_DEPTH = 0x912D;
	static constexpr uint32_t GL_PACK_COMPRESSED_BLOCK_SIZE = 0x912E;
	static constexpr uint32_t GL_NUM_SAMPLE_COUNTS = 0x9380;
	static constexpr uint32_t GL_MIN_MAP_BUFFER_ALIGNMENT = 0x90BC;
	static constexpr uint32_t GL_ATOMIC_COUNTER_BUFFER = 0x92C0;
	static constexpr uint32_t GL_ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1;
	static constexpr uint32_t GL_ATOMIC_COUNTER_BUFFER_START = 0x92C2;
	static constexpr uint32_t GL_ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3;
	static constexpr uint32_t GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4;
	static constexpr uint32_t GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5;
	static constexpr uint32_t GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6;
	static constexpr uint32_t GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7;
	static constexpr uint32_t GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8;
	static constexpr uint32_t GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9;
	static constexpr uint32_t GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA;
	static constexpr uint32_t GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB;
	static constexpr uint32_t GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC;
	static constexpr uint32_t GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD;
	static constexpr uint32_t GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE;
	static constexpr uint32_t GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF;
	static constexpr uint32_t GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0;
	static constexpr uint32_t GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1;
	static constexpr uint32_t GL_MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2;
	static constexpr uint32_t GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3;
	static constexpr uint32_t GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4;
	static constexpr uint32_t GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5;
	static constexpr uint32_t GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6;
	static constexpr uint32_t GL_MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7;
	static constexpr uint32_t GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8;
	static constexpr uint32_t GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC;
	static constexpr uint32_t GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9;
	static constexpr uint32_t GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA;
	static constexpr uint32_t GL_UNSIGNED_INT_ATOMIC_COUNTER = 0x92DB;
	static constexpr uint32_t GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001;
	static constexpr uint32_t GL_ELEMENT_ARRAY_BARRIER_BIT = 0x00000002;
	static constexpr uint32_t GL_UNIFORM_BARRIER_BIT = 0x00000004;
	static constexpr uint32_t GL_TEXTURE_FETCH_BARRIER_BIT = 0x00000008;
	static constexpr uint32_t GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020;
	static constexpr uint32_t GL_COMMAND_BARRIER_BIT = 0x00000040;
	static constexpr uint32_t GL_PIXEL_BUFFER_BARRIER_BIT = 0x00000080;
	static constexpr uint32_t GL_TEXTURE_UPDATE_BARRIER_BIT = 0x00000100;
	static constexpr uint32_t GL_BUFFER_UPDATE_BARRIER_BIT = 0x00000200;
	static constexpr uint32_t GL_FRAMEBUFFER_BARRIER_BIT = 0x00000400;
	static constexpr uint32_t GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800;
	static constexpr uint32_t GL_ATOMIC_COUNTER_BARRIER_BIT = 0x00001000;
	static constexpr uint32_t GL_ALL_BARRIER_BITS = 0xFFFFFFFF;
	static constexpr uint32_t GL_MAX_IMAGE_UNITS = 0x8F38;
	static constexpr uint32_t GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39;
	static constexpr uint32_t GL_IMAGE_BINDING_NAME = 0x8F3A;
	static constexpr uint32_t GL_IMAGE_BINDING_LEVEL = 0x8F3B;
	static constexpr uint32_t GL_IMAGE_BINDING_LAYERED = 0x8F3C;
	static constexpr uint32_t GL_IMAGE_BINDING_LAYER = 0x8F3D;
	static constexpr uint32_t GL_IMAGE_BINDING_ACCESS = 0x8F3E;
	static constexpr uint32_t GL_IMAGE_1D = 0x904C;
	static constexpr uint32_t GL_IMAGE_2D = 0x904D;
	static constexpr uint32_t GL_IMAGE_3D = 0x904E;
	static constexpr uint32_t GL_IMAGE_2D_RECT = 0x904F;
	static constexpr uint32_t GL_IMAGE_CUBE = 0x9050;
	static constexpr uint32_t GL_IMAGE_BUFFER = 0x9051;
	static constexpr uint32_t GL_IMAGE_1D_ARRAY = 0x9052;
	static constexpr uint32_t GL_IMAGE_2D_ARRAY = 0x9053;
	static constexpr uint32_t GL_IMAGE_CUBE_MAP_ARRAY = 0x9054;
	static constexpr uint32_t GL_IMAGE_2D_MULTISAMPLE = 0x9055;
	static constexpr uint32_t GL_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056;
	static constexpr uint32_t GL_INT_IMAGE_1D = 0x9057;
	static constexpr uint32_t GL_INT_IMAGE_2D = 0x9058;
	static constexpr uint32_t GL_INT_IMAGE_3D = 0x9059;
	static constexpr uint32_t GL_INT_IMAGE_2D_RECT = 0x905A;
	static constexpr uint32_t GL_INT_IMAGE_CUBE = 0x905B;
	static constexpr uint32_t GL_INT_IMAGE_BUFFER = 0x905C;
	static constexpr uint32_t GL_INT_IMAGE_1D_ARRAY = 0x905D;
	static constexpr uint32_t GL_INT_IMAGE_2D_ARRAY = 0x905E;
	static constexpr uint32_t GL_INT_IMAGE_CUBE_MAP_ARRAY = 0x905F;
	static constexpr uint32_t GL_INT_IMAGE_2D_MULTISAMPLE = 0x9060;
	static constexpr uint32_t GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061;
	static constexpr uint32_t GL_UNSIGNED_INT_IMAGE_1D = 0x9062;
	static constexpr uint32_t GL_UNSIGNED_INT_IMAGE_2D = 0x9063;
	static constexpr uint32_t GL_UNSIGNED_INT_IMAGE_3D = 0x9064;
	static constexpr uint32_t GL_UNSIGNED_INT_IMAGE_2D_RECT = 0x9065;
	static constexpr uint32_t GL_UNSIGNED_INT_IMAGE_CUBE = 0x9066;
	static constexpr uint32_t GL_UNSIGNED_INT_IMAGE_BUFFER = 0x9067;
	static constexpr uint32_t GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068;
	static constexpr uint32_t GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069;
	static constexpr uint32_t GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A;
	static constexpr uint32_t GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B;
	static constexpr uint32_t GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C;
	static constexpr uint32_t GL_MAX_IMAGE_SAMPLES = 0x906D;
	static constexpr uint32_t GL_IMAGE_BINDING_FORMAT = 0x906E;
	static constexpr uint32_t GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7;
	static constexpr uint32_t GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8;
	static constexpr uint32_t GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9;
	static constexpr uint32_t GL_MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA;
	static constexpr uint32_t GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB;
	static constexpr uint32_t GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC;
	static constexpr uint32_t GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD;
	static constexpr uint32_t GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE;
	static constexpr uint32_t GL_MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF;
	static constexpr uint32_t GL_COMPRESSED_RGBA_BPTC_UNORM = 0x8E8C;
	static constexpr uint32_t GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x8E8D;
	static constexpr uint32_t GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8E;
	static constexpr uint32_t GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F;
	static constexpr uint32_t GL_TEXTURE_IMMUTABLE_FORMAT = 0x912F;
#	ifdef FOGL_STATIC
	typedef void (FOGL_APIENTRY gl_draw_arrays_instanced_base_instance_func)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
	FOGL_STATIC gl_draw_arrays_instanced_base_instance_func* glDrawArraysInstancedBaseInstance;
	typedef void (FOGL_APIENTRY gl_draw_elements_instanced_base_instance_func)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);
	FOGL_STATIC gl_draw_elements_instanced_base_instance_func* glDrawElementsInstancedBaseInstance;
	typedef void (FOGL_APIENTRY gl_draw_elements_instanced_base_vertex_base_instance_func)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
	FOGL_STATIC gl_draw_elements_instanced_base_vertex_base_instance_func* glDrawElementsInstancedBaseVertexBaseInstance;
	typedef void (FOGL_APIENTRY gl_get_internalformativ_func)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);
	FOGL_STATIC gl_get_internalformativ_func* glGetInternalformativ;
	typedef void (FOGL_APIENTRY gl_get_active_atomic_counter_bufferiv_func)(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
	FOGL_STATIC gl_get_active_atomic_counter_bufferiv_func* glGetActiveAtomicCounterBufferiv;
	typedef void (FOGL_APIENTRY gl_bind_image_texture_func)(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
	FOGL_STATIC gl_bind_image_texture_func* glBindImageTexture;
	typedef void (FOGL_APIENTRY gl_memory_barrier_func)(GLbitfield barriers);
	FOGL_STATIC gl_memory_barrier_func* glMemoryBarrier;
	typedef void (FOGL_APIENTRY gl_tex_storage1d_func)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
	FOGL_STATIC gl_tex_storage1d_func* glTexStorage1D;
	typedef void (FOGL_APIENTRY gl_tex_storage2d_func)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
	FOGL_STATIC gl_tex_storage2d_func* glTexStorage2D;
	typedef void (FOGL_APIENTRY gl_tex_storage3d_func)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
	FOGL_STATIC gl_tex_storage3d_func* glTexStorage3D;
	typedef void (FOGL_APIENTRY gl_draw_transform_feedback_instanced_func)(GLenum mode, GLuint id, GLsizei instancecount);
	FOGL_STATIC gl_draw_transform_feedback_instanced_func* glDrawTransformFeedbackInstanced;
	typedef void (FOGL_APIENTRY gl_draw_transform_feedback_stream_instanced_func)(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
	FOGL_STATIC gl_draw_transform_feedback_stream_instanced_func* glDrawTransformFeedbackStreamInstanced;
#	else
	FOGL_GLAPI void FOGL_APIENTRY glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
	FOGL_GLAPI void FOGL_APIENTRY glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);
	FOGL_GLAPI void FOGL_APIENTRY glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
	FOGL_GLAPI void FOGL_APIENTRY glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
	FOGL_GLAPI void FOGL_APIENTRY glMemoryBarrier(GLbitfield barriers);
	FOGL_GLAPI void FOGL_APIENTRY glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
	FOGL_GLAPI void FOGL_APIENTRY glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
	FOGL_GLAPI void FOGL_APIENTRY glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
	FOGL_GLAPI void FOGL_APIENTRY glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount);
	FOGL_GLAPI void FOGL_APIENTRY glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
#	endif // FOGL_STATIC
#endif // GL_VERSION_4_2
#ifndef GL_VERSION_4_3
#	define GL_VERSION_4_3 1
	typedef void (APIENTRY *GLDEBUGPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *message, const void *userParam);
	static constexpr uint32_t GL_NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9;
	static constexpr uint32_t GL_VERTEX_ATTRIB_ARRAY_LONG = 0x874E;
	static constexpr uint32_t GL_COMPRESSED_RGB8_ETC2 = 0x9274;
	static constexpr uint32_t GL_COMPRESSED_SRGB8_ETC2 = 0x9275;
	static constexpr uint32_t GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276;
	static constexpr uint32_t GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277;
	static constexpr uint32_t GL_COMPRESSED_RGBA8_ETC2_EAC = 0x9278;
	static constexpr uint32_t GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279;
	static constexpr uint32_t GL_COMPRESSED_R11_EAC = 0x9270;
	static constexpr uint32_t GL_COMPRESSED_SIGNED_R11_EAC = 0x9271;
	static constexpr uint32_t GL_COMPRESSED_RG11_EAC = 0x9272;
	static constexpr uint32_t GL_COMPRESSED_SIGNED_RG11_EAC = 0x9273;
	static constexpr uint32_t GL_PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69;
	static constexpr uint32_t GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;
	static constexpr uint32_t GL_MAX_ELEMENT_INDEX = 0x8D6B;
	static constexpr uint32_t GL_COMPUTE_SHADER = 0x91B9;
	static constexpr uint32_t GL_MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB;
	static constexpr uint32_t GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC;
	static constexpr uint32_t GL_MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD;
	static constexpr uint32_t GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262;
	static constexpr uint32_t GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263;
	static constexpr uint32_t GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264;
	static constexpr uint32_t GL_MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265;
	static constexpr uint32_t GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266;
	static constexpr uint32_t GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB;
	static constexpr uint32_t GL_MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE;
	static constexpr uint32_t GL_MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF;
	static constexpr uint32_t GL_COMPUTE_WORK_GROUP_SIZE = 0x8267;
	static constexpr uint32_t GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC;
	static constexpr uint32_t GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED;
	static constexpr uint32_t GL_DISPATCH_INDIRECT_BUFFER = 0x90EE;
	static constexpr uint32_t GL_DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF;
	static constexpr uint32_t GL_COMPUTE_SHADER_BIT = 0x00000020;
	static constexpr uint32_t GL_DEBUG_OUTPUT_SYNCHRONOUS = 0x8242;
	static constexpr uint32_t GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243;
	static constexpr uint32_t GL_DEBUG_CALLBACK_FUNCTION = 0x8244;
	static constexpr uint32_t GL_DEBUG_CALLBACK_USER_PARAM = 0x8245;
	static constexpr uint32_t GL_DEBUG_SOURCE_API = 0x8246;
	static constexpr uint32_t GL_DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247;
	static constexpr uint32_t GL_DEBUG_SOURCE_SHADER_COMPILER = 0x8248;
	static constexpr uint32_t GL_DEBUG_SOURCE_THIRD_PARTY = 0x8249;
	static constexpr uint32_t GL_DEBUG_SOURCE_APPLICATION = 0x824A;
	static constexpr uint32_t GL_DEBUG_SOURCE_OTHER = 0x824B;
	static constexpr uint32_t GL_DEBUG_TYPE_ERROR = 0x824C;
	static constexpr uint32_t GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D;
	static constexpr uint32_t GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E;
	static constexpr uint32_t GL_DEBUG_TYPE_PORTABILITY = 0x824F;
	static constexpr uint32_t GL_DEBUG_TYPE_PERFORMANCE = 0x8250;
	static constexpr uint32_t GL_DEBUG_TYPE_OTHER = 0x8251;
	static constexpr uint32_t GL_MAX_DEBUG_MESSAGE_LENGTH = 0x9143;
	static constexpr uint32_t GL_MAX_DEBUG_LOGGED_MESSAGES = 0x9144;
	static constexpr uint32_t GL_DEBUG_LOGGED_MESSAGES = 0x9145;
	static constexpr uint32_t GL_DEBUG_SEVERITY_HIGH = 0x9146;
	static constexpr uint32_t GL_DEBUG_SEVERITY_MEDIUM = 0x9147;
	static constexpr uint32_t GL_DEBUG_SEVERITY_LOW = 0x9148;
	static constexpr uint32_t GL_DEBUG_TYPE_MARKER = 0x8268;
	static constexpr uint32_t GL_DEBUG_TYPE_PUSH_GROUP = 0x8269;
	static constexpr uint32_t GL_DEBUG_TYPE_POP_GROUP = 0x826A;
	static constexpr uint32_t GL_DEBUG_SEVERITY_NOTIFICATION = 0x826B;
	static constexpr uint32_t GL_MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C;
	static constexpr uint32_t GL_DEBUG_GROUP_STACK_DEPTH = 0x826D;
	static constexpr uint32_t GL_BUFFER = 0x82E0;
	static constexpr uint32_t GL_SHADER = 0x82E1;
	static constexpr uint32_t GL_PROGRAM = 0x82E2;
	static constexpr uint32_t GL_QUERY = 0x82E3;
	static constexpr uint32_t GL_PROGRAM_PIPELINE = 0x82E4;
	static constexpr uint32_t GL_SAMPLER = 0x82E6;
	static constexpr uint32_t GL_MAX_LABEL_LENGTH = 0x82E8;
	static constexpr uint32_t GL_DEBUG_OUTPUT = 0x92E0;
	static constexpr uint32_t GL_CONTEXT_FLAG_DEBUG_BIT = 0x00000002;
	static constexpr uint32_t GL_MAX_UNIFORM_LOCATIONS = 0x826E;
	static constexpr uint32_t GL_FRAMEBUFFER_DEFAULT_WIDTH = 0x9310;
	static constexpr uint32_t GL_FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311;
	static constexpr uint32_t GL_FRAMEBUFFER_DEFAULT_LAYERS = 0x9312;
	static constexpr uint32_t GL_FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313;
	static constexpr uint32_t GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314;
	static constexpr uint32_t GL_MAX_FRAMEBUFFER_WIDTH = 0x9315;
	static constexpr uint32_t GL_MAX_FRAMEBUFFER_HEIGHT = 0x9316;
	static constexpr uint32_t GL_MAX_FRAMEBUFFER_LAYERS = 0x9317;
	static constexpr uint32_t GL_MAX_FRAMEBUFFER_SAMPLES = 0x9318;
	static constexpr uint32_t GL_INTERNALFORMAT_SUPPORTED = 0x826F;
	static constexpr uint32_t GL_INTERNALFORMAT_PREFERRED = 0x8270;
	static constexpr uint32_t GL_INTERNALFORMAT_RED_SIZE = 0x8271;
	static constexpr uint32_t GL_INTERNALFORMAT_GREEN_SIZE = 0x8272;
	static constexpr uint32_t GL_INTERNALFORMAT_BLUE_SIZE = 0x8273;
	static constexpr uint32_t GL_INTERNALFORMAT_ALPHA_SIZE = 0x8274;
	static constexpr uint32_t GL_INTERNALFORMAT_DEPTH_SIZE = 0x8275;
	static constexpr uint32_t GL_INTERNALFORMAT_STENCIL_SIZE = 0x8276;
	static constexpr uint32_t GL_INTERNALFORMAT_SHARED_SIZE = 0x8277;
	static constexpr uint32_t GL_INTERNALFORMAT_RED_TYPE = 0x8278;
	static constexpr uint32_t GL_INTERNALFORMAT_GREEN_TYPE = 0x8279;
	static constexpr uint32_t GL_INTERNALFORMAT_BLUE_TYPE = 0x827A;
	static constexpr uint32_t GL_INTERNALFORMAT_ALPHA_TYPE = 0x827B;
	static constexpr uint32_t GL_INTERNALFORMAT_DEPTH_TYPE = 0x827C;
	static constexpr uint32_t GL_INTERNALFORMAT_STENCIL_TYPE = 0x827D;
	static constexpr uint32_t GL_MAX_WIDTH = 0x827E;
	static constexpr uint32_t GL_MAX_HEIGHT = 0x827F;
	static constexpr uint32_t GL_MAX_DEPTH = 0x8280;
	static constexpr uint32_t GL_MAX_LAYERS = 0x8281;
	static constexpr uint32_t GL_MAX_COMBINED_DIMENSIONS = 0x8282;
	static constexpr uint32_t GL_COLOR_COMPONENTS = 0x8283;
	static constexpr uint32_t GL_DEPTH_COMPONENTS = 0x8284;
	static constexpr uint32_t GL_STENCIL_COMPONENTS = 0x8285;
	static constexpr uint32_t GL_COLOR_RENDERABLE = 0x8286;
	static constexpr uint32_t GL_DEPTH_RENDERABLE = 0x8287;
	static constexpr uint32_t GL_STENCIL_RENDERABLE = 0x8288;
	static constexpr uint32_t GL_FRAMEBUFFER_RENDERABLE = 0x8289;
	static constexpr uint32_t GL_FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A;
	static constexpr uint32_t GL_FRAMEBUFFER_BLEND = 0x828B;
	static constexpr uint32_t GL_READ_PIXELS = 0x828C;
	static constexpr uint32_t GL_READ_PIXELS_FORMAT = 0x828D;
	static constexpr uint32_t GL_READ_PIXELS_TYPE = 0x828E;
	static constexpr uint32_t GL_TEXTURE_IMAGE_FORMAT = 0x828F;
	static constexpr uint32_t GL_TEXTURE_IMAGE_TYPE = 0x8290;
	static constexpr uint32_t GL_GET_TEXTURE_IMAGE_FORMAT = 0x8291;
	static constexpr uint32_t GL_GET_TEXTURE_IMAGE_TYPE = 0x8292;
	static constexpr uint32_t GL_MIPMAP = 0x8293;
	static constexpr uint32_t GL_MANUAL_GENERATE_MIPMAP = 0x8294;
	static constexpr uint32_t GL_AUTO_GENERATE_MIPMAP = 0x8295;
	static constexpr uint32_t GL_COLOR_ENCODING = 0x8296;
	static constexpr uint32_t GL_SRGB_READ = 0x8297;
	static constexpr uint32_t GL_SRGB_WRITE = 0x8298;
	static constexpr uint32_t GL_FILTER = 0x829A;
	static constexpr uint32_t GL_VERTEX_TEXTURE = 0x829B;
	static constexpr uint32_t GL_TESS_CONTROL_TEXTURE = 0x829C;
	static constexpr uint32_t GL_TESS_EVALUATION_TEXTURE = 0x829D;
	static constexpr uint32_t GL_GEOMETRY_TEXTURE = 0x829E;
	static constexpr uint32_t GL_FRAGMENT_TEXTURE = 0x829F;
	static constexpr uint32_t GL_COMPUTE_TEXTURE = 0x82A0;
	static constexpr uint32_t GL_TEXTURE_SHADOW = 0x82A1;
	static constexpr uint32_t GL_TEXTURE_GATHER = 0x82A2;
	static constexpr uint32_t GL_TEXTURE_GATHER_SHADOW = 0x82A3;
	static constexpr uint32_t GL_SHADER_IMAGE_LOAD = 0x82A4;
	static constexpr uint32_t GL_SHADER_IMAGE_STORE = 0x82A5;
	static constexpr uint32_t GL_SHADER_IMAGE_ATOMIC = 0x82A6;
	static constexpr uint32_t GL_IMAGE_TEXEL_SIZE = 0x82A7;
	static constexpr uint32_t GL_IMAGE_COMPATIBILITY_CLASS = 0x82A8;
	static constexpr uint32_t GL_IMAGE_PIXEL_FORMAT = 0x82A9;
	static constexpr uint32_t GL_IMAGE_PIXEL_TYPE = 0x82AA;
	static constexpr uint32_t GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC;
	static constexpr uint32_t GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD;
	static constexpr uint32_t GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE;
	static constexpr uint32_t GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF;
	static constexpr uint32_t GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1;
	static constexpr uint32_t GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2;
	static constexpr uint32_t GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3;
	static constexpr uint32_t GL_CLEAR_BUFFER = 0x82B4;
	static constexpr uint32_t GL_TEXTURE_VIEW = 0x82B5;
	static constexpr uint32_t GL_VIEW_COMPATIBILITY_CLASS = 0x82B6;
	static constexpr uint32_t GL_FULL_SUPPORT = 0x82B7;
	static constexpr uint32_t GL_CAVEAT_SUPPORT = 0x82B8;
	static constexpr uint32_t GL_IMAGE_CLASS_4_X_32 = 0x82B9;
	static constexpr uint32_t GL_IMAGE_CLASS_2_X_32 = 0x82BA;
	static constexpr uint32_t GL_IMAGE_CLASS_1_X_32 = 0x82BB;
	static constexpr uint32_t GL_IMAGE_CLASS_4_X_16 = 0x82BC;
	static constexpr uint32_t GL_IMAGE_CLASS_2_X_16 = 0x82BD;
	static constexpr uint32_t GL_IMAGE_CLASS_1_X_16 = 0x82BE;
	static constexpr uint32_t GL_IMAGE_CLASS_4_X_8 = 0x82BF;
	static constexpr uint32_t GL_IMAGE_CLASS_2_X_8 = 0x82C0;
	static constexpr uint32_t GL_IMAGE_CLASS_1_X_8 = 0x82C1;
	static constexpr uint32_t GL_IMAGE_CLASS_11_11_10 = 0x82C2;
	static constexpr uint32_t GL_IMAGE_CLASS_10_10_10_2 = 0x82C3;
	static constexpr uint32_t GL_VIEW_CLASS_128_BITS = 0x82C4;
	static constexpr uint32_t GL_VIEW_CLASS_96_BITS = 0x82C5;
	static constexpr uint32_t GL_VIEW_CLASS_64_BITS = 0x82C6;
	static constexpr uint32_t GL_VIEW_CLASS_48_BITS = 0x82C7;
	static constexpr uint32_t GL_VIEW_CLASS_32_BITS = 0x82C8;
	static constexpr uint32_t GL_VIEW_CLASS_24_BITS = 0x82C9;
	static constexpr uint32_t GL_VIEW_CLASS_16_BITS = 0x82CA;
	static constexpr uint32_t GL_VIEW_CLASS_8_BITS = 0x82CB;
	static constexpr uint32_t GL_VIEW_CLASS_S3TC_DXT1_RGB = 0x82CC;
	static constexpr uint32_t GL_VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CD;
	static constexpr uint32_t GL_VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CE;
	static constexpr uint32_t GL_VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CF;
	static constexpr uint32_t GL_VIEW_CLASS_RGTC1_RED = 0x82D0;
	static constexpr uint32_t GL_VIEW_CLASS_RGTC2_RG = 0x82D1;
	static constexpr uint32_t GL_VIEW_CLASS_BPTC_UNORM = 0x82D2;
	static constexpr uint32_t GL_VIEW_CLASS_BPTC_FLOAT = 0x82D3;
	static constexpr uint32_t GL_UNIFORM = 0x92E1;
	static constexpr uint32_t GL_UNIFORM_BLOCK = 0x92E2;
	static constexpr uint32_t GL_PROGRAM_INPUT = 0x92E3;
	static constexpr uint32_t GL_PROGRAM_OUTPUT = 0x92E4;
	static constexpr uint32_t GL_BUFFER_VARIABLE = 0x92E5;
	static constexpr uint32_t GL_SHADER_STORAGE_BLOCK = 0x92E6;
	static constexpr uint32_t GL_VERTEX_SUBROUTINE = 0x92E8;
	static constexpr uint32_t GL_TESS_CONTROL_SUBROUTINE = 0x92E9;
	static constexpr uint32_t GL_TESS_EVALUATION_SUBROUTINE = 0x92EA;
	static constexpr uint32_t GL_GEOMETRY_SUBROUTINE = 0x92EB;
	static constexpr uint32_t GL_FRAGMENT_SUBROUTINE = 0x92EC;
	static constexpr uint32_t GL_COMPUTE_SUBROUTINE = 0x92ED;
	static constexpr uint32_t GL_VERTEX_SUBROUTINE_UNIFORM = 0x92EE;
	static constexpr uint32_t GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF;
	static constexpr uint32_t GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0;
	static constexpr uint32_t GL_GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1;
	static constexpr uint32_t GL_FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2;
	static constexpr uint32_t GL_COMPUTE_SUBROUTINE_UNIFORM = 0x92F3;
	static constexpr uint32_t GL_TRANSFORM_FEEDBACK_VARYING = 0x92F4;
	static constexpr uint32_t GL_ACTIVE_RESOURCES = 0x92F5;
	static constexpr uint32_t GL_MAX_NAME_LENGTH = 0x92F6;
	static constexpr uint32_t GL_MAX_NUM_ACTIVE_VARIABLES = 0x92F7;
	static constexpr uint32_t GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8;
	static constexpr uint32_t GL_NAME_LENGTH = 0x92F9;
	static constexpr uint32_t GL_TYPE = 0x92FA;
	static constexpr uint32_t GL_ARRAY_SIZE = 0x92FB;
	static constexpr uint32_t GL_OFFSET = 0x92FC;
	static constexpr uint32_t GL_BLOCK_INDEX = 0x92FD;
	static constexpr uint32_t GL_ARRAY_STRIDE = 0x92FE;
	static constexpr uint32_t GL_MATRIX_STRIDE = 0x92FF;
	static constexpr uint32_t GL_IS_ROW_MAJOR = 0x9300;
	static constexpr uint32_t GL_ATOMIC_COUNTER_BUFFER_INDEX = 0x9301;
	static constexpr uint32_t GL_BUFFER_BINDING = 0x9302;
	static constexpr uint32_t GL_BUFFER_DATA_SIZE = 0x9303;
	static constexpr uint32_t GL_NUM_ACTIVE_VARIABLES = 0x9304;
	static constexpr uint32_t GL_ACTIVE_VARIABLES = 0x9305;
	static constexpr uint32_t GL_REFERENCED_BY_VERTEX_SHADER = 0x9306;
	static constexpr uint32_t GL_REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307;
	static constexpr uint32_t GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308;
	static constexpr uint32_t GL_REFERENCED_BY_GEOMETRY_SHADER = 0x9309;
	static constexpr uint32_t GL_REFERENCED_BY_FRAGMENT_SHADER = 0x930A;
	static constexpr uint32_t GL_REFERENCED_BY_COMPUTE_SHADER = 0x930B;
	static constexpr uint32_t GL_TOP_LEVEL_ARRAY_SIZE = 0x930C;
	static constexpr uint32_t GL_TOP_LEVEL_ARRAY_STRIDE = 0x930D;
	static constexpr uint32_t GL_LOCATION = 0x930E;
	static constexpr uint32_t GL_LOCATION_INDEX = 0x930F;
	static constexpr uint32_t GL_IS_PER_PATCH = 0x92E7;
	static constexpr uint32_t GL_SHADER_STORAGE_BUFFER = 0x90D2;
	static constexpr uint32_t GL_SHADER_STORAGE_BUFFER_BINDING = 0x90D3;
	static constexpr uint32_t GL_SHADER_STORAGE_BUFFER_START = 0x90D4;
	static constexpr uint32_t GL_SHADER_STORAGE_BUFFER_SIZE = 0x90D5;
	static constexpr uint32_t GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6;
	static constexpr uint32_t GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7;
	static constexpr uint32_t GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8;
	static constexpr uint32_t GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9;
	static constexpr uint32_t GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA;
	static constexpr uint32_t GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB;
	static constexpr uint32_t GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC;
	static constexpr uint32_t GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD;
	static constexpr uint32_t GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE;
	static constexpr uint32_t GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF;
	static constexpr uint32_t GL_SHADER_STORAGE_BARRIER_BIT = 0x00002000;
	static constexpr uint32_t GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39;
	static constexpr uint32_t GL_DEPTH_STENCIL_TEXTURE_MODE = 0x90EA;
	static constexpr uint32_t GL_TEXTURE_BUFFER_OFFSET = 0x919D;
	static constexpr uint32_t GL_TEXTURE_BUFFER_SIZE = 0x919E;
	static constexpr uint32_t GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F;
	static constexpr uint32_t GL_TEXTURE_VIEW_MIN_LEVEL = 0x82DB;
	static constexpr uint32_t GL_TEXTURE_VIEW_NUM_LEVELS = 0x82DC;
	static constexpr uint32_t GL_TEXTURE_VIEW_MIN_LAYER = 0x82DD;
	static constexpr uint32_t GL_TEXTURE_VIEW_NUM_LAYERS = 0x82DE;
	static constexpr uint32_t GL_TEXTURE_IMMUTABLE_LEVELS = 0x82DF;
	static constexpr uint32_t GL_VERTEX_ATTRIB_BINDING = 0x82D4;
	static constexpr uint32_t GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5;
	static constexpr uint32_t GL_VERTEX_BINDING_DIVISOR = 0x82D6;
	static constexpr uint32_t GL_VERTEX_BINDING_OFFSET = 0x82D7;
	static constexpr uint32_t GL_VERTEX_BINDING_STRIDE = 0x82D8;
	static constexpr uint32_t GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9;
	static constexpr uint32_t GL_MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA;
	static constexpr uint32_t GL_VERTEX_BINDING_BUFFER = 0x8F4F;
	static constexpr uint32_t GL_DISPLAY_LIST = 0x82E7;
#	ifdef FOGL_STATIC
	typedef void (FOGL_APIENTRY gl_clear_buffer_data_func)(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);
	FOGL_STATIC gl_clear_buffer_data_func* glClearBufferData;
	typedef void (FOGL_APIENTRY gl_clear_buffer_sub_data_func)(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
	FOGL_STATIC gl_clear_buffer_sub_data_func* glClearBufferSubData;
	typedef void (FOGL_APIENTRY gl_dispatch_compute_func)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
	FOGL_STATIC gl_dispatch_compute_func* glDispatchCompute;
	typedef void (FOGL_APIENTRY gl_dispatch_compute_indirect_func)(GLintptr indirect);
	FOGL_STATIC gl_dispatch_compute_indirect_func* glDispatchComputeIndirect;
	typedef void (FOGL_APIENTRY gl_copy_image_sub_data_func)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
	FOGL_STATIC gl_copy_image_sub_data_func* glCopyImageSubData;
	typedef void (FOGL_APIENTRY gl_framebuffer_parameteri_func)(GLenum target, GLenum pname, GLint param);
	FOGL_STATIC gl_framebuffer_parameteri_func* glFramebufferParameteri;
	typedef void (FOGL_APIENTRY gl_get_framebuffer_parameteriv_func)(GLenum target, GLenum pname, GLint *params);
	FOGL_STATIC gl_get_framebuffer_parameteriv_func* glGetFramebufferParameteriv;
	typedef void (FOGL_APIENTRY gl_get_internalformati64v_func)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params);
	FOGL_STATIC gl_get_internalformati64v_func* glGetInternalformati64v;
	typedef void (FOGL_APIENTRY gl_invalidate_tex_sub_image_func)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
	FOGL_STATIC gl_invalidate_tex_sub_image_func* glInvalidateTexSubImage;
	typedef void (FOGL_APIENTRY gl_invalidate_tex_image_func)(GLuint texture, GLint level);
	FOGL_STATIC gl_invalidate_tex_image_func* glInvalidateTexImage;
	typedef void (FOGL_APIENTRY gl_invalidate_buffer_sub_data_func)(GLuint buffer, GLintptr offset, GLsizeiptr length);
	FOGL_STATIC gl_invalidate_buffer_sub_data_func* glInvalidateBufferSubData;
	typedef void (FOGL_APIENTRY gl_invalidate_buffer_data_func)(GLuint buffer);
	FOGL_STATIC gl_invalidate_buffer_data_func* glInvalidateBufferData;
	typedef void (FOGL_APIENTRY gl_invalidate_framebuffer_func)(GLenum target, GLsizei numAttachments, const GLenum *attachments);
	FOGL_STATIC gl_invalidate_framebuffer_func* glInvalidateFramebuffer;
	typedef void (FOGL_APIENTRY gl_invalidate_sub_framebuffer_func)(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
	FOGL_STATIC gl_invalidate_sub_framebuffer_func* glInvalidateSubFramebuffer;
	typedef void (FOGL_APIENTRY gl_multi_draw_arrays_indirect_func)(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);
	FOGL_STATIC gl_multi_draw_arrays_indirect_func* glMultiDrawArraysIndirect;
	typedef void (FOGL_APIENTRY gl_multi_draw_elements_indirect_func)(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);
	FOGL_STATIC gl_multi_draw_elements_indirect_func* glMultiDrawElementsIndirect;
	typedef void (FOGL_APIENTRY gl_get_program_interfaceiv_func)(GLuint program, GLenum programInterface, GLenum pname, GLint *params);
	FOGL_STATIC gl_get_program_interfaceiv_func* glGetProgramInterfaceiv;
	typedef GLuint(FOGL_APIENTRY gl_get_program_resource_index_func)(GLuint program, GLenum programInterface, const GLchar *name);
	FOGL_STATIC gl_get_program_resource_index_func* glGetProgramResourceIndex;
	typedef void (FOGL_APIENTRY gl_get_program_resource_name_func)(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
	FOGL_STATIC gl_get_program_resource_name_func* glGetProgramResourceName;
	typedef void (FOGL_APIENTRY gl_get_program_resourceiv_func)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params);
	FOGL_STATIC gl_get_program_resourceiv_func* glGetProgramResourceiv;
	typedef GLint(FOGL_APIENTRY gl_get_program_resource_location_func)(GLuint program, GLenum programInterface, const GLchar *name);
	FOGL_STATIC gl_get_program_resource_location_func* glGetProgramResourceLocation;
	typedef GLint(FOGL_APIENTRY gl_get_program_resource_location_index_func)(GLuint program, GLenum programInterface, const GLchar *name);
	FOGL_STATIC gl_get_program_resource_location_index_func* glGetProgramResourceLocationIndex;
	typedef void (FOGL_APIENTRY gl_shader_storage_block_binding_func)(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
	FOGL_STATIC gl_shader_storage_block_binding_func* glShaderStorageBlockBinding;
	typedef void (FOGL_APIENTRY gl_tex_buffer_range_func)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
	FOGL_STATIC gl_tex_buffer_range_func* glTexBufferRange;
	typedef void (FOGL_APIENTRY gl_tex_storage2_d_multisample_func)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
	FOGL_STATIC gl_tex_storage2_d_multisample_func* glTexStorage2DMultisample;
	typedef void (FOGL_APIENTRY gl_tex_storage3_d_multisample_func)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
	FOGL_STATIC gl_tex_storage3_d_multisample_func* glTexStorage3DMultisample;
	typedef void (FOGL_APIENTRY gl_texture_view_func)(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
	FOGL_STATIC gl_texture_view_func* glTextureView;
	typedef void (FOGL_APIENTRY gl_bind_vertex_buffer_func)(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
	FOGL_STATIC gl_bind_vertex_buffer_func* glBindVertexBuffer;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_format_func)(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
	FOGL_STATIC gl_vertex_attrib_format_func* glVertexAttribFormat;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_i_format_func)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
	FOGL_STATIC gl_vertex_attrib_i_format_func* glVertexAttribIFormat;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_l_format_func)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
	FOGL_STATIC gl_vertex_attrib_l_format_func* glVertexAttribLFormat;
	typedef void (FOGL_APIENTRY gl_vertex_attrib_binding_func)(GLuint attribindex, GLuint bindingindex);
	FOGL_STATIC gl_vertex_attrib_binding_func* glVertexAttribBinding;
	typedef void (FOGL_APIENTRY gl_vertex_binding_divisor_func)(GLuint bindingindex, GLuint divisor);
	FOGL_STATIC gl_vertex_binding_divisor_func* glVertexBindingDivisor;
	typedef void (FOGL_APIENTRY gl_debug_message_control_func)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
	FOGL_STATIC gl_debug_message_control_func* glDebugMessageControl;
	typedef void (FOGL_APIENTRY gl_debug_message_insert_func)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
	FOGL_STATIC gl_debug_message_insert_func* glDebugMessageInsert;
	typedef void (FOGL_APIENTRY gl_debug_message_callback_func)(GLDEBUGPROC callback, const void *userParam);
	FOGL_STATIC gl_debug_message_callback_func* glDebugMessageCallback;
	typedef GLuint(FOGL_APIENTRY gl_get_debug_message_log_func)(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
	FOGL_STATIC gl_get_debug_message_log_func* glGetDebugMessageLog;
	typedef void (FOGL_APIENTRY gl_push_debug_group_func)(GLenum source, GLuint id, GLsizei length, const GLchar *message);
	FOGL_STATIC gl_push_debug_group_func* glPushDebugGroup;
	typedef void (FOGL_APIENTRY gl_pop_debug_group_func)(void);
	FOGL_STATIC gl_pop_debug_group_func* glPopDebugGroup;
	typedef void (FOGL_APIENTRY gl_object_label_func)(GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
	FOGL_STATIC gl_object_label_func* glObjectLabel;
	typedef void (FOGL_APIENTRY gl_get_object_label_func)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
	FOGL_STATIC gl_get_object_label_func* glGetObjectLabel;
	typedef void (FOGL_APIENTRY gl_object_ptr_label_func)(const void *ptr, GLsizei length, const GLchar *label);
	FOGL_STATIC gl_object_ptr_label_func* glObjectPtrLabel;
	typedef void (FOGL_APIENTRY gl_get_object_ptr_label_func)(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
	FOGL_STATIC gl_get_object_ptr_label_func* glGetObjectPtrLabel;
#	else
	FOGL_GLAPI void FOGL_APIENTRY glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);
	FOGL_GLAPI void FOGL_APIENTRY glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
	FOGL_GLAPI void FOGL_APIENTRY glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
	FOGL_GLAPI void FOGL_APIENTRY glDispatchComputeIndirect(GLintptr indirect);
	FOGL_GLAPI void FOGL_APIENTRY glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
	FOGL_GLAPI void FOGL_APIENTRY glFramebufferParameteri(GLenum target, GLenum pname, GLint param);
	FOGL_GLAPI void FOGL_APIENTRY glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params);
	FOGL_GLAPI void FOGL_APIENTRY glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
	FOGL_GLAPI void FOGL_APIENTRY glInvalidateTexImage(GLuint texture, GLint level);
	FOGL_GLAPI void FOGL_APIENTRY glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length);
	FOGL_GLAPI void FOGL_APIENTRY glInvalidateBufferData(GLuint buffer);
	FOGL_GLAPI void FOGL_APIENTRY glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments);
	FOGL_GLAPI void FOGL_APIENTRY glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
	FOGL_GLAPI void FOGL_APIENTRY glMultiDrawArraysIndirect(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);
	FOGL_GLAPI void FOGL_APIENTRY glMultiDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);
	FOGL_GLAPI void FOGL_APIENTRY glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params);
	FOGL_GLAPI GLuint FOGL_APIENTRY glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name);
	FOGL_GLAPI void FOGL_APIENTRY glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
	FOGL_GLAPI void FOGL_APIENTRY glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params);
	FOGL_GLAPI GLint FOGL_APIENTRY glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name);
	FOGL_GLAPI GLint FOGL_APIENTRY glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar *name);
	FOGL_GLAPI void FOGL_APIENTRY glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
	FOGL_GLAPI void FOGL_APIENTRY glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
	FOGL_GLAPI void FOGL_APIENTRY glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
	FOGL_GLAPI void FOGL_APIENTRY glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
	FOGL_GLAPI void FOGL_APIENTRY glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
	FOGL_GLAPI void FOGL_APIENTRY glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
	FOGL_GLAPI void FOGL_APIENTRY glVertexAttribBinding(GLuint attribindex, GLuint bindingindex);
	FOGL_GLAPI void FOGL_APIENTRY glVertexBindingDivisor(GLuint bindingindex, GLuint divisor);
	FOGL_GLAPI void FOGL_APIENTRY glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
	FOGL_GLAPI void FOGL_APIENTRY glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
	FOGL_GLAPI void FOGL_APIENTRY glDebugMessageCallback(GLDEBUGPROC callback, const void *userParam);
	FOGL_GLAPI GLuint FOGL_APIENTRY glGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
	FOGL_GLAPI void FOGL_APIENTRY glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message);
	FOGL_GLAPI void FOGL_APIENTRY glPopDebugGroup(void);
	FOGL_GLAPI void FOGL_APIENTRY glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
	FOGL_GLAPI void FOGL_APIENTRY glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
	FOGL_GLAPI void FOGL_APIENTRY glObjectPtrLabel(const void *ptr, GLsizei length, const GLchar *label);
	FOGL_GLAPI void FOGL_APIENTRY glGetObjectPtrLabel(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
#	endif // FOGL_STATIC
#endif // GL_VERSION_4_3
#ifndef GL_VERSION_4_4
#	define GL_VERSION_4_4 1
	static constexpr uint32_t GL_MAX_VERTEX_ATTRIB_STRIDE = 0x82E5;
	static constexpr uint32_t GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x8221;
	static constexpr uint32_t GL_TEXTURE_BUFFER_BINDING = 0x8C2A;
	static constexpr uint32_t GL_MAP_PERSISTENT_BIT = 0x0040;
	static constexpr uint32_t GL_MAP_COHERENT_BIT = 0x0080;
	static constexpr uint32_t GL_DYNAMIC_STORAGE_BIT = 0x0100;
	static constexpr uint32_t GL_CLIENT_STORAGE_BIT = 0x0200;
	static constexpr uint32_t GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = 0x00004000;
	static constexpr uint32_t GL_BUFFER_IMMUTABLE_STORAGE = 0x821F;
	static constexpr uint32_t GL_BUFFER_STORAGE_FLAGS = 0x8220;
	static constexpr uint32_t GL_CLEAR_TEXTURE = 0x9365;
	static constexpr uint32_t GL_LOCATION_COMPONENT = 0x934A;
	static constexpr uint32_t GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = 0x934B;
	static constexpr uint32_t GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = 0x934C;
	static constexpr uint32_t GL_QUERY_BUFFER = 0x9192;
	static constexpr uint32_t GL_QUERY_BUFFER_BARRIER_BIT = 0x00008000;
	static constexpr uint32_t GL_QUERY_BUFFER_BINDING = 0x9193;
	static constexpr uint32_t GL_QUERY_RESULT_NO_WAIT = 0x9194;
	static constexpr uint32_t GL_MIRROR_CLAMP_TO_EDGE = 0x8743;
#	ifdef FOGL_STATIC
	typedef void (FOGL_APIENTRY gl_buffer_storage_func)(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags);
	FOGL_STATIC gl_buffer_storage_func* glBufferStorage;
	typedef void (FOGL_APIENTRY gl_clear_tex_image_func)(GLuint texture, GLint level, GLenum format, GLenum type, const void *data);
	FOGL_STATIC gl_clear_tex_image_func* glClearTexImage;
	typedef void (FOGL_APIENTRY gl_clear_tex_sub_image_func)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data);
	FOGL_STATIC gl_clear_tex_sub_image_func* glClearTexSubImage;
	typedef void (FOGL_APIENTRY gl_bind_buffers_base_func)(GLenum target, GLuint first, GLsizei count, const GLuint *buffers);
	FOGL_STATIC gl_bind_buffers_base_func* glBindBuffersBase;
	typedef void (FOGL_APIENTRY gl_bind_buffers_range_func)(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes);
	FOGL_STATIC gl_bind_buffers_range_func* glBindBuffersRange;
	typedef void (FOGL_APIENTRY gl_bind_textures_func)(GLuint first, GLsizei count, const GLuint *textures);
	FOGL_STATIC gl_bind_textures_func* glBindTextures;
	typedef void (FOGL_APIENTRY gl_bind_samplers_func)(GLuint first, GLsizei count, const GLuint *samplers);
	FOGL_STATIC gl_bind_samplers_func* glBindSamplers;
	typedef void (FOGL_APIENTRY gl_bind_image_textures_func)(GLuint first, GLsizei count, const GLuint *textures);
	FOGL_STATIC gl_bind_image_textures_func* glBindImageTextures;
	typedef void (FOGL_APIENTRY gl_bind_vertex_buffers_func)(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
	FOGL_STATIC gl_bind_vertex_buffers_func* glBindVertexBuffers;
#	else
	FOGL_GLAPI void FOGL_APIENTRY glBufferStorage(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags);
	FOGL_GLAPI void FOGL_APIENTRY glClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const void *data);
	FOGL_GLAPI void FOGL_APIENTRY glClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data);
	FOGL_GLAPI void FOGL_APIENTRY glBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint *buffers);
	FOGL_GLAPI void FOGL_APIENTRY glBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes);
	FOGL_GLAPI void FOGL_APIENTRY glBindTextures(GLuint first, GLsizei count, const GLuint *textures);
	FOGL_GLAPI void FOGL_APIENTRY glBindSamplers(GLuint first, GLsizei count, const GLuint *samplers);
	FOGL_GLAPI void FOGL_APIENTRY glBindImageTextures(GLuint first, GLsizei count, const GLuint *textures);
	FOGL_GLAPI void FOGL_APIENTRY glBindVertexBuffers(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
#	endif // FOGL_STATIC
#endif // GL_VERSION_4_4
#ifndef GL_VERSION_4_5
#	define GL_VERSION_4_5 1
	static constexpr uint32_t GL_CONTEXT_LOST = 0x0507;
	static constexpr uint32_t GL_NEGATIVE_ONE_TO_ONE = 0x935E;
	static constexpr uint32_t GL_ZERO_TO_ONE = 0x935F;
	static constexpr uint32_t GL_CLIP_ORIGIN = 0x935C;
	static constexpr uint32_t GL_CLIP_DEPTH_MODE = 0x935D;
	static constexpr uint32_t GL_QUERY_WAIT_INVERTED = 0x8E17;
	static constexpr uint32_t GL_QUERY_NO_WAIT_INVERTED = 0x8E18;
	static constexpr uint32_t GL_QUERY_BY_REGION_WAIT_INVERTED = 0x8E19;
	static constexpr uint32_t GL_QUERY_BY_REGION_NO_WAIT_INVERTED = 0x8E1A;
	static constexpr uint32_t GL_MAX_CULL_DISTANCES = 0x82F9;
	static constexpr uint32_t GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 0x82FA;
	static constexpr uint32_t GL_TEXTURE_TARGET = 0x1006;
	static constexpr uint32_t GL_QUERY_TARGET = 0x82EA;
	static constexpr uint32_t GL_GUILTY_CONTEXT_RESET = 0x8253;
	static constexpr uint32_t GL_INNOCENT_CONTEXT_RESET = 0x8254;
	static constexpr uint32_t GL_UNKNOWN_CONTEXT_RESET = 0x8255;
	static constexpr uint32_t GL_RESET_NOTIFICATION_STRATEGY = 0x8256;
	static constexpr uint32_t GL_LOSE_CONTEXT_ON_RESET = 0x8252;
	static constexpr uint32_t GL_NO_RESET_NOTIFICATION = 0x8261;
	static constexpr uint32_t GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = 0x00000004;
	static constexpr uint32_t GL_CONTEXT_RELEASE_BEHAVIOR = 0x82FB;
	static constexpr uint32_t GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x82FC;
#	ifdef FOGL_STATIC
	typedef void (FOGL_APIENTRY gl_clip_control_func)(GLenum origin, GLenum depth);
	FOGL_STATIC gl_clip_control_func* glClipControl;
	typedef void (FOGL_APIENTRY gl_create_transform_feedbacks_func)(GLsizei n, GLuint *ids);
	FOGL_STATIC gl_create_transform_feedbacks_func* glCreateTransformFeedbacks;
	typedef void (FOGL_APIENTRY gl_transform_feedback_buffer_base_func)(GLuint xfb, GLuint index, GLuint buffer);
	FOGL_STATIC gl_transform_feedback_buffer_base_func* glTransformFeedbackBufferBase;
	typedef void (FOGL_APIENTRY gl_transform_feedback_buffer_range_func)(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
	FOGL_STATIC gl_transform_feedback_buffer_range_func* glTransformFeedbackBufferRange;
	typedef void (FOGL_APIENTRY gl_get_transform_feedbackiv_func)(GLuint xfb, GLenum pname, GLint *param);
	FOGL_STATIC gl_get_transform_feedbackiv_func* glGetTransformFeedbackiv;
	typedef void (FOGL_APIENTRY gl_get_transform_feedbacki_v_func)(GLuint xfb, GLenum pname, GLuint index, GLint *param);
	FOGL_STATIC gl_get_transform_feedbacki_v_func* glGetTransformFeedbacki_v;
	typedef void (FOGL_APIENTRY gl_get_transform_feedbacki64_v_func)(GLuint xfb, GLenum pname, GLuint index, GLint64 *param);
	FOGL_STATIC gl_get_transform_feedbacki64_v_func* glGetTransformFeedbacki64_v;
	typedef void (FOGL_APIENTRY gl_create_buffers_func)(GLsizei n, GLuint *buffers);
	FOGL_STATIC gl_create_buffers_func* glCreateBuffers;
	typedef void (FOGL_APIENTRY gl_named_buffer_storage_func)(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
	FOGL_STATIC gl_named_buffer_storage_func* glNamedBufferStorage;
	typedef void (FOGL_APIENTRY gl_named_buffer_data_func)(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
	FOGL_STATIC gl_named_buffer_data_func* glNamedBufferData;
	typedef void (FOGL_APIENTRY gl_named_buffer_sub_data_func)(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
	FOGL_STATIC gl_named_buffer_sub_data_func* glNamedBufferSubData;
	typedef void (FOGL_APIENTRY gl_copy_named_buffer_sub_data_func)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
	FOGL_STATIC gl_copy_named_buffer_sub_data_func* glCopyNamedBufferSubData;
	typedef void (FOGL_APIENTRY gl_clear_named_buffer_data_func)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
	FOGL_STATIC gl_clear_named_buffer_data_func* glClearNamedBufferData;
	typedef void (FOGL_APIENTRY gl_clear_named_buffer_sub_data_func)(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
	FOGL_STATIC gl_clear_named_buffer_sub_data_func* glClearNamedBufferSubData;
	typedef void (FOGL_APIENTRY gl_map_named_buffer_func)(GLuint buffer, GLenum access);
	FOGL_STATIC gl_map_named_buffer_func* glMapNamedBuffer;
	typedef void (FOGL_APIENTRY gl_map_named_buffer_range_func)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
	FOGL_STATIC gl_map_named_buffer_range_func* glMapNamedBufferRange;
	typedef GLboolean(FOGL_APIENTRY gl_unmap_named_buffer_func)(GLuint buffer);
	FOGL_STATIC gl_unmap_named_buffer_func* glUnmapNamedBuffer;
	typedef void (FOGL_APIENTRY gl_flush_mapped_named_buffer_range_func)(GLuint buffer, GLintptr offset, GLsizeiptr length);
	FOGL_STATIC gl_flush_mapped_named_buffer_range_func* glFlushMappedNamedBufferRange;
	typedef void (FOGL_APIENTRY gl_get_named_buffer_parameteriv_func)(GLuint buffer, GLenum pname, GLint *params);
	FOGL_STATIC gl_get_named_buffer_parameteriv_func* glGetNamedBufferParameteriv;
	typedef void (FOGL_APIENTRY gl_get_named_buffer_parameteri64v_func)(GLuint buffer, GLenum pname, GLint64 *params);
	FOGL_STATIC gl_get_named_buffer_parameteri64v_func* glGetNamedBufferParameteri64v;
	typedef void (FOGL_APIENTRY gl_get_named_buffer_pointerv_func)(GLuint buffer, GLenum pname, void **params);
	FOGL_STATIC gl_get_named_buffer_pointerv_func* glGetNamedBufferPointerv;
	typedef void (FOGL_APIENTRY gl_get_named_buffer_sub_data_func)(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
	FOGL_STATIC gl_get_named_buffer_sub_data_func* glGetNamedBufferSubData;
	typedef void (FOGL_APIENTRY gl_create_framebuffers_func)(GLsizei n, GLuint *framebuffers);
	FOGL_STATIC gl_create_framebuffers_func* glCreateFramebuffers;
	typedef void (FOGL_APIENTRY gl_named_framebuffer_renderbuffer_func)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
	FOGL_STATIC gl_named_framebuffer_renderbuffer_func* glNamedFramebufferRenderbuffer;
	typedef void (FOGL_APIENTRY gl_named_framebuffer_parameteri_func)(GLuint framebuffer, GLenum pname, GLint param);
	FOGL_STATIC gl_named_framebuffer_parameteri_func* glNamedFramebufferParameteri;
	typedef void (FOGL_APIENTRY gl_named_framebuffer_texture_func)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
	FOGL_STATIC gl_named_framebuffer_texture_func* glNamedFramebufferTexture;
	typedef void (FOGL_APIENTRY gl_named_framebuffer_texture_layer_func)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
	FOGL_STATIC gl_named_framebuffer_texture_layer_func* glNamedFramebufferTextureLayer;
	typedef void (FOGL_APIENTRY gl_named_framebuffer_draw_buffer_func)(GLuint framebuffer, GLenum buf);
	FOGL_STATIC gl_named_framebuffer_draw_buffer_func* glNamedFramebufferDrawBuffer;
	typedef void (FOGL_APIENTRY gl_named_framebuffer_draw_buffers_func)(GLuint framebuffer, GLsizei n, const GLenum *bufs);
	FOGL_STATIC gl_named_framebuffer_draw_buffers_func* glNamedFramebufferDrawBuffers;
	typedef void (FOGL_APIENTRY gl_named_framebuffer_read_buffer_func)(GLuint framebuffer, GLenum src);
	FOGL_STATIC gl_named_framebuffer_read_buffer_func* glNamedFramebufferReadBuffer;
	typedef void (FOGL_APIENTRY gl_invalidate_named_framebuffer_data_func)(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments);
	FOGL_STATIC gl_invalidate_named_framebuffer_data_func* glInvalidateNamedFramebufferData;
	typedef void (FOGL_APIENTRY gl_invalidate_named_framebuffer_sub_data_func)(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
	FOGL_STATIC gl_invalidate_named_framebuffer_sub_data_func* glInvalidateNamedFramebufferSubData;
	typedef void (FOGL_APIENTRY gl_clear_named_framebufferiv_func)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value);
	FOGL_STATIC gl_clear_named_framebufferiv_func* glClearNamedFramebufferiv;
	typedef void (FOGL_APIENTRY gl_clear_named_framebufferuiv_func)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value);
	FOGL_STATIC gl_clear_named_framebufferuiv_func* glClearNamedFramebufferuiv;
	typedef void (FOGL_APIENTRY gl_clear_named_framebufferfv_func)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value);
	FOGL_STATIC gl_clear_named_framebufferfv_func* glClearNamedFramebufferfv;
	typedef void (FOGL_APIENTRY gl_clear_named_framebufferfi_func)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
	FOGL_STATIC gl_clear_named_framebufferfi_func* glClearNamedFramebufferfi;
	typedef void (FOGL_APIENTRY gl_blit_named_framebuffer_func)(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
	FOGL_STATIC gl_blit_named_framebuffer_func* glBlitNamedFramebuffer;
	typedef GLenum(FOGL_APIENTRY gl_check_named_framebuffer_status_func)(GLuint framebuffer, GLenum target);
	FOGL_STATIC gl_check_named_framebuffer_status_func* glCheckNamedFramebufferStatus;
	typedef void (FOGL_APIENTRY gl_get_named_framebuffer_parameteriv_func)(GLuint framebuffer, GLenum pname, GLint *param);
	FOGL_STATIC gl_get_named_framebuffer_parameteriv_func* glGetNamedFramebufferParameteriv;
	typedef void (FOGL_APIENTRY gl_get_named_framebuffer_attachment_parameteriv_func)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
	FOGL_STATIC gl_get_named_framebuffer_attachment_parameteriv_func* glGetNamedFramebufferAttachmentParameteriv;
	typedef void (FOGL_APIENTRY gl_create_renderbuffers_func)(GLsizei n, GLuint *renderbuffers);
	FOGL_STATIC gl_create_renderbuffers_func* glCreateRenderbuffers;
	typedef void (FOGL_APIENTRY gl_named_renderbuffer_storage_func)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
	FOGL_STATIC gl_named_renderbuffer_storage_func* glNamedRenderbufferStorage;
	typedef void (FOGL_APIENTRY gl_named_renderbuffer_storage_multisample_func)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
	FOGL_STATIC gl_named_renderbuffer_storage_multisample_func* glNamedRenderbufferStorageMultisample;
	typedef void (FOGL_APIENTRY gl_get_named_renderbuffer_parameteriv_func)(GLuint renderbuffer, GLenum pname, GLint *params);
	FOGL_STATIC gl_get_named_renderbuffer_parameteriv_func* glGetNamedRenderbufferParameteriv;
	typedef void (FOGL_APIENTRY gl_create_textures_func)(GLenum target, GLsizei n, GLuint *textures);
	FOGL_STATIC gl_create_textures_func* glCreateTextures;
	typedef void (FOGL_APIENTRY gl_texture_buffer_func)(GLuint texture, GLenum internalformat, GLuint buffer);
	FOGL_STATIC gl_texture_buffer_func* glTextureBuffer;
	typedef void (FOGL_APIENTRY gl_texture_buffer_range_func)(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
	FOGL_STATIC gl_texture_buffer_range_func* glTextureBufferRange;
	typedef void (FOGL_APIENTRY gl_texture_storage1d_func)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
	FOGL_STATIC gl_texture_storage1d_func* glTextureStorage1D;
	typedef void (FOGL_APIENTRY gl_texture_storage2d_func)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
	FOGL_STATIC gl_texture_storage2d_func* glTextureStorage2D;
	typedef void (FOGL_APIENTRY gl_texture_storage3d_func)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
	FOGL_STATIC gl_texture_storage3d_func* glTextureStorage3D;
	typedef void (FOGL_APIENTRY gl_texture_storage2_d_multisample_func)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
	FOGL_STATIC gl_texture_storage2_d_multisample_func* glTextureStorage2DMultisample;
	typedef void (FOGL_APIENTRY gl_texture_storage3_d_multisample_func)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
	FOGL_STATIC gl_texture_storage3_d_multisample_func* glTextureStorage3DMultisample;
	typedef void (FOGL_APIENTRY gl_texture_sub_image1d_func)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
	FOGL_STATIC gl_texture_sub_image1d_func* glTextureSubImage1D;
	typedef void (FOGL_APIENTRY gl_texture_sub_image2d_func)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
	FOGL_STATIC gl_texture_sub_image2d_func* glTextureSubImage2D;
	typedef void (FOGL_APIENTRY gl_texture_sub_image3d_func)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
	FOGL_STATIC gl_texture_sub_image3d_func* glTextureSubImage3D;
	typedef void (FOGL_APIENTRY gl_compressed_texture_sub_image1d_func)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
	FOGL_STATIC gl_compressed_texture_sub_image1d_func* glCompressedTextureSubImage1D;
	typedef void (FOGL_APIENTRY gl_compressed_texture_sub_image2d_func)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
	FOGL_STATIC gl_compressed_texture_sub_image2d_func* glCompressedTextureSubImage2D;
	typedef void (FOGL_APIENTRY gl_compressed_texture_sub_image3d_func)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
	FOGL_STATIC gl_compressed_texture_sub_image3d_func* glCompressedTextureSubImage3D;
	typedef void (FOGL_APIENTRY gl_copy_texture_sub_image1d_func)(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
	FOGL_STATIC gl_copy_texture_sub_image1d_func* glCopyTextureSubImage1D;
	typedef void (FOGL_APIENTRY gl_copy_texture_sub_image2d_func)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	FOGL_STATIC gl_copy_texture_sub_image2d_func* glCopyTextureSubImage2D;
	typedef void (FOGL_APIENTRY gl_copy_texture_sub_image3d_func)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	FOGL_STATIC gl_copy_texture_sub_image3d_func* glCopyTextureSubImage3D;
	typedef void (FOGL_APIENTRY gl_texture_parameterf_func)(GLuint texture, GLenum pname, GLfloat param);
	FOGL_STATIC gl_texture_parameterf_func* glTextureParameterf;
	typedef void (FOGL_APIENTRY gl_texture_parameterfv_func)(GLuint texture, GLenum pname, const GLfloat *param);
	FOGL_STATIC gl_texture_parameterfv_func* glTextureParameterfv;
	typedef void (FOGL_APIENTRY gl_texture_parameteri_func)(GLuint texture, GLenum pname, GLint param);
	FOGL_STATIC gl_texture_parameteri_func* glTextureParameteri;
	typedef void (FOGL_APIENTRY gl_texture_parameter_iiv_func)(GLuint texture, GLenum pname, const GLint *params);
	FOGL_STATIC gl_texture_parameter_iiv_func* glTextureParameterIiv;
	typedef void (FOGL_APIENTRY gl_texture_parameter_iuiv_func)(GLuint texture, GLenum pname, const GLuint *params);
	FOGL_STATIC gl_texture_parameter_iuiv_func* glTextureParameterIuiv;
	typedef void (FOGL_APIENTRY gl_texture_parameteriv_func)(GLuint texture, GLenum pname, const GLint *param);
	FOGL_STATIC gl_texture_parameteriv_func* glTextureParameteriv;
	typedef void (FOGL_APIENTRY gl_generate_texture_mipmap_func)(GLuint texture);
	FOGL_STATIC gl_generate_texture_mipmap_func* glGenerateTextureMipmap;
	typedef void (FOGL_APIENTRY gl_bind_texture_unit_func)(GLuint unit, GLuint texture);
	FOGL_STATIC gl_bind_texture_unit_func* glBindTextureUnit;
	typedef void (FOGL_APIENTRY gl_get_texture_image_func)(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
	FOGL_STATIC gl_get_texture_image_func* glGetTextureImage;
	typedef void (FOGL_APIENTRY gl_get_compressed_texture_image_func)(GLuint texture, GLint level, GLsizei bufSize, void *pixels);
	FOGL_STATIC gl_get_compressed_texture_image_func* glGetCompressedTextureImage;
	typedef void (FOGL_APIENTRY gl_get_texture_level_parameterfv_func)(GLuint texture, GLint level, GLenum pname, GLfloat *params);
	FOGL_STATIC gl_get_texture_level_parameterfv_func* glGetTextureLevelParameterfv;
	typedef void (FOGL_APIENTRY gl_get_texture_level_parameteriv_func)(GLuint texture, GLint level, GLenum pname, GLint *params);
	FOGL_STATIC gl_get_texture_level_parameteriv_func* glGetTextureLevelParameteriv;
	typedef void (FOGL_APIENTRY gl_get_texture_parameterfv_func)(GLuint texture, GLenum pname, GLfloat *params);
	FOGL_STATIC gl_get_texture_parameterfv_func* glGetTextureParameterfv;
	typedef void (FOGL_APIENTRY gl_get_texture_parameter_iiv_func)(GLuint texture, GLenum pname, GLint *params);
	FOGL_STATIC gl_get_texture_parameter_iiv_func* glGetTextureParameterIiv;
	typedef void (FOGL_APIENTRY gl_get_texture_parameter_iuiv_func)(GLuint texture, GLenum pname, GLuint *params);
	FOGL_STATIC gl_get_texture_parameter_iuiv_func* glGetTextureParameterIuiv;
	typedef void (FOGL_APIENTRY gl_get_texture_parameteriv_func)(GLuint texture, GLenum pname, GLint *params);
	FOGL_STATIC gl_get_texture_parameteriv_func* glGetTextureParameteriv;
	typedef void (FOGL_APIENTRY gl_create_vertex_arrays_func)(GLsizei n, GLuint *arrays);
	FOGL_STATIC gl_create_vertex_arrays_func* glCreateVertexArrays;
	typedef void (FOGL_APIENTRY gl_disable_vertex_array_attrib_func)(GLuint vaobj, GLuint index);
	FOGL_STATIC gl_disable_vertex_array_attrib_func* glDisableVertexArrayAttrib;
	typedef void (FOGL_APIENTRY gl_enable_vertex_array_attrib_func)(GLuint vaobj, GLuint index);
	FOGL_STATIC gl_enable_vertex_array_attrib_func* glEnableVertexArrayAttrib;
	typedef void (FOGL_APIENTRY gl_vertex_array_element_buffer_func)(GLuint vaobj, GLuint buffer);
	FOGL_STATIC gl_vertex_array_element_buffer_func* glVertexArrayElementBuffer;
	typedef void (FOGL_APIENTRY gl_vertex_array_vertex_buffer_func)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
	FOGL_STATIC gl_vertex_array_vertex_buffer_func* glVertexArrayVertexBuffer;
	typedef void (FOGL_APIENTRY gl_vertex_array_vertex_buffers_func)(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
	FOGL_STATIC gl_vertex_array_vertex_buffers_func* glVertexArrayVertexBuffers;
	typedef void (FOGL_APIENTRY gl_vertex_array_attrib_binding_func)(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
	FOGL_STATIC gl_vertex_array_attrib_binding_func* glVertexArrayAttribBinding;
	typedef void (FOGL_APIENTRY gl_vertex_array_attrib_format_func)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
	FOGL_STATIC gl_vertex_array_attrib_format_func* glVertexArrayAttribFormat;
	typedef void (FOGL_APIENTRY gl_vertex_array_attrib_i_format_func)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
	FOGL_STATIC gl_vertex_array_attrib_i_format_func* glVertexArrayAttribIFormat;
	typedef void (FOGL_APIENTRY gl_vertex_array_attrib_l_format_func)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
	FOGL_STATIC gl_vertex_array_attrib_l_format_func* glVertexArrayAttribLFormat;
	typedef void (FOGL_APIENTRY gl_vertex_array_binding_divisor_func)(GLuint vaobj, GLuint bindingindex, GLuint divisor);
	FOGL_STATIC gl_vertex_array_binding_divisor_func* glVertexArrayBindingDivisor;
	typedef void (FOGL_APIENTRY gl_get_vertex_arrayiv_func)(GLuint vaobj, GLenum pname, GLint *param);
	FOGL_STATIC gl_get_vertex_arrayiv_func* glGetVertexArrayiv;
	typedef void (FOGL_APIENTRY gl_get_vertex_array_indexediv_func)(GLuint vaobj, GLuint index, GLenum pname, GLint *param);
	FOGL_STATIC gl_get_vertex_array_indexediv_func* glGetVertexArrayIndexediv;
	typedef void (FOGL_APIENTRY gl_get_vertex_array_indexed64iv_func)(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param);
	FOGL_STATIC gl_get_vertex_array_indexed64iv_func* glGetVertexArrayIndexed64iv;
	typedef void (FOGL_APIENTRY gl_create_samplers_func)(GLsizei n, GLuint *samplers);
	FOGL_STATIC gl_create_samplers_func* glCreateSamplers;
	typedef void (FOGL_APIENTRY gl_create_program_pipelines_func)(GLsizei n, GLuint *pipelines);
	FOGL_STATIC gl_create_program_pipelines_func* glCreateProgramPipelines;
	typedef void (FOGL_APIENTRY gl_create_queries_func)(GLenum target, GLsizei n, GLuint *ids);
	FOGL_STATIC gl_create_queries_func* glCreateQueries;
	typedef void (FOGL_APIENTRY gl_get_query_buffer_objecti64v_func)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
	FOGL_STATIC gl_get_query_buffer_objecti64v_func* glGetQueryBufferObjecti64v;
	typedef void (FOGL_APIENTRY gl_get_query_buffer_objectiv_func)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
	FOGL_STATIC gl_get_query_buffer_objectiv_func* glGetQueryBufferObjectiv;
	typedef void (FOGL_APIENTRY gl_get_query_buffer_objectui64v_func)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
	FOGL_STATIC gl_get_query_buffer_objectui64v_func* glGetQueryBufferObjectui64v;
	typedef void (FOGL_APIENTRY gl_get_query_buffer_objectuiv_func)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
	FOGL_STATIC gl_get_query_buffer_objectuiv_func* glGetQueryBufferObjectuiv;
	typedef void (FOGL_APIENTRY gl_memory_barrier_by_region_func)(GLbitfield barriers);
	FOGL_STATIC gl_memory_barrier_by_region_func* glMemoryBarrierByRegion;
	typedef void (FOGL_APIENTRY gl_get_texture_sub_image_func)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
	FOGL_STATIC gl_get_texture_sub_image_func* glGetTextureSubImage;
	typedef void (FOGL_APIENTRY gl_get_compressed_texture_sub_image_func)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels);
	FOGL_STATIC gl_get_compressed_texture_sub_image_func* glGetCompressedTextureSubImage;
	typedef GLenum(FOGL_APIENTRY gl_get_graphics_reset_status_func)(void);
	FOGL_STATIC gl_get_graphics_reset_status_func* glGetGraphicsResetStatus;
	typedef void (FOGL_APIENTRY gl_getn_compressed_tex_image_func)(GLenum target, GLint lod, GLsizei bufSize, void *pixels);
	FOGL_STATIC gl_getn_compressed_tex_image_func* glGetnCompressedTexImage;
	typedef void (FOGL_APIENTRY gl_getn_tex_image_func)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
	FOGL_STATIC gl_getn_tex_image_func* glGetnTexImage;
	typedef void (FOGL_APIENTRY gl_getn_uniformdv_func)(GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
	FOGL_STATIC gl_getn_uniformdv_func* glGetnUniformdv;
	typedef void (FOGL_APIENTRY gl_getn_uniformfv_func)(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
	FOGL_STATIC gl_getn_uniformfv_func* glGetnUniformfv;
	typedef void (FOGL_APIENTRY gl_getn_uniformiv_func)(GLuint program, GLint location, GLsizei bufSize, GLint *params);
	FOGL_STATIC gl_getn_uniformiv_func* glGetnUniformiv;
	typedef void (FOGL_APIENTRY gl_getn_uniformuiv_func)(GLuint program, GLint location, GLsizei bufSize, GLuint *params);
	FOGL_STATIC gl_getn_uniformuiv_func* glGetnUniformuiv;
	typedef void (FOGL_APIENTRY gl_readn_pixels_func)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
	FOGL_STATIC gl_readn_pixels_func* glReadnPixels;
	typedef void (FOGL_APIENTRY gl_getn_mapdv_func)(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v);
	FOGL_STATIC gl_getn_mapdv_func* glGetnMapdv;
	typedef void (FOGL_APIENTRY gl_getn_mapfv_func)(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v);
	FOGL_STATIC gl_getn_mapfv_func* glGetnMapfv;
	typedef void (FOGL_APIENTRY gl_getn_mapiv_func)(GLenum target, GLenum query, GLsizei bufSize, GLint *v);
	FOGL_STATIC gl_getn_mapiv_func* glGetnMapiv;
	typedef void (FOGL_APIENTRY gl_getn_pixel_mapfv_func)(GLenum map, GLsizei bufSize, GLfloat *values);
	FOGL_STATIC gl_getn_pixel_mapfv_func* glGetnPixelMapfv;
	typedef void (FOGL_APIENTRY gl_getn_pixel_mapuiv_func)(GLenum map, GLsizei bufSize, GLuint *values);
	FOGL_STATIC gl_getn_pixel_mapuiv_func* glGetnPixelMapuiv;
	typedef void (FOGL_APIENTRY gl_getn_pixel_mapusv_func)(GLenum map, GLsizei bufSize, GLushort *values);
	FOGL_STATIC gl_getn_pixel_mapusv_func* glGetnPixelMapusv;
	typedef void (FOGL_APIENTRY gl_getn_polygon_stipple_func)(GLsizei bufSize, GLubyte *pattern);
	FOGL_STATIC gl_getn_polygon_stipple_func* glGetnPolygonStipple;
	typedef void (FOGL_APIENTRY gl_getn_color_table_func)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table);
	FOGL_STATIC gl_getn_color_table_func* glGetnColorTable;
	typedef void (FOGL_APIENTRY gl_getn_convolution_filter_func)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image);
	FOGL_STATIC gl_getn_convolution_filter_func* glGetnConvolutionFilter;
	typedef void (FOGL_APIENTRY gl_getn_separable_filter_func)(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span);
	FOGL_STATIC gl_getn_separable_filter_func* glGetnSeparableFilter;
	typedef void (FOGL_APIENTRY gl_getn_histogram_func)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
	FOGL_STATIC gl_getn_histogram_func* glGetnHistogram;
	typedef void (FOGL_APIENTRY gl_getn_minmax_func)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
	FOGL_STATIC gl_getn_minmax_func* glGetnMinmax;
	typedef void (FOGL_APIENTRY gl_texture_barrier_func)(void);
	FOGL_STATIC gl_texture_barrier_func* glTextureBarrier;
#	else
	FOGL_GLAPI void FOGL_APIENTRY glClipControl(GLenum origin, GLenum depth);
	FOGL_GLAPI void FOGL_APIENTRY glCreateTransformFeedbacks(GLsizei n, GLuint *ids);
	FOGL_GLAPI void FOGL_APIENTRY glTransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer);
	FOGL_GLAPI void FOGL_APIENTRY glTransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
	FOGL_GLAPI void FOGL_APIENTRY glGetTransformFeedbackiv(GLuint xfb, GLenum pname, GLint *param);
	FOGL_GLAPI void FOGL_APIENTRY glGetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint *param);
	FOGL_GLAPI void FOGL_APIENTRY glGetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64 *param);
	FOGL_GLAPI void FOGL_APIENTRY glCreateBuffers(GLsizei n, GLuint *buffers);
	FOGL_GLAPI void FOGL_APIENTRY glNamedBufferStorage(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
	FOGL_GLAPI void FOGL_APIENTRY glNamedBufferData(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
	FOGL_GLAPI void FOGL_APIENTRY glNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
	FOGL_GLAPI void FOGL_APIENTRY glCopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
	FOGL_GLAPI void FOGL_APIENTRY glClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
	FOGL_GLAPI void FOGL_APIENTRY glClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
	FOGL_GLAPI void FOGL_APIENTRY glMapNamedBuffer(GLuint buffer, GLenum access);
	FOGL_GLAPI void FOGL_APIENTRY glMapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
	FOGL_GLAPI GLboolean FOGL_APIENTRY glUnmapNamedBuffer(GLuint buffer);
	FOGL_GLAPI void FOGL_APIENTRY glFlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length);
	FOGL_GLAPI void FOGL_APIENTRY glGetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64 *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetNamedBufferPointerv(GLuint buffer, GLenum pname, void **params);
	FOGL_GLAPI void FOGL_APIENTRY glGetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
	FOGL_GLAPI void FOGL_APIENTRY glCreateFramebuffers(GLsizei n, GLuint *framebuffers);
	FOGL_GLAPI void FOGL_APIENTRY glNamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
	FOGL_GLAPI void FOGL_APIENTRY glNamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param);
	FOGL_GLAPI void FOGL_APIENTRY glNamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
	FOGL_GLAPI void FOGL_APIENTRY glNamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
	FOGL_GLAPI void FOGL_APIENTRY glNamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf);
	FOGL_GLAPI void FOGL_APIENTRY glNamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum *bufs);
	FOGL_GLAPI void FOGL_APIENTRY glNamedFramebufferReadBuffer(GLuint framebuffer, GLenum src);
	FOGL_GLAPI void FOGL_APIENTRY glInvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments);
	FOGL_GLAPI void FOGL_APIENTRY glInvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
	FOGL_GLAPI void FOGL_APIENTRY glClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value);
	FOGL_GLAPI void FOGL_APIENTRY glClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value);
	FOGL_GLAPI void FOGL_APIENTRY glClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value);
	FOGL_GLAPI void FOGL_APIENTRY glClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
	FOGL_GLAPI void FOGL_APIENTRY glBlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
	FOGL_GLAPI GLenum FOGL_APIENTRY glCheckNamedFramebufferStatus(GLuint framebuffer, GLenum target);
	FOGL_GLAPI void FOGL_APIENTRY glGetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLint *param);
	FOGL_GLAPI void FOGL_APIENTRY glGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glCreateRenderbuffers(GLsizei n, GLuint *renderbuffers);
	FOGL_GLAPI void FOGL_APIENTRY glNamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
	FOGL_GLAPI void FOGL_APIENTRY glNamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
	FOGL_GLAPI void FOGL_APIENTRY glGetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glCreateTextures(GLenum target, GLsizei n, GLuint *textures);
	FOGL_GLAPI void FOGL_APIENTRY glTextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer);
	FOGL_GLAPI void FOGL_APIENTRY glTextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
	FOGL_GLAPI void FOGL_APIENTRY glTextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
	FOGL_GLAPI void FOGL_APIENTRY glTextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
	FOGL_GLAPI void FOGL_APIENTRY glTextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
	FOGL_GLAPI void FOGL_APIENTRY glTextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
	FOGL_GLAPI void FOGL_APIENTRY glTextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
	FOGL_GLAPI void FOGL_APIENTRY glTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
	FOGL_GLAPI void FOGL_APIENTRY glTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
	FOGL_GLAPI void FOGL_APIENTRY glTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
	FOGL_GLAPI void FOGL_APIENTRY glCompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
	FOGL_GLAPI void FOGL_APIENTRY glCompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
	FOGL_GLAPI void FOGL_APIENTRY glCompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
	FOGL_GLAPI void FOGL_APIENTRY glCopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
	FOGL_GLAPI void FOGL_APIENTRY glCopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	FOGL_GLAPI void FOGL_APIENTRY glCopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	FOGL_GLAPI void FOGL_APIENTRY glTextureParameterf(GLuint texture, GLenum pname, GLfloat param);
	FOGL_GLAPI void FOGL_APIENTRY glTextureParameterfv(GLuint texture, GLenum pname, const GLfloat *param);
	FOGL_GLAPI void FOGL_APIENTRY glTextureParameteri(GLuint texture, GLenum pname, GLint param);
	FOGL_GLAPI void FOGL_APIENTRY glTextureParameterIiv(GLuint texture, GLenum pname, const GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glTextureParameterIuiv(GLuint texture, GLenum pname, const GLuint *params);
	FOGL_GLAPI void FOGL_APIENTRY glTextureParameteriv(GLuint texture, GLenum pname, const GLint *param);
	FOGL_GLAPI void FOGL_APIENTRY glGenerateTextureMipmap(GLuint texture);
	FOGL_GLAPI void FOGL_APIENTRY glBindTextureUnit(GLuint unit, GLuint texture);
	FOGL_GLAPI void FOGL_APIENTRY glGetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
	FOGL_GLAPI void FOGL_APIENTRY glGetCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, void *pixels);
	FOGL_GLAPI void FOGL_APIENTRY glGetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, GLfloat *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetTextureParameterfv(GLuint texture, GLenum pname, GLfloat *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetTextureParameterIiv(GLuint texture, GLenum pname, GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetTextureParameterIuiv(GLuint texture, GLenum pname, GLuint *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetTextureParameteriv(GLuint texture, GLenum pname, GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glCreateVertexArrays(GLsizei n, GLuint *arrays);
	FOGL_GLAPI void FOGL_APIENTRY glDisableVertexArrayAttrib(GLuint vaobj, GLuint index);
	FOGL_GLAPI void FOGL_APIENTRY glEnableVertexArrayAttrib(GLuint vaobj, GLuint index);
	FOGL_GLAPI void FOGL_APIENTRY glVertexArrayElementBuffer(GLuint vaobj, GLuint buffer);
	FOGL_GLAPI void FOGL_APIENTRY glVertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
	FOGL_GLAPI void FOGL_APIENTRY glVertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
	FOGL_GLAPI void FOGL_APIENTRY glVertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
	FOGL_GLAPI void FOGL_APIENTRY glVertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
	FOGL_GLAPI void FOGL_APIENTRY glVertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
	FOGL_GLAPI void FOGL_APIENTRY glVertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
	FOGL_GLAPI void FOGL_APIENTRY glVertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor);
	FOGL_GLAPI void FOGL_APIENTRY glGetVertexArrayiv(GLuint vaobj, GLenum pname, GLint *param);
	FOGL_GLAPI void FOGL_APIENTRY glGetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLint *param);
	FOGL_GLAPI void FOGL_APIENTRY glGetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param);
	FOGL_GLAPI void FOGL_APIENTRY glCreateSamplers(GLsizei n, GLuint *samplers);
	FOGL_GLAPI void FOGL_APIENTRY glCreateProgramPipelines(GLsizei n, GLuint *pipelines);
	FOGL_GLAPI void FOGL_APIENTRY glCreateQueries(GLenum target, GLsizei n, GLuint *ids);
	FOGL_GLAPI void FOGL_APIENTRY glGetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
	FOGL_GLAPI void FOGL_APIENTRY glGetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
	FOGL_GLAPI void FOGL_APIENTRY glGetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
	FOGL_GLAPI void FOGL_APIENTRY glGetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
	FOGL_GLAPI void FOGL_APIENTRY glMemoryBarrierByRegion(GLbitfield barriers);
	FOGL_GLAPI void FOGL_APIENTRY glGetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
	FOGL_GLAPI void FOGL_APIENTRY glGetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels);
	FOGL_GLAPI GLenum FOGL_APIENTRY glGetGraphicsResetStatus(void);
	FOGL_GLAPI void FOGL_APIENTRY glGetnCompressedTexImage(GLenum target, GLint lod, GLsizei bufSize, void *pixels);
	FOGL_GLAPI void FOGL_APIENTRY glGetnTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
	FOGL_GLAPI void FOGL_APIENTRY glGetnUniformdv(GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint *params);
	FOGL_GLAPI void FOGL_APIENTRY glGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint *params);
	FOGL_GLAPI void FOGL_APIENTRY glReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
	FOGL_GLAPI void FOGL_APIENTRY glGetnMapdv(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v);
	FOGL_GLAPI void FOGL_APIENTRY glGetnMapfv(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v);
	FOGL_GLAPI void FOGL_APIENTRY glGetnMapiv(GLenum target, GLenum query, GLsizei bufSize, GLint *v);
	FOGL_GLAPI void FOGL_APIENTRY glGetnPixelMapfv(GLenum map, GLsizei bufSize, GLfloat *values);
	FOGL_GLAPI void FOGL_APIENTRY glGetnPixelMapuiv(GLenum map, GLsizei bufSize, GLuint *values);
	FOGL_GLAPI void FOGL_APIENTRY glGetnPixelMapusv(GLenum map, GLsizei bufSize, GLushort *values);
	FOGL_GLAPI void FOGL_APIENTRY glGetnPolygonStipple(GLsizei bufSize, GLubyte *pattern);
	FOGL_GLAPI void FOGL_APIENTRY glGetnColorTable(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table);
	FOGL_GLAPI void FOGL_APIENTRY glGetnConvolutionFilter(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image);
	FOGL_GLAPI void FOGL_APIENTRY glGetnSeparableFilter(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span);
	FOGL_GLAPI void FOGL_APIENTRY glGetnHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
	FOGL_GLAPI void FOGL_APIENTRY glGetnMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
	FOGL_GLAPI void FOGL_APIENTRY glTextureBarrier(void);
#	endif // FOGL_STATIC
#endif // GL_VERSION_4_5

#ifdef __cplusplus
}
#endif

#endif // FOGL_INCLUDE_HPP

#if defined(FOGL_IMPLEMENTATION) && !defined(FOGL_IMPLEMENTED)
#	define FOGL_IMPLEMENTED

namespace fogl {
	static void *GetOpenGLProcAddress(void *libraryHandle, const char *name) {
		void *result = nullptr;
		return(result);
	}
	fogl_api void LoadOpenGLExtensions() {

	}
}

#endif // FOGL_IMPLEMENTATION